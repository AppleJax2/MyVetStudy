
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Practice
 * 
 */
export type Practice = $Result.DefaultSelection<Prisma.$PracticePayload>
/**
 * Model SubscriptionHistory
 * 
 */
export type SubscriptionHistory = $Result.DefaultSelection<Prisma.$SubscriptionHistoryPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Study
 * 
 */
export type Study = $Result.DefaultSelection<Prisma.$StudyPayload>
/**
 * Model StudyPatient
 * 
 */
export type StudyPatient = $Result.DefaultSelection<Prisma.$StudyPatientPayload>
/**
 * Model StudyAssignment
 * 
 */
export type StudyAssignment = $Result.DefaultSelection<Prisma.$StudyAssignmentPayload>
/**
 * Model StudyNote
 * 
 */
export type StudyNote = $Result.DefaultSelection<Prisma.$StudyNotePayload>
/**
 * Model SymptomTemplate
 * 
 */
export type SymptomTemplate = $Result.DefaultSelection<Prisma.$SymptomTemplatePayload>
/**
 * Model Observation
 * 
 */
export type Observation = $Result.DefaultSelection<Prisma.$ObservationPayload>
/**
 * Model TreatmentTemplate
 * 
 */
export type TreatmentTemplate = $Result.DefaultSelection<Prisma.$TreatmentTemplatePayload>
/**
 * Model Treatment
 * 
 */
export type Treatment = $Result.DefaultSelection<Prisma.$TreatmentPayload>
/**
 * Model AlertThreshold
 * 
 */
export type AlertThreshold = $Result.DefaultSelection<Prisma.$AlertThresholdPayload>
/**
 * Model Alert
 * 
 */
export type Alert = $Result.DefaultSelection<Prisma.$AlertPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  PRACTICE_OWNER: 'PRACTICE_OWNER',
  VETERINARIAN: 'VETERINARIAN',
  TECHNICIAN: 'TECHNICIAN',
  ASSISTANT: 'ASSISTANT',
  RECEPTIONIST: 'RECEPTIONIST'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const SubscriptionTier: {
  BASIC: 'BASIC',
  STANDARD: 'STANDARD',
  PREMIUM: 'PREMIUM',
  TRIAL: 'TRIAL'
};

export type SubscriptionTier = (typeof SubscriptionTier)[keyof typeof SubscriptionTier]


export const SubscriptionStatus: {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED',
  TRIAL: 'TRIAL'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const Sex: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  UNKNOWN: 'UNKNOWN'
};

export type Sex = (typeof Sex)[keyof typeof Sex]


export const StudyStatus: {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

export type StudyStatus = (typeof StudyStatus)[keyof typeof StudyStatus]


export const StudyRole: {
  LEAD_RESEARCHER: 'LEAD_RESEARCHER',
  RESEARCHER: 'RESEARCHER',
  OBSERVER: 'OBSERVER',
  ASSISTANT: 'ASSISTANT'
};

export type StudyRole = (typeof StudyRole)[keyof typeof StudyRole]


export const SymptomDataType: {
  NUMERIC: 'NUMERIC',
  BOOLEAN: 'BOOLEAN',
  SCALE: 'SCALE',
  ENUMERATION: 'ENUMERATION',
  TEXT: 'TEXT',
  IMAGE: 'IMAGE'
};

export type SymptomDataType = (typeof SymptomDataType)[keyof typeof SymptomDataType]


export const AlertSeverity: {
  INFO: 'INFO',
  WARNING: 'WARNING',
  CRITICAL: 'CRITICAL'
};

export type AlertSeverity = (typeof AlertSeverity)[keyof typeof AlertSeverity]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type SubscriptionTier = $Enums.SubscriptionTier

export const SubscriptionTier: typeof $Enums.SubscriptionTier

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

export type Sex = $Enums.Sex

export const Sex: typeof $Enums.Sex

export type StudyStatus = $Enums.StudyStatus

export const StudyStatus: typeof $Enums.StudyStatus

export type StudyRole = $Enums.StudyRole

export const StudyRole: typeof $Enums.StudyRole

export type SymptomDataType = $Enums.SymptomDataType

export const SymptomDataType: typeof $Enums.SymptomDataType

export type AlertSeverity = $Enums.AlertSeverity

export const AlertSeverity: typeof $Enums.AlertSeverity

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.practice`: Exposes CRUD operations for the **Practice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Practices
    * const practices = await prisma.practice.findMany()
    * ```
    */
  get practice(): Prisma.PracticeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscriptionHistory`: Exposes CRUD operations for the **SubscriptionHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubscriptionHistories
    * const subscriptionHistories = await prisma.subscriptionHistory.findMany()
    * ```
    */
  get subscriptionHistory(): Prisma.SubscriptionHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.study`: Exposes CRUD operations for the **Study** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Studies
    * const studies = await prisma.study.findMany()
    * ```
    */
  get study(): Prisma.StudyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyPatient`: Exposes CRUD operations for the **StudyPatient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudyPatients
    * const studyPatients = await prisma.studyPatient.findMany()
    * ```
    */
  get studyPatient(): Prisma.StudyPatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyAssignment`: Exposes CRUD operations for the **StudyAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudyAssignments
    * const studyAssignments = await prisma.studyAssignment.findMany()
    * ```
    */
  get studyAssignment(): Prisma.StudyAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyNote`: Exposes CRUD operations for the **StudyNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudyNotes
    * const studyNotes = await prisma.studyNote.findMany()
    * ```
    */
  get studyNote(): Prisma.StudyNoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.symptomTemplate`: Exposes CRUD operations for the **SymptomTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SymptomTemplates
    * const symptomTemplates = await prisma.symptomTemplate.findMany()
    * ```
    */
  get symptomTemplate(): Prisma.SymptomTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.observation`: Exposes CRUD operations for the **Observation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Observations
    * const observations = await prisma.observation.findMany()
    * ```
    */
  get observation(): Prisma.ObservationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.treatmentTemplate`: Exposes CRUD operations for the **TreatmentTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TreatmentTemplates
    * const treatmentTemplates = await prisma.treatmentTemplate.findMany()
    * ```
    */
  get treatmentTemplate(): Prisma.TreatmentTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.treatment`: Exposes CRUD operations for the **Treatment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Treatments
    * const treatments = await prisma.treatment.findMany()
    * ```
    */
  get treatment(): Prisma.TreatmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alertThreshold`: Exposes CRUD operations for the **AlertThreshold** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlertThresholds
    * const alertThresholds = await prisma.alertThreshold.findMany()
    * ```
    */
  get alertThreshold(): Prisma.AlertThresholdDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alert`: Exposes CRUD operations for the **Alert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alerts
    * const alerts = await prisma.alert.findMany()
    * ```
    */
  get alert(): Prisma.AlertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Practice: 'Practice',
    SubscriptionHistory: 'SubscriptionHistory',
    Patient: 'Patient',
    Study: 'Study',
    StudyPatient: 'StudyPatient',
    StudyAssignment: 'StudyAssignment',
    StudyNote: 'StudyNote',
    SymptomTemplate: 'SymptomTemplate',
    Observation: 'Observation',
    TreatmentTemplate: 'TreatmentTemplate',
    Treatment: 'Treatment',
    AlertThreshold: 'AlertThreshold',
    Alert: 'Alert',
    Notification: 'Notification',
    File: 'File'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "practice" | "subscriptionHistory" | "patient" | "study" | "studyPatient" | "studyAssignment" | "studyNote" | "symptomTemplate" | "observation" | "treatmentTemplate" | "treatment" | "alertThreshold" | "alert" | "notification" | "file"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Practice: {
        payload: Prisma.$PracticePayload<ExtArgs>
        fields: Prisma.PracticeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          findFirst: {
            args: Prisma.PracticeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          findMany: {
            args: Prisma.PracticeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          create: {
            args: Prisma.PracticeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          createMany: {
            args: Prisma.PracticeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          delete: {
            args: Prisma.PracticeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          update: {
            args: Prisma.PracticeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          deleteMany: {
            args: Prisma.PracticeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PracticeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          upsert: {
            args: Prisma.PracticeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          aggregate: {
            args: Prisma.PracticeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePractice>
          }
          groupBy: {
            args: Prisma.PracticeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticeCountArgs<ExtArgs>
            result: $Utils.Optional<PracticeCountAggregateOutputType> | number
          }
        }
      }
      SubscriptionHistory: {
        payload: Prisma.$SubscriptionHistoryPayload<ExtArgs>
        fields: Prisma.SubscriptionHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>
          }
          findMany: {
            args: Prisma.SubscriptionHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>[]
          }
          create: {
            args: Prisma.SubscriptionHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>
          }
          createMany: {
            args: Prisma.SubscriptionHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>
          }
          update: {
            args: Prisma.SubscriptionHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionHistoryPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscriptionHistory>
          }
          groupBy: {
            args: Prisma.SubscriptionHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionHistoryCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Study: {
        payload: Prisma.$StudyPayload<ExtArgs>
        fields: Prisma.StudyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          findFirst: {
            args: Prisma.StudyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          findMany: {
            args: Prisma.StudyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>[]
          }
          create: {
            args: Prisma.StudyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          createMany: {
            args: Prisma.StudyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>[]
          }
          delete: {
            args: Prisma.StudyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          update: {
            args: Prisma.StudyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          deleteMany: {
            args: Prisma.StudyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>[]
          }
          upsert: {
            args: Prisma.StudyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          aggregate: {
            args: Prisma.StudyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudy>
          }
          groupBy: {
            args: Prisma.StudyGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyCountArgs<ExtArgs>
            result: $Utils.Optional<StudyCountAggregateOutputType> | number
          }
        }
      }
      StudyPatient: {
        payload: Prisma.$StudyPatientPayload<ExtArgs>
        fields: Prisma.StudyPatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyPatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyPatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>
          }
          findFirst: {
            args: Prisma.StudyPatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyPatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>
          }
          findMany: {
            args: Prisma.StudyPatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>[]
          }
          create: {
            args: Prisma.StudyPatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>
          }
          createMany: {
            args: Prisma.StudyPatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudyPatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>[]
          }
          delete: {
            args: Prisma.StudyPatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>
          }
          update: {
            args: Prisma.StudyPatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>
          }
          deleteMany: {
            args: Prisma.StudyPatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudyPatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudyPatientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>[]
          }
          upsert: {
            args: Prisma.StudyPatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPatientPayload>
          }
          aggregate: {
            args: Prisma.StudyPatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyPatient>
          }
          groupBy: {
            args: Prisma.StudyPatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyPatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyPatientCountArgs<ExtArgs>
            result: $Utils.Optional<StudyPatientCountAggregateOutputType> | number
          }
        }
      }
      StudyAssignment: {
        payload: Prisma.$StudyAssignmentPayload<ExtArgs>
        fields: Prisma.StudyAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>
          }
          findFirst: {
            args: Prisma.StudyAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>
          }
          findMany: {
            args: Prisma.StudyAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>[]
          }
          create: {
            args: Prisma.StudyAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>
          }
          createMany: {
            args: Prisma.StudyAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudyAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>[]
          }
          delete: {
            args: Prisma.StudyAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>
          }
          update: {
            args: Prisma.StudyAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.StudyAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudyAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudyAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.StudyAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyAssignmentPayload>
          }
          aggregate: {
            args: Prisma.StudyAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyAssignment>
          }
          groupBy: {
            args: Prisma.StudyAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<StudyAssignmentCountAggregateOutputType> | number
          }
        }
      }
      StudyNote: {
        payload: Prisma.$StudyNotePayload<ExtArgs>
        fields: Prisma.StudyNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>
          }
          findFirst: {
            args: Prisma.StudyNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>
          }
          findMany: {
            args: Prisma.StudyNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>[]
          }
          create: {
            args: Prisma.StudyNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>
          }
          createMany: {
            args: Prisma.StudyNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudyNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>[]
          }
          delete: {
            args: Prisma.StudyNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>
          }
          update: {
            args: Prisma.StudyNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>
          }
          deleteMany: {
            args: Prisma.StudyNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudyNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudyNoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>[]
          }
          upsert: {
            args: Prisma.StudyNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyNotePayload>
          }
          aggregate: {
            args: Prisma.StudyNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyNote>
          }
          groupBy: {
            args: Prisma.StudyNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyNoteCountArgs<ExtArgs>
            result: $Utils.Optional<StudyNoteCountAggregateOutputType> | number
          }
        }
      }
      SymptomTemplate: {
        payload: Prisma.$SymptomTemplatePayload<ExtArgs>
        fields: Prisma.SymptomTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SymptomTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SymptomTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>
          }
          findFirst: {
            args: Prisma.SymptomTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SymptomTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>
          }
          findMany: {
            args: Prisma.SymptomTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>[]
          }
          create: {
            args: Prisma.SymptomTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>
          }
          createMany: {
            args: Prisma.SymptomTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SymptomTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>[]
          }
          delete: {
            args: Prisma.SymptomTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>
          }
          update: {
            args: Prisma.SymptomTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>
          }
          deleteMany: {
            args: Prisma.SymptomTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SymptomTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SymptomTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>[]
          }
          upsert: {
            args: Prisma.SymptomTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymptomTemplatePayload>
          }
          aggregate: {
            args: Prisma.SymptomTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSymptomTemplate>
          }
          groupBy: {
            args: Prisma.SymptomTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<SymptomTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.SymptomTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<SymptomTemplateCountAggregateOutputType> | number
          }
        }
      }
      Observation: {
        payload: Prisma.$ObservationPayload<ExtArgs>
        fields: Prisma.ObservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ObservationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ObservationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          findFirst: {
            args: Prisma.ObservationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ObservationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          findMany: {
            args: Prisma.ObservationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>[]
          }
          create: {
            args: Prisma.ObservationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          createMany: {
            args: Prisma.ObservationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ObservationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>[]
          }
          delete: {
            args: Prisma.ObservationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          update: {
            args: Prisma.ObservationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          deleteMany: {
            args: Prisma.ObservationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ObservationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ObservationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>[]
          }
          upsert: {
            args: Prisma.ObservationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObservationPayload>
          }
          aggregate: {
            args: Prisma.ObservationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateObservation>
          }
          groupBy: {
            args: Prisma.ObservationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ObservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ObservationCountArgs<ExtArgs>
            result: $Utils.Optional<ObservationCountAggregateOutputType> | number
          }
        }
      }
      TreatmentTemplate: {
        payload: Prisma.$TreatmentTemplatePayload<ExtArgs>
        fields: Prisma.TreatmentTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>
          }
          findFirst: {
            args: Prisma.TreatmentTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>
          }
          findMany: {
            args: Prisma.TreatmentTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>[]
          }
          create: {
            args: Prisma.TreatmentTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>
          }
          createMany: {
            args: Prisma.TreatmentTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreatmentTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>[]
          }
          delete: {
            args: Prisma.TreatmentTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>
          }
          update: {
            args: Prisma.TreatmentTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>
          }
          deleteMany: {
            args: Prisma.TreatmentTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TreatmentTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>[]
          }
          upsert: {
            args: Prisma.TreatmentTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentTemplatePayload>
          }
          aggregate: {
            args: Prisma.TreatmentTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatmentTemplate>
          }
          groupBy: {
            args: Prisma.TreatmentTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentTemplateCountAggregateOutputType> | number
          }
        }
      }
      Treatment: {
        payload: Prisma.$TreatmentPayload<ExtArgs>
        fields: Prisma.TreatmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          findFirst: {
            args: Prisma.TreatmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          findMany: {
            args: Prisma.TreatmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          create: {
            args: Prisma.TreatmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          createMany: {
            args: Prisma.TreatmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreatmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          delete: {
            args: Prisma.TreatmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          update: {
            args: Prisma.TreatmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          deleteMany: {
            args: Prisma.TreatmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TreatmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          upsert: {
            args: Prisma.TreatmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          aggregate: {
            args: Prisma.TreatmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatment>
          }
          groupBy: {
            args: Prisma.TreatmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentCountAggregateOutputType> | number
          }
        }
      }
      AlertThreshold: {
        payload: Prisma.$AlertThresholdPayload<ExtArgs>
        fields: Prisma.AlertThresholdFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertThresholdFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertThresholdFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>
          }
          findFirst: {
            args: Prisma.AlertThresholdFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertThresholdFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>
          }
          findMany: {
            args: Prisma.AlertThresholdFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>[]
          }
          create: {
            args: Prisma.AlertThresholdCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>
          }
          createMany: {
            args: Prisma.AlertThresholdCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlertThresholdCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>[]
          }
          delete: {
            args: Prisma.AlertThresholdDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>
          }
          update: {
            args: Prisma.AlertThresholdUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>
          }
          deleteMany: {
            args: Prisma.AlertThresholdDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertThresholdUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlertThresholdUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>[]
          }
          upsert: {
            args: Prisma.AlertThresholdUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertThresholdPayload>
          }
          aggregate: {
            args: Prisma.AlertThresholdAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlertThreshold>
          }
          groupBy: {
            args: Prisma.AlertThresholdGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertThresholdGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertThresholdCountArgs<ExtArgs>
            result: $Utils.Optional<AlertThresholdCountAggregateOutputType> | number
          }
        }
      }
      Alert: {
        payload: Prisma.$AlertPayload<ExtArgs>
        fields: Prisma.AlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findFirst: {
            args: Prisma.AlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findMany: {
            args: Prisma.AlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          create: {
            args: Prisma.AlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          createMany: {
            args: Prisma.AlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          delete: {
            args: Prisma.AlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          update: {
            args: Prisma.AlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          deleteMany: {
            args: Prisma.AlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlertUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          upsert: {
            args: Prisma.AlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          aggregate: {
            args: Prisma.AlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlert>
          }
          groupBy: {
            args: Prisma.AlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertCountArgs<ExtArgs>
            result: $Utils.Optional<AlertCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    practice?: PracticeOmit
    subscriptionHistory?: SubscriptionHistoryOmit
    patient?: PatientOmit
    study?: StudyOmit
    studyPatient?: StudyPatientOmit
    studyAssignment?: StudyAssignmentOmit
    studyNote?: StudyNoteOmit
    symptomTemplate?: SymptomTemplateOmit
    observation?: ObservationOmit
    treatmentTemplate?: TreatmentTemplateOmit
    treatment?: TreatmentOmit
    alertThreshold?: AlertThresholdOmit
    alert?: AlertOmit
    notification?: NotificationOmit
    file?: FileOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdStudies: number
    assignedStudies: number
    createdTreatments: number
    observations: number
    createdPatients: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdStudies?: boolean | UserCountOutputTypeCountCreatedStudiesArgs
    assignedStudies?: boolean | UserCountOutputTypeCountAssignedStudiesArgs
    createdTreatments?: boolean | UserCountOutputTypeCountCreatedTreatmentsArgs
    observations?: boolean | UserCountOutputTypeCountObservationsArgs
    createdPatients?: boolean | UserCountOutputTypeCountCreatedPatientsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedStudiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedStudiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountObservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type PracticeCountOutputType
   */

  export type PracticeCountOutputType = {
    users: number
    patients: number
    studies: number
    subscriptionHistory: number
  }

  export type PracticeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | PracticeCountOutputTypeCountUsersArgs
    patients?: boolean | PracticeCountOutputTypeCountPatientsArgs
    studies?: boolean | PracticeCountOutputTypeCountStudiesArgs
    subscriptionHistory?: boolean | PracticeCountOutputTypeCountSubscriptionHistoryArgs
  }

  // Custom InputTypes
  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeCountOutputType
     */
    select?: PracticeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeCountStudiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyWhereInput
  }

  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeCountSubscriptionHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionHistoryWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    studies: number
    observations: number
    treatments: number
    files: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studies?: boolean | PatientCountOutputTypeCountStudiesArgs
    observations?: boolean | PatientCountOutputTypeCountObservationsArgs
    treatments?: boolean | PatientCountOutputTypeCountTreatmentsArgs
    files?: boolean | PatientCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountStudiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyPatientWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountObservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * Count Type StudyCountOutputType
   */

  export type StudyCountOutputType = {
    patients: number
    assignedUsers: number
    symptomTemplates: number
    treatmentTemplates: number
    notes: number
  }

  export type StudyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patients?: boolean | StudyCountOutputTypeCountPatientsArgs
    assignedUsers?: boolean | StudyCountOutputTypeCountAssignedUsersArgs
    symptomTemplates?: boolean | StudyCountOutputTypeCountSymptomTemplatesArgs
    treatmentTemplates?: boolean | StudyCountOutputTypeCountTreatmentTemplatesArgs
    notes?: boolean | StudyCountOutputTypeCountNotesArgs
  }

  // Custom InputTypes
  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyCountOutputType
     */
    select?: StudyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyPatientWhereInput
  }

  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeCountAssignedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyAssignmentWhereInput
  }

  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeCountSymptomTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SymptomTemplateWhereInput
  }

  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeCountTreatmentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentTemplateWhereInput
  }

  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyNoteWhereInput
  }


  /**
   * Count Type StudyPatientCountOutputType
   */

  export type StudyPatientCountOutputType = {
    observations: number
    treatments: number
  }

  export type StudyPatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    observations?: boolean | StudyPatientCountOutputTypeCountObservationsArgs
    treatments?: boolean | StudyPatientCountOutputTypeCountTreatmentsArgs
  }

  // Custom InputTypes
  /**
   * StudyPatientCountOutputType without action
   */
  export type StudyPatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatientCountOutputType
     */
    select?: StudyPatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudyPatientCountOutputType without action
   */
  export type StudyPatientCountOutputTypeCountObservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
  }

  /**
   * StudyPatientCountOutputType without action
   */
  export type StudyPatientCountOutputTypeCountTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
  }


  /**
   * Count Type SymptomTemplateCountOutputType
   */

  export type SymptomTemplateCountOutputType = {
    observations: number
    alertThresholds: number
  }

  export type SymptomTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    observations?: boolean | SymptomTemplateCountOutputTypeCountObservationsArgs
    alertThresholds?: boolean | SymptomTemplateCountOutputTypeCountAlertThresholdsArgs
  }

  // Custom InputTypes
  /**
   * SymptomTemplateCountOutputType without action
   */
  export type SymptomTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplateCountOutputType
     */
    select?: SymptomTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SymptomTemplateCountOutputType without action
   */
  export type SymptomTemplateCountOutputTypeCountObservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
  }

  /**
   * SymptomTemplateCountOutputType without action
   */
  export type SymptomTemplateCountOutputTypeCountAlertThresholdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertThresholdWhereInput
  }


  /**
   * Count Type ObservationCountOutputType
   */

  export type ObservationCountOutputType = {
    files: number
    alerts: number
  }

  export type ObservationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | ObservationCountOutputTypeCountFilesArgs
    alerts?: boolean | ObservationCountOutputTypeCountAlertsArgs
  }

  // Custom InputTypes
  /**
   * ObservationCountOutputType without action
   */
  export type ObservationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObservationCountOutputType
     */
    select?: ObservationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ObservationCountOutputType without action
   */
  export type ObservationCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * ObservationCountOutputType without action
   */
  export type ObservationCountOutputTypeCountAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
  }


  /**
   * Count Type TreatmentTemplateCountOutputType
   */

  export type TreatmentTemplateCountOutputType = {
    treatments: number
  }

  export type TreatmentTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatments?: boolean | TreatmentTemplateCountOutputTypeCountTreatmentsArgs
  }

  // Custom InputTypes
  /**
   * TreatmentTemplateCountOutputType without action
   */
  export type TreatmentTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplateCountOutputType
     */
    select?: TreatmentTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TreatmentTemplateCountOutputType without action
   */
  export type TreatmentTemplateCountOutputTypeCountTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
  }


  /**
   * Count Type TreatmentCountOutputType
   */

  export type TreatmentCountOutputType = {
    files: number
  }

  export type TreatmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | TreatmentCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentCountOutputType
     */
    select?: TreatmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * Count Type AlertThresholdCountOutputType
   */

  export type AlertThresholdCountOutputType = {
    alerts: number
  }

  export type AlertThresholdCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alerts?: boolean | AlertThresholdCountOutputTypeCountAlertsArgs
  }

  // Custom InputTypes
  /**
   * AlertThresholdCountOutputType without action
   */
  export type AlertThresholdCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThresholdCountOutputType
     */
    select?: AlertThresholdCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlertThresholdCountOutputType without action
   */
  export type AlertThresholdCountOutputTypeCountAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
  }


  /**
   * Count Type AlertCountOutputType
   */

  export type AlertCountOutputType = {
    notifications: number
  }

  export type AlertCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | AlertCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * AlertCountOutputType without action
   */
  export type AlertCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertCountOutputType
     */
    select?: AlertCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlertCountOutputType without action
   */
  export type AlertCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    practiceId: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    practiceId: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    role: number
    createdAt: number
    updatedAt: number
    isActive: number
    practiceId: number
    resetToken: number
    resetTokenExpiry: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    practiceId?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    practiceId?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    practiceId?: true
    resetToken?: true
    resetTokenExpiry?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    practiceId: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    practiceId?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    practice?: boolean | User$practiceArgs<ExtArgs>
    createdStudies?: boolean | User$createdStudiesArgs<ExtArgs>
    assignedStudies?: boolean | User$assignedStudiesArgs<ExtArgs>
    createdTreatments?: boolean | User$createdTreatmentsArgs<ExtArgs>
    observations?: boolean | User$observationsArgs<ExtArgs>
    createdPatients?: boolean | User$createdPatientsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    practiceId?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    practice?: boolean | User$practiceArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    practiceId?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    practice?: boolean | User$practiceArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    practiceId?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "firstName" | "lastName" | "role" | "createdAt" | "updatedAt" | "isActive" | "practiceId" | "resetToken" | "resetTokenExpiry", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | User$practiceArgs<ExtArgs>
    createdStudies?: boolean | User$createdStudiesArgs<ExtArgs>
    assignedStudies?: boolean | User$assignedStudiesArgs<ExtArgs>
    createdTreatments?: boolean | User$createdTreatmentsArgs<ExtArgs>
    observations?: boolean | User$observationsArgs<ExtArgs>
    createdPatients?: boolean | User$createdPatientsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | User$practiceArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | User$practiceArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      practice: Prisma.$PracticePayload<ExtArgs> | null
      createdStudies: Prisma.$StudyPayload<ExtArgs>[]
      assignedStudies: Prisma.$StudyAssignmentPayload<ExtArgs>[]
      createdTreatments: Prisma.$TreatmentPayload<ExtArgs>[]
      observations: Prisma.$ObservationPayload<ExtArgs>[]
      createdPatients: Prisma.$PatientPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
      isActive: boolean
      practiceId: string | null
      resetToken: string | null
      resetTokenExpiry: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practice<T extends User$practiceArgs<ExtArgs> = {}>(args?: Subset<T, User$practiceArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdStudies<T extends User$createdStudiesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdStudiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedStudies<T extends User$assignedStudiesArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedStudiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdTreatments<T extends User$createdTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    observations<T extends User$observationsArgs<ExtArgs> = {}>(args?: Subset<T, User$observationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdPatients<T extends User$createdPatientsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPatientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly practiceId: FieldRef<"User", 'String'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.practice
   */
  export type User$practiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    where?: PracticeWhereInput
  }

  /**
   * User.createdStudies
   */
  export type User$createdStudiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    where?: StudyWhereInput
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    cursor?: StudyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }

  /**
   * User.assignedStudies
   */
  export type User$assignedStudiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    where?: StudyAssignmentWhereInput
    orderBy?: StudyAssignmentOrderByWithRelationInput | StudyAssignmentOrderByWithRelationInput[]
    cursor?: StudyAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyAssignmentScalarFieldEnum | StudyAssignmentScalarFieldEnum[]
  }

  /**
   * User.createdTreatments
   */
  export type User$createdTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    cursor?: TreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * User.observations
   */
  export type User$observationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    cursor?: ObservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * User.createdPatients
   */
  export type User$createdPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Practice
   */

  export type AggregatePractice = {
    _count: PracticeCountAggregateOutputType | null
    _avg: PracticeAvgAggregateOutputType | null
    _sum: PracticeSumAggregateOutputType | null
    _min: PracticeMinAggregateOutputType | null
    _max: PracticeMaxAggregateOutputType | null
  }

  export type PracticeAvgAggregateOutputType = {
    maxStorage: number | null
    currentStorage: number | null
  }

  export type PracticeSumAggregateOutputType = {
    maxStorage: number | null
    currentStorage: number | null
  }

  export type PracticeMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    phone: string | null
    email: string | null
    logo: string | null
    subscriptionTier: $Enums.SubscriptionTier | null
    subscriptionStatus: $Enums.SubscriptionStatus | null
    subscriptionStartDate: Date | null
    subscriptionEndDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    maxStorage: number | null
    currentStorage: number | null
  }

  export type PracticeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    phone: string | null
    email: string | null
    logo: string | null
    subscriptionTier: $Enums.SubscriptionTier | null
    subscriptionStatus: $Enums.SubscriptionStatus | null
    subscriptionStartDate: Date | null
    subscriptionEndDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    maxStorage: number | null
    currentStorage: number | null
  }

  export type PracticeCountAggregateOutputType = {
    id: number
    name: number
    address: number
    phone: number
    email: number
    logo: number
    subscriptionTier: number
    subscriptionStatus: number
    subscriptionStartDate: number
    subscriptionEndDate: number
    createdAt: number
    updatedAt: number
    isActive: number
    customBranding: number
    maxStorage: number
    currentStorage: number
    _all: number
  }


  export type PracticeAvgAggregateInputType = {
    maxStorage?: true
    currentStorage?: true
  }

  export type PracticeSumAggregateInputType = {
    maxStorage?: true
    currentStorage?: true
  }

  export type PracticeMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    email?: true
    logo?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    subscriptionStartDate?: true
    subscriptionEndDate?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    maxStorage?: true
    currentStorage?: true
  }

  export type PracticeMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    email?: true
    logo?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    subscriptionStartDate?: true
    subscriptionEndDate?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    maxStorage?: true
    currentStorage?: true
  }

  export type PracticeCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    email?: true
    logo?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    subscriptionStartDate?: true
    subscriptionEndDate?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    customBranding?: true
    maxStorage?: true
    currentStorage?: true
    _all?: true
  }

  export type PracticeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Practice to aggregate.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Practices
    **/
    _count?: true | PracticeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeMaxAggregateInputType
  }

  export type GetPracticeAggregateType<T extends PracticeAggregateArgs> = {
        [P in keyof T & keyof AggregatePractice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePractice[P]>
      : GetScalarType<T[P], AggregatePractice[P]>
  }




  export type PracticeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeWhereInput
    orderBy?: PracticeOrderByWithAggregationInput | PracticeOrderByWithAggregationInput[]
    by: PracticeScalarFieldEnum[] | PracticeScalarFieldEnum
    having?: PracticeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeCountAggregateInputType | true
    _avg?: PracticeAvgAggregateInputType
    _sum?: PracticeSumAggregateInputType
    _min?: PracticeMinAggregateInputType
    _max?: PracticeMaxAggregateInputType
  }

  export type PracticeGroupByOutputType = {
    id: string
    name: string
    address: string | null
    phone: string | null
    email: string | null
    logo: string | null
    subscriptionTier: $Enums.SubscriptionTier
    subscriptionStatus: $Enums.SubscriptionStatus
    subscriptionStartDate: Date | null
    subscriptionEndDate: Date | null
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    customBranding: JsonValue | null
    maxStorage: number
    currentStorage: number
    _count: PracticeCountAggregateOutputType | null
    _avg: PracticeAvgAggregateOutputType | null
    _sum: PracticeSumAggregateOutputType | null
    _min: PracticeMinAggregateOutputType | null
    _max: PracticeMaxAggregateOutputType | null
  }

  type GetPracticeGroupByPayload<T extends PracticeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeGroupByOutputType[P]>
        }
      >
    >


  export type PracticeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    logo?: boolean
    subscriptionTier?: boolean
    subscriptionStatus?: boolean
    subscriptionStartDate?: boolean
    subscriptionEndDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    customBranding?: boolean
    maxStorage?: boolean
    currentStorage?: boolean
    users?: boolean | Practice$usersArgs<ExtArgs>
    patients?: boolean | Practice$patientsArgs<ExtArgs>
    studies?: boolean | Practice$studiesArgs<ExtArgs>
    subscriptionHistory?: boolean | Practice$subscriptionHistoryArgs<ExtArgs>
    _count?: boolean | PracticeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    logo?: boolean
    subscriptionTier?: boolean
    subscriptionStatus?: boolean
    subscriptionStartDate?: boolean
    subscriptionEndDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    customBranding?: boolean
    maxStorage?: boolean
    currentStorage?: boolean
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    logo?: boolean
    subscriptionTier?: boolean
    subscriptionStatus?: boolean
    subscriptionStartDate?: boolean
    subscriptionEndDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    customBranding?: boolean
    maxStorage?: boolean
    currentStorage?: boolean
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    logo?: boolean
    subscriptionTier?: boolean
    subscriptionStatus?: boolean
    subscriptionStartDate?: boolean
    subscriptionEndDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    customBranding?: boolean
    maxStorage?: boolean
    currentStorage?: boolean
  }

  export type PracticeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "phone" | "email" | "logo" | "subscriptionTier" | "subscriptionStatus" | "subscriptionStartDate" | "subscriptionEndDate" | "createdAt" | "updatedAt" | "isActive" | "customBranding" | "maxStorage" | "currentStorage", ExtArgs["result"]["practice"]>
  export type PracticeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Practice$usersArgs<ExtArgs>
    patients?: boolean | Practice$patientsArgs<ExtArgs>
    studies?: boolean | Practice$studiesArgs<ExtArgs>
    subscriptionHistory?: boolean | Practice$subscriptionHistoryArgs<ExtArgs>
    _count?: boolean | PracticeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PracticeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PracticeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PracticePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Practice"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      patients: Prisma.$PatientPayload<ExtArgs>[]
      studies: Prisma.$StudyPayload<ExtArgs>[]
      subscriptionHistory: Prisma.$SubscriptionHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      phone: string | null
      email: string | null
      logo: string | null
      subscriptionTier: $Enums.SubscriptionTier
      subscriptionStatus: $Enums.SubscriptionStatus
      subscriptionStartDate: Date | null
      subscriptionEndDate: Date | null
      createdAt: Date
      updatedAt: Date
      isActive: boolean
      customBranding: Prisma.JsonValue | null
      maxStorage: number
      currentStorage: number
    }, ExtArgs["result"]["practice"]>
    composites: {}
  }

  type PracticeGetPayload<S extends boolean | null | undefined | PracticeDefaultArgs> = $Result.GetResult<Prisma.$PracticePayload, S>

  type PracticeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PracticeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PracticeCountAggregateInputType | true
    }

  export interface PracticeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Practice'], meta: { name: 'Practice' } }
    /**
     * Find zero or one Practice that matches the filter.
     * @param {PracticeFindUniqueArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticeFindUniqueArgs>(args: SelectSubset<T, PracticeFindUniqueArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Practice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PracticeFindUniqueOrThrowArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticeFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Practice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindFirstArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticeFindFirstArgs>(args?: SelectSubset<T, PracticeFindFirstArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Practice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindFirstOrThrowArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticeFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Practices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Practices
     * const practices = await prisma.practice.findMany()
     * 
     * // Get first 10 Practices
     * const practices = await prisma.practice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceWithIdOnly = await prisma.practice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticeFindManyArgs>(args?: SelectSubset<T, PracticeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Practice.
     * @param {PracticeCreateArgs} args - Arguments to create a Practice.
     * @example
     * // Create one Practice
     * const Practice = await prisma.practice.create({
     *   data: {
     *     // ... data to create a Practice
     *   }
     * })
     * 
     */
    create<T extends PracticeCreateArgs>(args: SelectSubset<T, PracticeCreateArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Practices.
     * @param {PracticeCreateManyArgs} args - Arguments to create many Practices.
     * @example
     * // Create many Practices
     * const practice = await prisma.practice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticeCreateManyArgs>(args?: SelectSubset<T, PracticeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Practices and returns the data saved in the database.
     * @param {PracticeCreateManyAndReturnArgs} args - Arguments to create many Practices.
     * @example
     * // Create many Practices
     * const practice = await prisma.practice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Practices and only return the `id`
     * const practiceWithIdOnly = await prisma.practice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticeCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Practice.
     * @param {PracticeDeleteArgs} args - Arguments to delete one Practice.
     * @example
     * // Delete one Practice
     * const Practice = await prisma.practice.delete({
     *   where: {
     *     // ... filter to delete one Practice
     *   }
     * })
     * 
     */
    delete<T extends PracticeDeleteArgs>(args: SelectSubset<T, PracticeDeleteArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Practice.
     * @param {PracticeUpdateArgs} args - Arguments to update one Practice.
     * @example
     * // Update one Practice
     * const practice = await prisma.practice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticeUpdateArgs>(args: SelectSubset<T, PracticeUpdateArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Practices.
     * @param {PracticeDeleteManyArgs} args - Arguments to filter Practices to delete.
     * @example
     * // Delete a few Practices
     * const { count } = await prisma.practice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticeDeleteManyArgs>(args?: SelectSubset<T, PracticeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Practices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Practices
     * const practice = await prisma.practice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticeUpdateManyArgs>(args: SelectSubset<T, PracticeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Practices and returns the data updated in the database.
     * @param {PracticeUpdateManyAndReturnArgs} args - Arguments to update many Practices.
     * @example
     * // Update many Practices
     * const practice = await prisma.practice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Practices and only return the `id`
     * const practiceWithIdOnly = await prisma.practice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PracticeUpdateManyAndReturnArgs>(args: SelectSubset<T, PracticeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Practice.
     * @param {PracticeUpsertArgs} args - Arguments to update or create a Practice.
     * @example
     * // Update or create a Practice
     * const practice = await prisma.practice.upsert({
     *   create: {
     *     // ... data to create a Practice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Practice we want to update
     *   }
     * })
     */
    upsert<T extends PracticeUpsertArgs>(args: SelectSubset<T, PracticeUpsertArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Practices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeCountArgs} args - Arguments to filter Practices to count.
     * @example
     * // Count the number of Practices
     * const count = await prisma.practice.count({
     *   where: {
     *     // ... the filter for the Practices we want to count
     *   }
     * })
    **/
    count<T extends PracticeCountArgs>(
      args?: Subset<T, PracticeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Practice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeAggregateArgs>(args: Subset<T, PracticeAggregateArgs>): Prisma.PrismaPromise<GetPracticeAggregateType<T>>

    /**
     * Group by Practice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeGroupByArgs['orderBy'] }
        : { orderBy?: PracticeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Practice model
   */
  readonly fields: PracticeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Practice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Practice$usersArgs<ExtArgs> = {}>(args?: Subset<T, Practice$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patients<T extends Practice$patientsArgs<ExtArgs> = {}>(args?: Subset<T, Practice$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studies<T extends Practice$studiesArgs<ExtArgs> = {}>(args?: Subset<T, Practice$studiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscriptionHistory<T extends Practice$subscriptionHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Practice$subscriptionHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Practice model
   */
  interface PracticeFieldRefs {
    readonly id: FieldRef<"Practice", 'String'>
    readonly name: FieldRef<"Practice", 'String'>
    readonly address: FieldRef<"Practice", 'String'>
    readonly phone: FieldRef<"Practice", 'String'>
    readonly email: FieldRef<"Practice", 'String'>
    readonly logo: FieldRef<"Practice", 'String'>
    readonly subscriptionTier: FieldRef<"Practice", 'SubscriptionTier'>
    readonly subscriptionStatus: FieldRef<"Practice", 'SubscriptionStatus'>
    readonly subscriptionStartDate: FieldRef<"Practice", 'DateTime'>
    readonly subscriptionEndDate: FieldRef<"Practice", 'DateTime'>
    readonly createdAt: FieldRef<"Practice", 'DateTime'>
    readonly updatedAt: FieldRef<"Practice", 'DateTime'>
    readonly isActive: FieldRef<"Practice", 'Boolean'>
    readonly customBranding: FieldRef<"Practice", 'Json'>
    readonly maxStorage: FieldRef<"Practice", 'Int'>
    readonly currentStorage: FieldRef<"Practice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Practice findUnique
   */
  export type PracticeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice findUniqueOrThrow
   */
  export type PracticeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice findFirst
   */
  export type PracticeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practices.
     */
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice findFirstOrThrow
   */
  export type PracticeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practices.
     */
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice findMany
   */
  export type PracticeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practices to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice create
   */
  export type PracticeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The data needed to create a Practice.
     */
    data: XOR<PracticeCreateInput, PracticeUncheckedCreateInput>
  }

  /**
   * Practice createMany
   */
  export type PracticeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Practices.
     */
    data: PracticeCreateManyInput | PracticeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Practice createManyAndReturn
   */
  export type PracticeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * The data used to create many Practices.
     */
    data: PracticeCreateManyInput | PracticeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Practice update
   */
  export type PracticeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The data needed to update a Practice.
     */
    data: XOR<PracticeUpdateInput, PracticeUncheckedUpdateInput>
    /**
     * Choose, which Practice to update.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice updateMany
   */
  export type PracticeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Practices.
     */
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyInput>
    /**
     * Filter which Practices to update
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to update.
     */
    limit?: number
  }

  /**
   * Practice updateManyAndReturn
   */
  export type PracticeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * The data used to update Practices.
     */
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyInput>
    /**
     * Filter which Practices to update
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to update.
     */
    limit?: number
  }

  /**
   * Practice upsert
   */
  export type PracticeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The filter to search for the Practice to update in case it exists.
     */
    where: PracticeWhereUniqueInput
    /**
     * In case the Practice found by the `where` argument doesn't exist, create a new Practice with this data.
     */
    create: XOR<PracticeCreateInput, PracticeUncheckedCreateInput>
    /**
     * In case the Practice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticeUpdateInput, PracticeUncheckedUpdateInput>
  }

  /**
   * Practice delete
   */
  export type PracticeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter which Practice to delete.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice deleteMany
   */
  export type PracticeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Practices to delete
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to delete.
     */
    limit?: number
  }

  /**
   * Practice.users
   */
  export type Practice$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Practice.patients
   */
  export type Practice$patientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Practice.studies
   */
  export type Practice$studiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    where?: StudyWhereInput
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    cursor?: StudyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }

  /**
   * Practice.subscriptionHistory
   */
  export type Practice$subscriptionHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    where?: SubscriptionHistoryWhereInput
    orderBy?: SubscriptionHistoryOrderByWithRelationInput | SubscriptionHistoryOrderByWithRelationInput[]
    cursor?: SubscriptionHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionHistoryScalarFieldEnum | SubscriptionHistoryScalarFieldEnum[]
  }

  /**
   * Practice without action
   */
  export type PracticeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
  }


  /**
   * Model SubscriptionHistory
   */

  export type AggregateSubscriptionHistory = {
    _count: SubscriptionHistoryCountAggregateOutputType | null
    _avg: SubscriptionHistoryAvgAggregateOutputType | null
    _sum: SubscriptionHistorySumAggregateOutputType | null
    _min: SubscriptionHistoryMinAggregateOutputType | null
    _max: SubscriptionHistoryMaxAggregateOutputType | null
  }

  export type SubscriptionHistoryAvgAggregateOutputType = {
    amount: number | null
  }

  export type SubscriptionHistorySumAggregateOutputType = {
    amount: number | null
  }

  export type SubscriptionHistoryMinAggregateOutputType = {
    id: string | null
    practiceId: string | null
    tier: $Enums.SubscriptionTier | null
    startDate: Date | null
    endDate: Date | null
    amount: number | null
    paymentId: string | null
    createdAt: Date | null
  }

  export type SubscriptionHistoryMaxAggregateOutputType = {
    id: string | null
    practiceId: string | null
    tier: $Enums.SubscriptionTier | null
    startDate: Date | null
    endDate: Date | null
    amount: number | null
    paymentId: string | null
    createdAt: Date | null
  }

  export type SubscriptionHistoryCountAggregateOutputType = {
    id: number
    practiceId: number
    tier: number
    startDate: number
    endDate: number
    amount: number
    paymentId: number
    createdAt: number
    _all: number
  }


  export type SubscriptionHistoryAvgAggregateInputType = {
    amount?: true
  }

  export type SubscriptionHistorySumAggregateInputType = {
    amount?: true
  }

  export type SubscriptionHistoryMinAggregateInputType = {
    id?: true
    practiceId?: true
    tier?: true
    startDate?: true
    endDate?: true
    amount?: true
    paymentId?: true
    createdAt?: true
  }

  export type SubscriptionHistoryMaxAggregateInputType = {
    id?: true
    practiceId?: true
    tier?: true
    startDate?: true
    endDate?: true
    amount?: true
    paymentId?: true
    createdAt?: true
  }

  export type SubscriptionHistoryCountAggregateInputType = {
    id?: true
    practiceId?: true
    tier?: true
    startDate?: true
    endDate?: true
    amount?: true
    paymentId?: true
    createdAt?: true
    _all?: true
  }

  export type SubscriptionHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionHistory to aggregate.
     */
    where?: SubscriptionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionHistories to fetch.
     */
    orderBy?: SubscriptionHistoryOrderByWithRelationInput | SubscriptionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubscriptionHistories
    **/
    _count?: true | SubscriptionHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionHistoryMaxAggregateInputType
  }

  export type GetSubscriptionHistoryAggregateType<T extends SubscriptionHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriptionHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptionHistory[P]>
      : GetScalarType<T[P], AggregateSubscriptionHistory[P]>
  }




  export type SubscriptionHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionHistoryWhereInput
    orderBy?: SubscriptionHistoryOrderByWithAggregationInput | SubscriptionHistoryOrderByWithAggregationInput[]
    by: SubscriptionHistoryScalarFieldEnum[] | SubscriptionHistoryScalarFieldEnum
    having?: SubscriptionHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionHistoryCountAggregateInputType | true
    _avg?: SubscriptionHistoryAvgAggregateInputType
    _sum?: SubscriptionHistorySumAggregateInputType
    _min?: SubscriptionHistoryMinAggregateInputType
    _max?: SubscriptionHistoryMaxAggregateInputType
  }

  export type SubscriptionHistoryGroupByOutputType = {
    id: string
    practiceId: string
    tier: $Enums.SubscriptionTier
    startDate: Date
    endDate: Date | null
    amount: number | null
    paymentId: string | null
    createdAt: Date
    _count: SubscriptionHistoryCountAggregateOutputType | null
    _avg: SubscriptionHistoryAvgAggregateOutputType | null
    _sum: SubscriptionHistorySumAggregateOutputType | null
    _min: SubscriptionHistoryMinAggregateOutputType | null
    _max: SubscriptionHistoryMaxAggregateOutputType | null
  }

  type GetSubscriptionHistoryGroupByPayload<T extends SubscriptionHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionHistoryGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    tier?: boolean
    startDate?: boolean
    endDate?: boolean
    amount?: boolean
    paymentId?: boolean
    createdAt?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionHistory"]>

  export type SubscriptionHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    tier?: boolean
    startDate?: boolean
    endDate?: boolean
    amount?: boolean
    paymentId?: boolean
    createdAt?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionHistory"]>

  export type SubscriptionHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    tier?: boolean
    startDate?: boolean
    endDate?: boolean
    amount?: boolean
    paymentId?: boolean
    createdAt?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionHistory"]>

  export type SubscriptionHistorySelectScalar = {
    id?: boolean
    practiceId?: boolean
    tier?: boolean
    startDate?: boolean
    endDate?: boolean
    amount?: boolean
    paymentId?: boolean
    createdAt?: boolean
  }

  export type SubscriptionHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "practiceId" | "tier" | "startDate" | "endDate" | "amount" | "paymentId" | "createdAt", ExtArgs["result"]["subscriptionHistory"]>
  export type SubscriptionHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }
  export type SubscriptionHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }
  export type SubscriptionHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
  }

  export type $SubscriptionHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubscriptionHistory"
    objects: {
      practice: Prisma.$PracticePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      practiceId: string
      tier: $Enums.SubscriptionTier
      startDate: Date
      endDate: Date | null
      amount: number | null
      paymentId: string | null
      createdAt: Date
    }, ExtArgs["result"]["subscriptionHistory"]>
    composites: {}
  }

  type SubscriptionHistoryGetPayload<S extends boolean | null | undefined | SubscriptionHistoryDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionHistoryPayload, S>

  type SubscriptionHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionHistoryCountAggregateInputType | true
    }

  export interface SubscriptionHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubscriptionHistory'], meta: { name: 'SubscriptionHistory' } }
    /**
     * Find zero or one SubscriptionHistory that matches the filter.
     * @param {SubscriptionHistoryFindUniqueArgs} args - Arguments to find a SubscriptionHistory
     * @example
     * // Get one SubscriptionHistory
     * const subscriptionHistory = await prisma.subscriptionHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionHistoryFindUniqueArgs>(args: SelectSubset<T, SubscriptionHistoryFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionHistoryClient<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubscriptionHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionHistoryFindUniqueOrThrowArgs} args - Arguments to find a SubscriptionHistory
     * @example
     * // Get one SubscriptionHistory
     * const subscriptionHistory = await prisma.subscriptionHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionHistoryClient<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionHistoryFindFirstArgs} args - Arguments to find a SubscriptionHistory
     * @example
     * // Get one SubscriptionHistory
     * const subscriptionHistory = await prisma.subscriptionHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionHistoryFindFirstArgs>(args?: SelectSubset<T, SubscriptionHistoryFindFirstArgs<ExtArgs>>): Prisma__SubscriptionHistoryClient<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionHistoryFindFirstOrThrowArgs} args - Arguments to find a SubscriptionHistory
     * @example
     * // Get one SubscriptionHistory
     * const subscriptionHistory = await prisma.subscriptionHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionHistoryClient<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubscriptionHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubscriptionHistories
     * const subscriptionHistories = await prisma.subscriptionHistory.findMany()
     * 
     * // Get first 10 SubscriptionHistories
     * const subscriptionHistories = await prisma.subscriptionHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionHistoryWithIdOnly = await prisma.subscriptionHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionHistoryFindManyArgs>(args?: SelectSubset<T, SubscriptionHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubscriptionHistory.
     * @param {SubscriptionHistoryCreateArgs} args - Arguments to create a SubscriptionHistory.
     * @example
     * // Create one SubscriptionHistory
     * const SubscriptionHistory = await prisma.subscriptionHistory.create({
     *   data: {
     *     // ... data to create a SubscriptionHistory
     *   }
     * })
     * 
     */
    create<T extends SubscriptionHistoryCreateArgs>(args: SelectSubset<T, SubscriptionHistoryCreateArgs<ExtArgs>>): Prisma__SubscriptionHistoryClient<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubscriptionHistories.
     * @param {SubscriptionHistoryCreateManyArgs} args - Arguments to create many SubscriptionHistories.
     * @example
     * // Create many SubscriptionHistories
     * const subscriptionHistory = await prisma.subscriptionHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionHistoryCreateManyArgs>(args?: SelectSubset<T, SubscriptionHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubscriptionHistories and returns the data saved in the database.
     * @param {SubscriptionHistoryCreateManyAndReturnArgs} args - Arguments to create many SubscriptionHistories.
     * @example
     * // Create many SubscriptionHistories
     * const subscriptionHistory = await prisma.subscriptionHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubscriptionHistories and only return the `id`
     * const subscriptionHistoryWithIdOnly = await prisma.subscriptionHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubscriptionHistory.
     * @param {SubscriptionHistoryDeleteArgs} args - Arguments to delete one SubscriptionHistory.
     * @example
     * // Delete one SubscriptionHistory
     * const SubscriptionHistory = await prisma.subscriptionHistory.delete({
     *   where: {
     *     // ... filter to delete one SubscriptionHistory
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionHistoryDeleteArgs>(args: SelectSubset<T, SubscriptionHistoryDeleteArgs<ExtArgs>>): Prisma__SubscriptionHistoryClient<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubscriptionHistory.
     * @param {SubscriptionHistoryUpdateArgs} args - Arguments to update one SubscriptionHistory.
     * @example
     * // Update one SubscriptionHistory
     * const subscriptionHistory = await prisma.subscriptionHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionHistoryUpdateArgs>(args: SelectSubset<T, SubscriptionHistoryUpdateArgs<ExtArgs>>): Prisma__SubscriptionHistoryClient<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubscriptionHistories.
     * @param {SubscriptionHistoryDeleteManyArgs} args - Arguments to filter SubscriptionHistories to delete.
     * @example
     * // Delete a few SubscriptionHistories
     * const { count } = await prisma.subscriptionHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionHistoryDeleteManyArgs>(args?: SelectSubset<T, SubscriptionHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubscriptionHistories
     * const subscriptionHistory = await prisma.subscriptionHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionHistoryUpdateManyArgs>(args: SelectSubset<T, SubscriptionHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionHistories and returns the data updated in the database.
     * @param {SubscriptionHistoryUpdateManyAndReturnArgs} args - Arguments to update many SubscriptionHistories.
     * @example
     * // Update many SubscriptionHistories
     * const subscriptionHistory = await prisma.subscriptionHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubscriptionHistories and only return the `id`
     * const subscriptionHistoryWithIdOnly = await prisma.subscriptionHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubscriptionHistory.
     * @param {SubscriptionHistoryUpsertArgs} args - Arguments to update or create a SubscriptionHistory.
     * @example
     * // Update or create a SubscriptionHistory
     * const subscriptionHistory = await prisma.subscriptionHistory.upsert({
     *   create: {
     *     // ... data to create a SubscriptionHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubscriptionHistory we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionHistoryUpsertArgs>(args: SelectSubset<T, SubscriptionHistoryUpsertArgs<ExtArgs>>): Prisma__SubscriptionHistoryClient<$Result.GetResult<Prisma.$SubscriptionHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubscriptionHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionHistoryCountArgs} args - Arguments to filter SubscriptionHistories to count.
     * @example
     * // Count the number of SubscriptionHistories
     * const count = await prisma.subscriptionHistory.count({
     *   where: {
     *     // ... the filter for the SubscriptionHistories we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionHistoryCountArgs>(
      args?: Subset<T, SubscriptionHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubscriptionHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionHistoryAggregateArgs>(args: Subset<T, SubscriptionHistoryAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionHistoryAggregateType<T>>

    /**
     * Group by SubscriptionHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionHistoryGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubscriptionHistory model
   */
  readonly fields: SubscriptionHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubscriptionHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practice<T extends PracticeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PracticeDefaultArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubscriptionHistory model
   */
  interface SubscriptionHistoryFieldRefs {
    readonly id: FieldRef<"SubscriptionHistory", 'String'>
    readonly practiceId: FieldRef<"SubscriptionHistory", 'String'>
    readonly tier: FieldRef<"SubscriptionHistory", 'SubscriptionTier'>
    readonly startDate: FieldRef<"SubscriptionHistory", 'DateTime'>
    readonly endDate: FieldRef<"SubscriptionHistory", 'DateTime'>
    readonly amount: FieldRef<"SubscriptionHistory", 'Float'>
    readonly paymentId: FieldRef<"SubscriptionHistory", 'String'>
    readonly createdAt: FieldRef<"SubscriptionHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubscriptionHistory findUnique
   */
  export type SubscriptionHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionHistory to fetch.
     */
    where: SubscriptionHistoryWhereUniqueInput
  }

  /**
   * SubscriptionHistory findUniqueOrThrow
   */
  export type SubscriptionHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionHistory to fetch.
     */
    where: SubscriptionHistoryWhereUniqueInput
  }

  /**
   * SubscriptionHistory findFirst
   */
  export type SubscriptionHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionHistory to fetch.
     */
    where?: SubscriptionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionHistories to fetch.
     */
    orderBy?: SubscriptionHistoryOrderByWithRelationInput | SubscriptionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionHistories.
     */
    cursor?: SubscriptionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionHistories.
     */
    distinct?: SubscriptionHistoryScalarFieldEnum | SubscriptionHistoryScalarFieldEnum[]
  }

  /**
   * SubscriptionHistory findFirstOrThrow
   */
  export type SubscriptionHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionHistory to fetch.
     */
    where?: SubscriptionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionHistories to fetch.
     */
    orderBy?: SubscriptionHistoryOrderByWithRelationInput | SubscriptionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionHistories.
     */
    cursor?: SubscriptionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionHistories.
     */
    distinct?: SubscriptionHistoryScalarFieldEnum | SubscriptionHistoryScalarFieldEnum[]
  }

  /**
   * SubscriptionHistory findMany
   */
  export type SubscriptionHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionHistories to fetch.
     */
    where?: SubscriptionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionHistories to fetch.
     */
    orderBy?: SubscriptionHistoryOrderByWithRelationInput | SubscriptionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubscriptionHistories.
     */
    cursor?: SubscriptionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionHistories.
     */
    skip?: number
    distinct?: SubscriptionHistoryScalarFieldEnum | SubscriptionHistoryScalarFieldEnum[]
  }

  /**
   * SubscriptionHistory create
   */
  export type SubscriptionHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a SubscriptionHistory.
     */
    data: XOR<SubscriptionHistoryCreateInput, SubscriptionHistoryUncheckedCreateInput>
  }

  /**
   * SubscriptionHistory createMany
   */
  export type SubscriptionHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubscriptionHistories.
     */
    data: SubscriptionHistoryCreateManyInput | SubscriptionHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionHistory createManyAndReturn
   */
  export type SubscriptionHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many SubscriptionHistories.
     */
    data: SubscriptionHistoryCreateManyInput | SubscriptionHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubscriptionHistory update
   */
  export type SubscriptionHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a SubscriptionHistory.
     */
    data: XOR<SubscriptionHistoryUpdateInput, SubscriptionHistoryUncheckedUpdateInput>
    /**
     * Choose, which SubscriptionHistory to update.
     */
    where: SubscriptionHistoryWhereUniqueInput
  }

  /**
   * SubscriptionHistory updateMany
   */
  export type SubscriptionHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubscriptionHistories.
     */
    data: XOR<SubscriptionHistoryUpdateManyMutationInput, SubscriptionHistoryUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionHistories to update
     */
    where?: SubscriptionHistoryWhereInput
    /**
     * Limit how many SubscriptionHistories to update.
     */
    limit?: number
  }

  /**
   * SubscriptionHistory updateManyAndReturn
   */
  export type SubscriptionHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * The data used to update SubscriptionHistories.
     */
    data: XOR<SubscriptionHistoryUpdateManyMutationInput, SubscriptionHistoryUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionHistories to update
     */
    where?: SubscriptionHistoryWhereInput
    /**
     * Limit how many SubscriptionHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubscriptionHistory upsert
   */
  export type SubscriptionHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the SubscriptionHistory to update in case it exists.
     */
    where: SubscriptionHistoryWhereUniqueInput
    /**
     * In case the SubscriptionHistory found by the `where` argument doesn't exist, create a new SubscriptionHistory with this data.
     */
    create: XOR<SubscriptionHistoryCreateInput, SubscriptionHistoryUncheckedCreateInput>
    /**
     * In case the SubscriptionHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionHistoryUpdateInput, SubscriptionHistoryUncheckedUpdateInput>
  }

  /**
   * SubscriptionHistory delete
   */
  export type SubscriptionHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
    /**
     * Filter which SubscriptionHistory to delete.
     */
    where: SubscriptionHistoryWhereUniqueInput
  }

  /**
   * SubscriptionHistory deleteMany
   */
  export type SubscriptionHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionHistories to delete
     */
    where?: SubscriptionHistoryWhereInput
    /**
     * Limit how many SubscriptionHistories to delete.
     */
    limit?: number
  }

  /**
   * SubscriptionHistory without action
   */
  export type SubscriptionHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionHistory
     */
    select?: SubscriptionHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionHistory
     */
    omit?: SubscriptionHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    age: number | null
    weight: number | null
  }

  export type PatientSumAggregateOutputType = {
    age: number | null
    weight: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    name: string | null
    species: string | null
    breed: string | null
    age: number | null
    weight: number | null
    sex: $Enums.Sex | null
    practiceId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    ownerId: string | null
    ownerName: string | null
    ownerEmail: string | null
    ownerPhone: string | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    name: string | null
    species: string | null
    breed: string | null
    age: number | null
    weight: number | null
    sex: $Enums.Sex | null
    practiceId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    ownerId: string | null
    ownerName: string | null
    ownerEmail: string | null
    ownerPhone: string | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    name: number
    species: number
    breed: number
    age: number
    weight: number
    sex: number
    practiceId: number
    createdById: number
    createdAt: number
    updatedAt: number
    isActive: number
    ownerId: number
    ownerName: number
    ownerEmail: number
    ownerPhone: number
    medicalHistory: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    age?: true
    weight?: true
  }

  export type PatientSumAggregateInputType = {
    age?: true
    weight?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    name?: true
    species?: true
    breed?: true
    age?: true
    weight?: true
    sex?: true
    practiceId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    ownerId?: true
    ownerName?: true
    ownerEmail?: true
    ownerPhone?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    name?: true
    species?: true
    breed?: true
    age?: true
    weight?: true
    sex?: true
    practiceId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    ownerId?: true
    ownerName?: true
    ownerEmail?: true
    ownerPhone?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    name?: true
    species?: true
    breed?: true
    age?: true
    weight?: true
    sex?: true
    practiceId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    ownerId?: true
    ownerName?: true
    ownerEmail?: true
    ownerPhone?: true
    medicalHistory?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    name: string
    species: string
    breed: string | null
    age: number | null
    weight: number | null
    sex: $Enums.Sex | null
    practiceId: string
    createdById: string
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    ownerId: string | null
    ownerName: string | null
    ownerEmail: string | null
    ownerPhone: string | null
    medicalHistory: JsonValue | null
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    species?: boolean
    breed?: boolean
    age?: boolean
    weight?: boolean
    sex?: boolean
    practiceId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    ownerId?: boolean
    ownerName?: boolean
    ownerEmail?: boolean
    ownerPhone?: boolean
    medicalHistory?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    studies?: boolean | Patient$studiesArgs<ExtArgs>
    observations?: boolean | Patient$observationsArgs<ExtArgs>
    treatments?: boolean | Patient$treatmentsArgs<ExtArgs>
    files?: boolean | Patient$filesArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    species?: boolean
    breed?: boolean
    age?: boolean
    weight?: boolean
    sex?: boolean
    practiceId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    ownerId?: boolean
    ownerName?: boolean
    ownerEmail?: boolean
    ownerPhone?: boolean
    medicalHistory?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    species?: boolean
    breed?: boolean
    age?: boolean
    weight?: boolean
    sex?: boolean
    practiceId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    ownerId?: boolean
    ownerName?: boolean
    ownerEmail?: boolean
    ownerPhone?: boolean
    medicalHistory?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    name?: boolean
    species?: boolean
    breed?: boolean
    age?: boolean
    weight?: boolean
    sex?: boolean
    practiceId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    ownerId?: boolean
    ownerName?: boolean
    ownerEmail?: boolean
    ownerPhone?: boolean
    medicalHistory?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "species" | "breed" | "age" | "weight" | "sex" | "practiceId" | "createdById" | "createdAt" | "updatedAt" | "isActive" | "ownerId" | "ownerName" | "ownerEmail" | "ownerPhone" | "medicalHistory", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    studies?: boolean | Patient$studiesArgs<ExtArgs>
    observations?: boolean | Patient$observationsArgs<ExtArgs>
    treatments?: boolean | Patient$treatmentsArgs<ExtArgs>
    files?: boolean | Patient$filesArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      practice: Prisma.$PracticePayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      studies: Prisma.$StudyPatientPayload<ExtArgs>[]
      observations: Prisma.$ObservationPayload<ExtArgs>[]
      treatments: Prisma.$TreatmentPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      species: string
      breed: string | null
      age: number | null
      weight: number | null
      sex: $Enums.Sex | null
      practiceId: string
      createdById: string
      createdAt: Date
      updatedAt: Date
      isActive: boolean
      ownerId: string | null
      ownerName: string | null
      ownerEmail: string | null
      ownerPhone: string | null
      medicalHistory: Prisma.JsonValue | null
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients and returns the data updated in the database.
     * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practice<T extends PracticeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PracticeDefaultArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studies<T extends Patient$studiesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$studiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    observations<T extends Patient$observationsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$observationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    treatments<T extends Patient$treatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$treatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends Patient$filesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly name: FieldRef<"Patient", 'String'>
    readonly species: FieldRef<"Patient", 'String'>
    readonly breed: FieldRef<"Patient", 'String'>
    readonly age: FieldRef<"Patient", 'Int'>
    readonly weight: FieldRef<"Patient", 'Float'>
    readonly sex: FieldRef<"Patient", 'Sex'>
    readonly practiceId: FieldRef<"Patient", 'String'>
    readonly createdById: FieldRef<"Patient", 'String'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
    readonly isActive: FieldRef<"Patient", 'Boolean'>
    readonly ownerId: FieldRef<"Patient", 'String'>
    readonly ownerName: FieldRef<"Patient", 'String'>
    readonly ownerEmail: FieldRef<"Patient", 'String'>
    readonly ownerPhone: FieldRef<"Patient", 'String'>
    readonly medicalHistory: FieldRef<"Patient", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient updateManyAndReturn
   */
  export type PatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.studies
   */
  export type Patient$studiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    where?: StudyPatientWhereInput
    orderBy?: StudyPatientOrderByWithRelationInput | StudyPatientOrderByWithRelationInput[]
    cursor?: StudyPatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyPatientScalarFieldEnum | StudyPatientScalarFieldEnum[]
  }

  /**
   * Patient.observations
   */
  export type Patient$observationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    cursor?: ObservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * Patient.treatments
   */
  export type Patient$treatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    cursor?: TreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Patient.files
   */
  export type Patient$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Study
   */

  export type AggregateStudy = {
    _count: StudyCountAggregateOutputType | null
    _min: StudyMinAggregateOutputType | null
    _max: StudyMaxAggregateOutputType | null
  }

  export type StudyMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    practiceId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.StudyStatus | null
    isTemplate: boolean | null
  }

  export type StudyMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    practiceId: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.StudyStatus | null
    isTemplate: boolean | null
  }

  export type StudyCountAggregateOutputType = {
    id: number
    title: number
    description: number
    protocol: number
    practiceId: number
    createdById: number
    createdAt: number
    updatedAt: number
    startDate: number
    endDate: number
    status: number
    isTemplate: number
    _all: number
  }


  export type StudyMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    practiceId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    startDate?: true
    endDate?: true
    status?: true
    isTemplate?: true
  }

  export type StudyMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    practiceId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    startDate?: true
    endDate?: true
    status?: true
    isTemplate?: true
  }

  export type StudyCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    protocol?: true
    practiceId?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    startDate?: true
    endDate?: true
    status?: true
    isTemplate?: true
    _all?: true
  }

  export type StudyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Study to aggregate.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Studies
    **/
    _count?: true | StudyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyMaxAggregateInputType
  }

  export type GetStudyAggregateType<T extends StudyAggregateArgs> = {
        [P in keyof T & keyof AggregateStudy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudy[P]>
      : GetScalarType<T[P], AggregateStudy[P]>
  }




  export type StudyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyWhereInput
    orderBy?: StudyOrderByWithAggregationInput | StudyOrderByWithAggregationInput[]
    by: StudyScalarFieldEnum[] | StudyScalarFieldEnum
    having?: StudyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyCountAggregateInputType | true
    _min?: StudyMinAggregateInputType
    _max?: StudyMaxAggregateInputType
  }

  export type StudyGroupByOutputType = {
    id: string
    title: string
    description: string | null
    protocol: JsonValue | null
    practiceId: string
    createdById: string
    createdAt: Date
    updatedAt: Date
    startDate: Date | null
    endDate: Date | null
    status: $Enums.StudyStatus
    isTemplate: boolean
    _count: StudyCountAggregateOutputType | null
    _min: StudyMinAggregateOutputType | null
    _max: StudyMaxAggregateOutputType | null
  }

  type GetStudyGroupByPayload<T extends StudyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyGroupByOutputType[P]>
            : GetScalarType<T[P], StudyGroupByOutputType[P]>
        }
      >
    >


  export type StudySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    protocol?: boolean
    practiceId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    isTemplate?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    patients?: boolean | Study$patientsArgs<ExtArgs>
    assignedUsers?: boolean | Study$assignedUsersArgs<ExtArgs>
    symptomTemplates?: boolean | Study$symptomTemplatesArgs<ExtArgs>
    treatmentTemplates?: boolean | Study$treatmentTemplatesArgs<ExtArgs>
    notes?: boolean | Study$notesArgs<ExtArgs>
    _count?: boolean | StudyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["study"]>

  export type StudySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    protocol?: boolean
    practiceId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    isTemplate?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["study"]>

  export type StudySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    protocol?: boolean
    practiceId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    isTemplate?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["study"]>

  export type StudySelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    protocol?: boolean
    practiceId?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    isTemplate?: boolean
  }

  export type StudyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "protocol" | "practiceId" | "createdById" | "createdAt" | "updatedAt" | "startDate" | "endDate" | "status" | "isTemplate", ExtArgs["result"]["study"]>
  export type StudyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    patients?: boolean | Study$patientsArgs<ExtArgs>
    assignedUsers?: boolean | Study$assignedUsersArgs<ExtArgs>
    symptomTemplates?: boolean | Study$symptomTemplatesArgs<ExtArgs>
    treatmentTemplates?: boolean | Study$treatmentTemplatesArgs<ExtArgs>
    notes?: boolean | Study$notesArgs<ExtArgs>
    _count?: boolean | StudyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Study"
    objects: {
      practice: Prisma.$PracticePayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      patients: Prisma.$StudyPatientPayload<ExtArgs>[]
      assignedUsers: Prisma.$StudyAssignmentPayload<ExtArgs>[]
      symptomTemplates: Prisma.$SymptomTemplatePayload<ExtArgs>[]
      treatmentTemplates: Prisma.$TreatmentTemplatePayload<ExtArgs>[]
      notes: Prisma.$StudyNotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      protocol: Prisma.JsonValue | null
      practiceId: string
      createdById: string
      createdAt: Date
      updatedAt: Date
      startDate: Date | null
      endDate: Date | null
      status: $Enums.StudyStatus
      isTemplate: boolean
    }, ExtArgs["result"]["study"]>
    composites: {}
  }

  type StudyGetPayload<S extends boolean | null | undefined | StudyDefaultArgs> = $Result.GetResult<Prisma.$StudyPayload, S>

  type StudyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyCountAggregateInputType | true
    }

  export interface StudyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Study'], meta: { name: 'Study' } }
    /**
     * Find zero or one Study that matches the filter.
     * @param {StudyFindUniqueArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudyFindUniqueArgs>(args: SelectSubset<T, StudyFindUniqueArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Study that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudyFindUniqueOrThrowArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudyFindUniqueOrThrowArgs>(args: SelectSubset<T, StudyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Study that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindFirstArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudyFindFirstArgs>(args?: SelectSubset<T, StudyFindFirstArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Study that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindFirstOrThrowArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudyFindFirstOrThrowArgs>(args?: SelectSubset<T, StudyFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Studies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Studies
     * const studies = await prisma.study.findMany()
     * 
     * // Get first 10 Studies
     * const studies = await prisma.study.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyWithIdOnly = await prisma.study.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudyFindManyArgs>(args?: SelectSubset<T, StudyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Study.
     * @param {StudyCreateArgs} args - Arguments to create a Study.
     * @example
     * // Create one Study
     * const Study = await prisma.study.create({
     *   data: {
     *     // ... data to create a Study
     *   }
     * })
     * 
     */
    create<T extends StudyCreateArgs>(args: SelectSubset<T, StudyCreateArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Studies.
     * @param {StudyCreateManyArgs} args - Arguments to create many Studies.
     * @example
     * // Create many Studies
     * const study = await prisma.study.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudyCreateManyArgs>(args?: SelectSubset<T, StudyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Studies and returns the data saved in the database.
     * @param {StudyCreateManyAndReturnArgs} args - Arguments to create many Studies.
     * @example
     * // Create many Studies
     * const study = await prisma.study.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Studies and only return the `id`
     * const studyWithIdOnly = await prisma.study.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudyCreateManyAndReturnArgs>(args?: SelectSubset<T, StudyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Study.
     * @param {StudyDeleteArgs} args - Arguments to delete one Study.
     * @example
     * // Delete one Study
     * const Study = await prisma.study.delete({
     *   where: {
     *     // ... filter to delete one Study
     *   }
     * })
     * 
     */
    delete<T extends StudyDeleteArgs>(args: SelectSubset<T, StudyDeleteArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Study.
     * @param {StudyUpdateArgs} args - Arguments to update one Study.
     * @example
     * // Update one Study
     * const study = await prisma.study.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudyUpdateArgs>(args: SelectSubset<T, StudyUpdateArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Studies.
     * @param {StudyDeleteManyArgs} args - Arguments to filter Studies to delete.
     * @example
     * // Delete a few Studies
     * const { count } = await prisma.study.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudyDeleteManyArgs>(args?: SelectSubset<T, StudyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Studies
     * const study = await prisma.study.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudyUpdateManyArgs>(args: SelectSubset<T, StudyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studies and returns the data updated in the database.
     * @param {StudyUpdateManyAndReturnArgs} args - Arguments to update many Studies.
     * @example
     * // Update many Studies
     * const study = await prisma.study.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Studies and only return the `id`
     * const studyWithIdOnly = await prisma.study.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudyUpdateManyAndReturnArgs>(args: SelectSubset<T, StudyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Study.
     * @param {StudyUpsertArgs} args - Arguments to update or create a Study.
     * @example
     * // Update or create a Study
     * const study = await prisma.study.upsert({
     *   create: {
     *     // ... data to create a Study
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Study we want to update
     *   }
     * })
     */
    upsert<T extends StudyUpsertArgs>(args: SelectSubset<T, StudyUpsertArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Studies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyCountArgs} args - Arguments to filter Studies to count.
     * @example
     * // Count the number of Studies
     * const count = await prisma.study.count({
     *   where: {
     *     // ... the filter for the Studies we want to count
     *   }
     * })
    **/
    count<T extends StudyCountArgs>(
      args?: Subset<T, StudyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Study.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyAggregateArgs>(args: Subset<T, StudyAggregateArgs>): Prisma.PrismaPromise<GetStudyAggregateType<T>>

    /**
     * Group by Study.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyGroupByArgs['orderBy'] }
        : { orderBy?: StudyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Study model
   */
  readonly fields: StudyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Study.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practice<T extends PracticeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PracticeDefaultArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patients<T extends Study$patientsArgs<ExtArgs> = {}>(args?: Subset<T, Study$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedUsers<T extends Study$assignedUsersArgs<ExtArgs> = {}>(args?: Subset<T, Study$assignedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    symptomTemplates<T extends Study$symptomTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Study$symptomTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    treatmentTemplates<T extends Study$treatmentTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Study$treatmentTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notes<T extends Study$notesArgs<ExtArgs> = {}>(args?: Subset<T, Study$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Study model
   */
  interface StudyFieldRefs {
    readonly id: FieldRef<"Study", 'String'>
    readonly title: FieldRef<"Study", 'String'>
    readonly description: FieldRef<"Study", 'String'>
    readonly protocol: FieldRef<"Study", 'Json'>
    readonly practiceId: FieldRef<"Study", 'String'>
    readonly createdById: FieldRef<"Study", 'String'>
    readonly createdAt: FieldRef<"Study", 'DateTime'>
    readonly updatedAt: FieldRef<"Study", 'DateTime'>
    readonly startDate: FieldRef<"Study", 'DateTime'>
    readonly endDate: FieldRef<"Study", 'DateTime'>
    readonly status: FieldRef<"Study", 'StudyStatus'>
    readonly isTemplate: FieldRef<"Study", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Study findUnique
   */
  export type StudyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where: StudyWhereUniqueInput
  }

  /**
   * Study findUniqueOrThrow
   */
  export type StudyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where: StudyWhereUniqueInput
  }

  /**
   * Study findFirst
   */
  export type StudyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Studies.
     */
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }

  /**
   * Study findFirstOrThrow
   */
  export type StudyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Studies.
     */
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }

  /**
   * Study findMany
   */
  export type StudyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Studies to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }

  /**
   * Study create
   */
  export type StudyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The data needed to create a Study.
     */
    data: XOR<StudyCreateInput, StudyUncheckedCreateInput>
  }

  /**
   * Study createMany
   */
  export type StudyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Studies.
     */
    data: StudyCreateManyInput | StudyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Study createManyAndReturn
   */
  export type StudyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * The data used to create many Studies.
     */
    data: StudyCreateManyInput | StudyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Study update
   */
  export type StudyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The data needed to update a Study.
     */
    data: XOR<StudyUpdateInput, StudyUncheckedUpdateInput>
    /**
     * Choose, which Study to update.
     */
    where: StudyWhereUniqueInput
  }

  /**
   * Study updateMany
   */
  export type StudyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Studies.
     */
    data: XOR<StudyUpdateManyMutationInput, StudyUncheckedUpdateManyInput>
    /**
     * Filter which Studies to update
     */
    where?: StudyWhereInput
    /**
     * Limit how many Studies to update.
     */
    limit?: number
  }

  /**
   * Study updateManyAndReturn
   */
  export type StudyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * The data used to update Studies.
     */
    data: XOR<StudyUpdateManyMutationInput, StudyUncheckedUpdateManyInput>
    /**
     * Filter which Studies to update
     */
    where?: StudyWhereInput
    /**
     * Limit how many Studies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Study upsert
   */
  export type StudyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The filter to search for the Study to update in case it exists.
     */
    where: StudyWhereUniqueInput
    /**
     * In case the Study found by the `where` argument doesn't exist, create a new Study with this data.
     */
    create: XOR<StudyCreateInput, StudyUncheckedCreateInput>
    /**
     * In case the Study was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyUpdateInput, StudyUncheckedUpdateInput>
  }

  /**
   * Study delete
   */
  export type StudyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter which Study to delete.
     */
    where: StudyWhereUniqueInput
  }

  /**
   * Study deleteMany
   */
  export type StudyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Studies to delete
     */
    where?: StudyWhereInput
    /**
     * Limit how many Studies to delete.
     */
    limit?: number
  }

  /**
   * Study.patients
   */
  export type Study$patientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    where?: StudyPatientWhereInput
    orderBy?: StudyPatientOrderByWithRelationInput | StudyPatientOrderByWithRelationInput[]
    cursor?: StudyPatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyPatientScalarFieldEnum | StudyPatientScalarFieldEnum[]
  }

  /**
   * Study.assignedUsers
   */
  export type Study$assignedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    where?: StudyAssignmentWhereInput
    orderBy?: StudyAssignmentOrderByWithRelationInput | StudyAssignmentOrderByWithRelationInput[]
    cursor?: StudyAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyAssignmentScalarFieldEnum | StudyAssignmentScalarFieldEnum[]
  }

  /**
   * Study.symptomTemplates
   */
  export type Study$symptomTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    where?: SymptomTemplateWhereInput
    orderBy?: SymptomTemplateOrderByWithRelationInput | SymptomTemplateOrderByWithRelationInput[]
    cursor?: SymptomTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SymptomTemplateScalarFieldEnum | SymptomTemplateScalarFieldEnum[]
  }

  /**
   * Study.treatmentTemplates
   */
  export type Study$treatmentTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    where?: TreatmentTemplateWhereInput
    orderBy?: TreatmentTemplateOrderByWithRelationInput | TreatmentTemplateOrderByWithRelationInput[]
    cursor?: TreatmentTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentTemplateScalarFieldEnum | TreatmentTemplateScalarFieldEnum[]
  }

  /**
   * Study.notes
   */
  export type Study$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    where?: StudyNoteWhereInput
    orderBy?: StudyNoteOrderByWithRelationInput | StudyNoteOrderByWithRelationInput[]
    cursor?: StudyNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyNoteScalarFieldEnum | StudyNoteScalarFieldEnum[]
  }

  /**
   * Study without action
   */
  export type StudyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Study
     */
    omit?: StudyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
  }


  /**
   * Model StudyPatient
   */

  export type AggregateStudyPatient = {
    _count: StudyPatientCountAggregateOutputType | null
    _min: StudyPatientMinAggregateOutputType | null
    _max: StudyPatientMaxAggregateOutputType | null
  }

  export type StudyPatientMinAggregateOutputType = {
    id: string | null
    studyId: string | null
    patientId: string | null
    enrollmentDate: Date | null
    exitDate: Date | null
    isActive: boolean | null
  }

  export type StudyPatientMaxAggregateOutputType = {
    id: string | null
    studyId: string | null
    patientId: string | null
    enrollmentDate: Date | null
    exitDate: Date | null
    isActive: boolean | null
  }

  export type StudyPatientCountAggregateOutputType = {
    id: number
    studyId: number
    patientId: number
    enrollmentDate: number
    exitDate: number
    isActive: number
    _all: number
  }


  export type StudyPatientMinAggregateInputType = {
    id?: true
    studyId?: true
    patientId?: true
    enrollmentDate?: true
    exitDate?: true
    isActive?: true
  }

  export type StudyPatientMaxAggregateInputType = {
    id?: true
    studyId?: true
    patientId?: true
    enrollmentDate?: true
    exitDate?: true
    isActive?: true
  }

  export type StudyPatientCountAggregateInputType = {
    id?: true
    studyId?: true
    patientId?: true
    enrollmentDate?: true
    exitDate?: true
    isActive?: true
    _all?: true
  }

  export type StudyPatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyPatient to aggregate.
     */
    where?: StudyPatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyPatients to fetch.
     */
    orderBy?: StudyPatientOrderByWithRelationInput | StudyPatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyPatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyPatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyPatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudyPatients
    **/
    _count?: true | StudyPatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyPatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyPatientMaxAggregateInputType
  }

  export type GetStudyPatientAggregateType<T extends StudyPatientAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyPatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyPatient[P]>
      : GetScalarType<T[P], AggregateStudyPatient[P]>
  }




  export type StudyPatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyPatientWhereInput
    orderBy?: StudyPatientOrderByWithAggregationInput | StudyPatientOrderByWithAggregationInput[]
    by: StudyPatientScalarFieldEnum[] | StudyPatientScalarFieldEnum
    having?: StudyPatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyPatientCountAggregateInputType | true
    _min?: StudyPatientMinAggregateInputType
    _max?: StudyPatientMaxAggregateInputType
  }

  export type StudyPatientGroupByOutputType = {
    id: string
    studyId: string
    patientId: string
    enrollmentDate: Date
    exitDate: Date | null
    isActive: boolean
    _count: StudyPatientCountAggregateOutputType | null
    _min: StudyPatientMinAggregateOutputType | null
    _max: StudyPatientMaxAggregateOutputType | null
  }

  type GetStudyPatientGroupByPayload<T extends StudyPatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyPatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyPatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyPatientGroupByOutputType[P]>
            : GetScalarType<T[P], StudyPatientGroupByOutputType[P]>
        }
      >
    >


  export type StudyPatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    patientId?: boolean
    enrollmentDate?: boolean
    exitDate?: boolean
    isActive?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    observations?: boolean | StudyPatient$observationsArgs<ExtArgs>
    treatments?: boolean | StudyPatient$treatmentsArgs<ExtArgs>
    _count?: boolean | StudyPatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyPatient"]>

  export type StudyPatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    patientId?: boolean
    enrollmentDate?: boolean
    exitDate?: boolean
    isActive?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyPatient"]>

  export type StudyPatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    patientId?: boolean
    enrollmentDate?: boolean
    exitDate?: boolean
    isActive?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyPatient"]>

  export type StudyPatientSelectScalar = {
    id?: boolean
    studyId?: boolean
    patientId?: boolean
    enrollmentDate?: boolean
    exitDate?: boolean
    isActive?: boolean
  }

  export type StudyPatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studyId" | "patientId" | "enrollmentDate" | "exitDate" | "isActive", ExtArgs["result"]["studyPatient"]>
  export type StudyPatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    observations?: boolean | StudyPatient$observationsArgs<ExtArgs>
    treatments?: boolean | StudyPatient$treatmentsArgs<ExtArgs>
    _count?: boolean | StudyPatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudyPatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type StudyPatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $StudyPatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudyPatient"
    objects: {
      study: Prisma.$StudyPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      observations: Prisma.$ObservationPayload<ExtArgs>[]
      treatments: Prisma.$TreatmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studyId: string
      patientId: string
      enrollmentDate: Date
      exitDate: Date | null
      isActive: boolean
    }, ExtArgs["result"]["studyPatient"]>
    composites: {}
  }

  type StudyPatientGetPayload<S extends boolean | null | undefined | StudyPatientDefaultArgs> = $Result.GetResult<Prisma.$StudyPatientPayload, S>

  type StudyPatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudyPatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyPatientCountAggregateInputType | true
    }

  export interface StudyPatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudyPatient'], meta: { name: 'StudyPatient' } }
    /**
     * Find zero or one StudyPatient that matches the filter.
     * @param {StudyPatientFindUniqueArgs} args - Arguments to find a StudyPatient
     * @example
     * // Get one StudyPatient
     * const studyPatient = await prisma.studyPatient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudyPatientFindUniqueArgs>(args: SelectSubset<T, StudyPatientFindUniqueArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudyPatient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudyPatientFindUniqueOrThrowArgs} args - Arguments to find a StudyPatient
     * @example
     * // Get one StudyPatient
     * const studyPatient = await prisma.studyPatient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudyPatientFindUniqueOrThrowArgs>(args: SelectSubset<T, StudyPatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyPatient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyPatientFindFirstArgs} args - Arguments to find a StudyPatient
     * @example
     * // Get one StudyPatient
     * const studyPatient = await prisma.studyPatient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudyPatientFindFirstArgs>(args?: SelectSubset<T, StudyPatientFindFirstArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyPatient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyPatientFindFirstOrThrowArgs} args - Arguments to find a StudyPatient
     * @example
     * // Get one StudyPatient
     * const studyPatient = await prisma.studyPatient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudyPatientFindFirstOrThrowArgs>(args?: SelectSubset<T, StudyPatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudyPatients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyPatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudyPatients
     * const studyPatients = await prisma.studyPatient.findMany()
     * 
     * // Get first 10 StudyPatients
     * const studyPatients = await prisma.studyPatient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyPatientWithIdOnly = await prisma.studyPatient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudyPatientFindManyArgs>(args?: SelectSubset<T, StudyPatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudyPatient.
     * @param {StudyPatientCreateArgs} args - Arguments to create a StudyPatient.
     * @example
     * // Create one StudyPatient
     * const StudyPatient = await prisma.studyPatient.create({
     *   data: {
     *     // ... data to create a StudyPatient
     *   }
     * })
     * 
     */
    create<T extends StudyPatientCreateArgs>(args: SelectSubset<T, StudyPatientCreateArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudyPatients.
     * @param {StudyPatientCreateManyArgs} args - Arguments to create many StudyPatients.
     * @example
     * // Create many StudyPatients
     * const studyPatient = await prisma.studyPatient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudyPatientCreateManyArgs>(args?: SelectSubset<T, StudyPatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudyPatients and returns the data saved in the database.
     * @param {StudyPatientCreateManyAndReturnArgs} args - Arguments to create many StudyPatients.
     * @example
     * // Create many StudyPatients
     * const studyPatient = await prisma.studyPatient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudyPatients and only return the `id`
     * const studyPatientWithIdOnly = await prisma.studyPatient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudyPatientCreateManyAndReturnArgs>(args?: SelectSubset<T, StudyPatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudyPatient.
     * @param {StudyPatientDeleteArgs} args - Arguments to delete one StudyPatient.
     * @example
     * // Delete one StudyPatient
     * const StudyPatient = await prisma.studyPatient.delete({
     *   where: {
     *     // ... filter to delete one StudyPatient
     *   }
     * })
     * 
     */
    delete<T extends StudyPatientDeleteArgs>(args: SelectSubset<T, StudyPatientDeleteArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudyPatient.
     * @param {StudyPatientUpdateArgs} args - Arguments to update one StudyPatient.
     * @example
     * // Update one StudyPatient
     * const studyPatient = await prisma.studyPatient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudyPatientUpdateArgs>(args: SelectSubset<T, StudyPatientUpdateArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudyPatients.
     * @param {StudyPatientDeleteManyArgs} args - Arguments to filter StudyPatients to delete.
     * @example
     * // Delete a few StudyPatients
     * const { count } = await prisma.studyPatient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudyPatientDeleteManyArgs>(args?: SelectSubset<T, StudyPatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyPatients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyPatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudyPatients
     * const studyPatient = await prisma.studyPatient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudyPatientUpdateManyArgs>(args: SelectSubset<T, StudyPatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyPatients and returns the data updated in the database.
     * @param {StudyPatientUpdateManyAndReturnArgs} args - Arguments to update many StudyPatients.
     * @example
     * // Update many StudyPatients
     * const studyPatient = await prisma.studyPatient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudyPatients and only return the `id`
     * const studyPatientWithIdOnly = await prisma.studyPatient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudyPatientUpdateManyAndReturnArgs>(args: SelectSubset<T, StudyPatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudyPatient.
     * @param {StudyPatientUpsertArgs} args - Arguments to update or create a StudyPatient.
     * @example
     * // Update or create a StudyPatient
     * const studyPatient = await prisma.studyPatient.upsert({
     *   create: {
     *     // ... data to create a StudyPatient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudyPatient we want to update
     *   }
     * })
     */
    upsert<T extends StudyPatientUpsertArgs>(args: SelectSubset<T, StudyPatientUpsertArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudyPatients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyPatientCountArgs} args - Arguments to filter StudyPatients to count.
     * @example
     * // Count the number of StudyPatients
     * const count = await prisma.studyPatient.count({
     *   where: {
     *     // ... the filter for the StudyPatients we want to count
     *   }
     * })
    **/
    count<T extends StudyPatientCountArgs>(
      args?: Subset<T, StudyPatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyPatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudyPatient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyPatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyPatientAggregateArgs>(args: Subset<T, StudyPatientAggregateArgs>): Prisma.PrismaPromise<GetStudyPatientAggregateType<T>>

    /**
     * Group by StudyPatient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyPatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyPatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyPatientGroupByArgs['orderBy'] }
        : { orderBy?: StudyPatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyPatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudyPatient model
   */
  readonly fields: StudyPatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudyPatient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyPatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    study<T extends StudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyDefaultArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    observations<T extends StudyPatient$observationsArgs<ExtArgs> = {}>(args?: Subset<T, StudyPatient$observationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    treatments<T extends StudyPatient$treatmentsArgs<ExtArgs> = {}>(args?: Subset<T, StudyPatient$treatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudyPatient model
   */
  interface StudyPatientFieldRefs {
    readonly id: FieldRef<"StudyPatient", 'String'>
    readonly studyId: FieldRef<"StudyPatient", 'String'>
    readonly patientId: FieldRef<"StudyPatient", 'String'>
    readonly enrollmentDate: FieldRef<"StudyPatient", 'DateTime'>
    readonly exitDate: FieldRef<"StudyPatient", 'DateTime'>
    readonly isActive: FieldRef<"StudyPatient", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * StudyPatient findUnique
   */
  export type StudyPatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * Filter, which StudyPatient to fetch.
     */
    where: StudyPatientWhereUniqueInput
  }

  /**
   * StudyPatient findUniqueOrThrow
   */
  export type StudyPatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * Filter, which StudyPatient to fetch.
     */
    where: StudyPatientWhereUniqueInput
  }

  /**
   * StudyPatient findFirst
   */
  export type StudyPatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * Filter, which StudyPatient to fetch.
     */
    where?: StudyPatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyPatients to fetch.
     */
    orderBy?: StudyPatientOrderByWithRelationInput | StudyPatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyPatients.
     */
    cursor?: StudyPatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyPatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyPatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyPatients.
     */
    distinct?: StudyPatientScalarFieldEnum | StudyPatientScalarFieldEnum[]
  }

  /**
   * StudyPatient findFirstOrThrow
   */
  export type StudyPatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * Filter, which StudyPatient to fetch.
     */
    where?: StudyPatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyPatients to fetch.
     */
    orderBy?: StudyPatientOrderByWithRelationInput | StudyPatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyPatients.
     */
    cursor?: StudyPatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyPatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyPatients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyPatients.
     */
    distinct?: StudyPatientScalarFieldEnum | StudyPatientScalarFieldEnum[]
  }

  /**
   * StudyPatient findMany
   */
  export type StudyPatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * Filter, which StudyPatients to fetch.
     */
    where?: StudyPatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyPatients to fetch.
     */
    orderBy?: StudyPatientOrderByWithRelationInput | StudyPatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudyPatients.
     */
    cursor?: StudyPatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyPatients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyPatients.
     */
    skip?: number
    distinct?: StudyPatientScalarFieldEnum | StudyPatientScalarFieldEnum[]
  }

  /**
   * StudyPatient create
   */
  export type StudyPatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * The data needed to create a StudyPatient.
     */
    data: XOR<StudyPatientCreateInput, StudyPatientUncheckedCreateInput>
  }

  /**
   * StudyPatient createMany
   */
  export type StudyPatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudyPatients.
     */
    data: StudyPatientCreateManyInput | StudyPatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudyPatient createManyAndReturn
   */
  export type StudyPatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * The data used to create many StudyPatients.
     */
    data: StudyPatientCreateManyInput | StudyPatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyPatient update
   */
  export type StudyPatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * The data needed to update a StudyPatient.
     */
    data: XOR<StudyPatientUpdateInput, StudyPatientUncheckedUpdateInput>
    /**
     * Choose, which StudyPatient to update.
     */
    where: StudyPatientWhereUniqueInput
  }

  /**
   * StudyPatient updateMany
   */
  export type StudyPatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudyPatients.
     */
    data: XOR<StudyPatientUpdateManyMutationInput, StudyPatientUncheckedUpdateManyInput>
    /**
     * Filter which StudyPatients to update
     */
    where?: StudyPatientWhereInput
    /**
     * Limit how many StudyPatients to update.
     */
    limit?: number
  }

  /**
   * StudyPatient updateManyAndReturn
   */
  export type StudyPatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * The data used to update StudyPatients.
     */
    data: XOR<StudyPatientUpdateManyMutationInput, StudyPatientUncheckedUpdateManyInput>
    /**
     * Filter which StudyPatients to update
     */
    where?: StudyPatientWhereInput
    /**
     * Limit how many StudyPatients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyPatient upsert
   */
  export type StudyPatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * The filter to search for the StudyPatient to update in case it exists.
     */
    where: StudyPatientWhereUniqueInput
    /**
     * In case the StudyPatient found by the `where` argument doesn't exist, create a new StudyPatient with this data.
     */
    create: XOR<StudyPatientCreateInput, StudyPatientUncheckedCreateInput>
    /**
     * In case the StudyPatient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyPatientUpdateInput, StudyPatientUncheckedUpdateInput>
  }

  /**
   * StudyPatient delete
   */
  export type StudyPatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
    /**
     * Filter which StudyPatient to delete.
     */
    where: StudyPatientWhereUniqueInput
  }

  /**
   * StudyPatient deleteMany
   */
  export type StudyPatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyPatients to delete
     */
    where?: StudyPatientWhereInput
    /**
     * Limit how many StudyPatients to delete.
     */
    limit?: number
  }

  /**
   * StudyPatient.observations
   */
  export type StudyPatient$observationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    cursor?: ObservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * StudyPatient.treatments
   */
  export type StudyPatient$treatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    cursor?: TreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * StudyPatient without action
   */
  export type StudyPatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyPatient
     */
    select?: StudyPatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyPatient
     */
    omit?: StudyPatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyPatientInclude<ExtArgs> | null
  }


  /**
   * Model StudyAssignment
   */

  export type AggregateStudyAssignment = {
    _count: StudyAssignmentCountAggregateOutputType | null
    _min: StudyAssignmentMinAggregateOutputType | null
    _max: StudyAssignmentMaxAggregateOutputType | null
  }

  export type StudyAssignmentMinAggregateOutputType = {
    id: string | null
    studyId: string | null
    userId: string | null
    assignedAt: Date | null
    role: $Enums.StudyRole | null
  }

  export type StudyAssignmentMaxAggregateOutputType = {
    id: string | null
    studyId: string | null
    userId: string | null
    assignedAt: Date | null
    role: $Enums.StudyRole | null
  }

  export type StudyAssignmentCountAggregateOutputType = {
    id: number
    studyId: number
    userId: number
    assignedAt: number
    role: number
    _all: number
  }


  export type StudyAssignmentMinAggregateInputType = {
    id?: true
    studyId?: true
    userId?: true
    assignedAt?: true
    role?: true
  }

  export type StudyAssignmentMaxAggregateInputType = {
    id?: true
    studyId?: true
    userId?: true
    assignedAt?: true
    role?: true
  }

  export type StudyAssignmentCountAggregateInputType = {
    id?: true
    studyId?: true
    userId?: true
    assignedAt?: true
    role?: true
    _all?: true
  }

  export type StudyAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyAssignment to aggregate.
     */
    where?: StudyAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyAssignments to fetch.
     */
    orderBy?: StudyAssignmentOrderByWithRelationInput | StudyAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudyAssignments
    **/
    _count?: true | StudyAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyAssignmentMaxAggregateInputType
  }

  export type GetStudyAssignmentAggregateType<T extends StudyAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyAssignment[P]>
      : GetScalarType<T[P], AggregateStudyAssignment[P]>
  }




  export type StudyAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyAssignmentWhereInput
    orderBy?: StudyAssignmentOrderByWithAggregationInput | StudyAssignmentOrderByWithAggregationInput[]
    by: StudyAssignmentScalarFieldEnum[] | StudyAssignmentScalarFieldEnum
    having?: StudyAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyAssignmentCountAggregateInputType | true
    _min?: StudyAssignmentMinAggregateInputType
    _max?: StudyAssignmentMaxAggregateInputType
  }

  export type StudyAssignmentGroupByOutputType = {
    id: string
    studyId: string
    userId: string
    assignedAt: Date
    role: $Enums.StudyRole
    _count: StudyAssignmentCountAggregateOutputType | null
    _min: StudyAssignmentMinAggregateOutputType | null
    _max: StudyAssignmentMaxAggregateOutputType | null
  }

  type GetStudyAssignmentGroupByPayload<T extends StudyAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], StudyAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type StudyAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    userId?: boolean
    assignedAt?: boolean
    role?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyAssignment"]>

  export type StudyAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    userId?: boolean
    assignedAt?: boolean
    role?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyAssignment"]>

  export type StudyAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    userId?: boolean
    assignedAt?: boolean
    role?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyAssignment"]>

  export type StudyAssignmentSelectScalar = {
    id?: boolean
    studyId?: boolean
    userId?: boolean
    assignedAt?: boolean
    role?: boolean
  }

  export type StudyAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studyId" | "userId" | "assignedAt" | "role", ExtArgs["result"]["studyAssignment"]>
  export type StudyAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudyAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudyAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudyAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudyAssignment"
    objects: {
      study: Prisma.$StudyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studyId: string
      userId: string
      assignedAt: Date
      role: $Enums.StudyRole
    }, ExtArgs["result"]["studyAssignment"]>
    composites: {}
  }

  type StudyAssignmentGetPayload<S extends boolean | null | undefined | StudyAssignmentDefaultArgs> = $Result.GetResult<Prisma.$StudyAssignmentPayload, S>

  type StudyAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudyAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyAssignmentCountAggregateInputType | true
    }

  export interface StudyAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudyAssignment'], meta: { name: 'StudyAssignment' } }
    /**
     * Find zero or one StudyAssignment that matches the filter.
     * @param {StudyAssignmentFindUniqueArgs} args - Arguments to find a StudyAssignment
     * @example
     * // Get one StudyAssignment
     * const studyAssignment = await prisma.studyAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudyAssignmentFindUniqueArgs>(args: SelectSubset<T, StudyAssignmentFindUniqueArgs<ExtArgs>>): Prisma__StudyAssignmentClient<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudyAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudyAssignmentFindUniqueOrThrowArgs} args - Arguments to find a StudyAssignment
     * @example
     * // Get one StudyAssignment
     * const studyAssignment = await prisma.studyAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudyAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudyAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudyAssignmentClient<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAssignmentFindFirstArgs} args - Arguments to find a StudyAssignment
     * @example
     * // Get one StudyAssignment
     * const studyAssignment = await prisma.studyAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudyAssignmentFindFirstArgs>(args?: SelectSubset<T, StudyAssignmentFindFirstArgs<ExtArgs>>): Prisma__StudyAssignmentClient<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAssignmentFindFirstOrThrowArgs} args - Arguments to find a StudyAssignment
     * @example
     * // Get one StudyAssignment
     * const studyAssignment = await prisma.studyAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudyAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudyAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudyAssignmentClient<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudyAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudyAssignments
     * const studyAssignments = await prisma.studyAssignment.findMany()
     * 
     * // Get first 10 StudyAssignments
     * const studyAssignments = await prisma.studyAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyAssignmentWithIdOnly = await prisma.studyAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudyAssignmentFindManyArgs>(args?: SelectSubset<T, StudyAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudyAssignment.
     * @param {StudyAssignmentCreateArgs} args - Arguments to create a StudyAssignment.
     * @example
     * // Create one StudyAssignment
     * const StudyAssignment = await prisma.studyAssignment.create({
     *   data: {
     *     // ... data to create a StudyAssignment
     *   }
     * })
     * 
     */
    create<T extends StudyAssignmentCreateArgs>(args: SelectSubset<T, StudyAssignmentCreateArgs<ExtArgs>>): Prisma__StudyAssignmentClient<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudyAssignments.
     * @param {StudyAssignmentCreateManyArgs} args - Arguments to create many StudyAssignments.
     * @example
     * // Create many StudyAssignments
     * const studyAssignment = await prisma.studyAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudyAssignmentCreateManyArgs>(args?: SelectSubset<T, StudyAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudyAssignments and returns the data saved in the database.
     * @param {StudyAssignmentCreateManyAndReturnArgs} args - Arguments to create many StudyAssignments.
     * @example
     * // Create many StudyAssignments
     * const studyAssignment = await prisma.studyAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudyAssignments and only return the `id`
     * const studyAssignmentWithIdOnly = await prisma.studyAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudyAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudyAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudyAssignment.
     * @param {StudyAssignmentDeleteArgs} args - Arguments to delete one StudyAssignment.
     * @example
     * // Delete one StudyAssignment
     * const StudyAssignment = await prisma.studyAssignment.delete({
     *   where: {
     *     // ... filter to delete one StudyAssignment
     *   }
     * })
     * 
     */
    delete<T extends StudyAssignmentDeleteArgs>(args: SelectSubset<T, StudyAssignmentDeleteArgs<ExtArgs>>): Prisma__StudyAssignmentClient<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudyAssignment.
     * @param {StudyAssignmentUpdateArgs} args - Arguments to update one StudyAssignment.
     * @example
     * // Update one StudyAssignment
     * const studyAssignment = await prisma.studyAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudyAssignmentUpdateArgs>(args: SelectSubset<T, StudyAssignmentUpdateArgs<ExtArgs>>): Prisma__StudyAssignmentClient<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudyAssignments.
     * @param {StudyAssignmentDeleteManyArgs} args - Arguments to filter StudyAssignments to delete.
     * @example
     * // Delete a few StudyAssignments
     * const { count } = await prisma.studyAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudyAssignmentDeleteManyArgs>(args?: SelectSubset<T, StudyAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudyAssignments
     * const studyAssignment = await prisma.studyAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudyAssignmentUpdateManyArgs>(args: SelectSubset<T, StudyAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyAssignments and returns the data updated in the database.
     * @param {StudyAssignmentUpdateManyAndReturnArgs} args - Arguments to update many StudyAssignments.
     * @example
     * // Update many StudyAssignments
     * const studyAssignment = await prisma.studyAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudyAssignments and only return the `id`
     * const studyAssignmentWithIdOnly = await prisma.studyAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudyAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudyAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudyAssignment.
     * @param {StudyAssignmentUpsertArgs} args - Arguments to update or create a StudyAssignment.
     * @example
     * // Update or create a StudyAssignment
     * const studyAssignment = await prisma.studyAssignment.upsert({
     *   create: {
     *     // ... data to create a StudyAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudyAssignment we want to update
     *   }
     * })
     */
    upsert<T extends StudyAssignmentUpsertArgs>(args: SelectSubset<T, StudyAssignmentUpsertArgs<ExtArgs>>): Prisma__StudyAssignmentClient<$Result.GetResult<Prisma.$StudyAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudyAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAssignmentCountArgs} args - Arguments to filter StudyAssignments to count.
     * @example
     * // Count the number of StudyAssignments
     * const count = await prisma.studyAssignment.count({
     *   where: {
     *     // ... the filter for the StudyAssignments we want to count
     *   }
     * })
    **/
    count<T extends StudyAssignmentCountArgs>(
      args?: Subset<T, StudyAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudyAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyAssignmentAggregateArgs>(args: Subset<T, StudyAssignmentAggregateArgs>): Prisma.PrismaPromise<GetStudyAssignmentAggregateType<T>>

    /**
     * Group by StudyAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: StudyAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudyAssignment model
   */
  readonly fields: StudyAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudyAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    study<T extends StudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyDefaultArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudyAssignment model
   */
  interface StudyAssignmentFieldRefs {
    readonly id: FieldRef<"StudyAssignment", 'String'>
    readonly studyId: FieldRef<"StudyAssignment", 'String'>
    readonly userId: FieldRef<"StudyAssignment", 'String'>
    readonly assignedAt: FieldRef<"StudyAssignment", 'DateTime'>
    readonly role: FieldRef<"StudyAssignment", 'StudyRole'>
  }
    

  // Custom InputTypes
  /**
   * StudyAssignment findUnique
   */
  export type StudyAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudyAssignment to fetch.
     */
    where: StudyAssignmentWhereUniqueInput
  }

  /**
   * StudyAssignment findUniqueOrThrow
   */
  export type StudyAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudyAssignment to fetch.
     */
    where: StudyAssignmentWhereUniqueInput
  }

  /**
   * StudyAssignment findFirst
   */
  export type StudyAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudyAssignment to fetch.
     */
    where?: StudyAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyAssignments to fetch.
     */
    orderBy?: StudyAssignmentOrderByWithRelationInput | StudyAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyAssignments.
     */
    cursor?: StudyAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyAssignments.
     */
    distinct?: StudyAssignmentScalarFieldEnum | StudyAssignmentScalarFieldEnum[]
  }

  /**
   * StudyAssignment findFirstOrThrow
   */
  export type StudyAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudyAssignment to fetch.
     */
    where?: StudyAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyAssignments to fetch.
     */
    orderBy?: StudyAssignmentOrderByWithRelationInput | StudyAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyAssignments.
     */
    cursor?: StudyAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyAssignments.
     */
    distinct?: StudyAssignmentScalarFieldEnum | StudyAssignmentScalarFieldEnum[]
  }

  /**
   * StudyAssignment findMany
   */
  export type StudyAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudyAssignments to fetch.
     */
    where?: StudyAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyAssignments to fetch.
     */
    orderBy?: StudyAssignmentOrderByWithRelationInput | StudyAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudyAssignments.
     */
    cursor?: StudyAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyAssignments.
     */
    skip?: number
    distinct?: StudyAssignmentScalarFieldEnum | StudyAssignmentScalarFieldEnum[]
  }

  /**
   * StudyAssignment create
   */
  export type StudyAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a StudyAssignment.
     */
    data: XOR<StudyAssignmentCreateInput, StudyAssignmentUncheckedCreateInput>
  }

  /**
   * StudyAssignment createMany
   */
  export type StudyAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudyAssignments.
     */
    data: StudyAssignmentCreateManyInput | StudyAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudyAssignment createManyAndReturn
   */
  export type StudyAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many StudyAssignments.
     */
    data: StudyAssignmentCreateManyInput | StudyAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyAssignment update
   */
  export type StudyAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a StudyAssignment.
     */
    data: XOR<StudyAssignmentUpdateInput, StudyAssignmentUncheckedUpdateInput>
    /**
     * Choose, which StudyAssignment to update.
     */
    where: StudyAssignmentWhereUniqueInput
  }

  /**
   * StudyAssignment updateMany
   */
  export type StudyAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudyAssignments.
     */
    data: XOR<StudyAssignmentUpdateManyMutationInput, StudyAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which StudyAssignments to update
     */
    where?: StudyAssignmentWhereInput
    /**
     * Limit how many StudyAssignments to update.
     */
    limit?: number
  }

  /**
   * StudyAssignment updateManyAndReturn
   */
  export type StudyAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update StudyAssignments.
     */
    data: XOR<StudyAssignmentUpdateManyMutationInput, StudyAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which StudyAssignments to update
     */
    where?: StudyAssignmentWhereInput
    /**
     * Limit how many StudyAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyAssignment upsert
   */
  export type StudyAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the StudyAssignment to update in case it exists.
     */
    where: StudyAssignmentWhereUniqueInput
    /**
     * In case the StudyAssignment found by the `where` argument doesn't exist, create a new StudyAssignment with this data.
     */
    create: XOR<StudyAssignmentCreateInput, StudyAssignmentUncheckedCreateInput>
    /**
     * In case the StudyAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyAssignmentUpdateInput, StudyAssignmentUncheckedUpdateInput>
  }

  /**
   * StudyAssignment delete
   */
  export type StudyAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
    /**
     * Filter which StudyAssignment to delete.
     */
    where: StudyAssignmentWhereUniqueInput
  }

  /**
   * StudyAssignment deleteMany
   */
  export type StudyAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyAssignments to delete
     */
    where?: StudyAssignmentWhereInput
    /**
     * Limit how many StudyAssignments to delete.
     */
    limit?: number
  }

  /**
   * StudyAssignment without action
   */
  export type StudyAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyAssignment
     */
    select?: StudyAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyAssignment
     */
    omit?: StudyAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model StudyNote
   */

  export type AggregateStudyNote = {
    _count: StudyNoteCountAggregateOutputType | null
    _min: StudyNoteMinAggregateOutputType | null
    _max: StudyNoteMaxAggregateOutputType | null
  }

  export type StudyNoteMinAggregateOutputType = {
    id: string | null
    studyId: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudyNoteMaxAggregateOutputType = {
    id: string | null
    studyId: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudyNoteCountAggregateOutputType = {
    id: number
    studyId: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudyNoteMinAggregateInputType = {
    id?: true
    studyId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudyNoteMaxAggregateInputType = {
    id?: true
    studyId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudyNoteCountAggregateInputType = {
    id?: true
    studyId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudyNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyNote to aggregate.
     */
    where?: StudyNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyNotes to fetch.
     */
    orderBy?: StudyNoteOrderByWithRelationInput | StudyNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudyNotes
    **/
    _count?: true | StudyNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyNoteMaxAggregateInputType
  }

  export type GetStudyNoteAggregateType<T extends StudyNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyNote[P]>
      : GetScalarType<T[P], AggregateStudyNote[P]>
  }




  export type StudyNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyNoteWhereInput
    orderBy?: StudyNoteOrderByWithAggregationInput | StudyNoteOrderByWithAggregationInput[]
    by: StudyNoteScalarFieldEnum[] | StudyNoteScalarFieldEnum
    having?: StudyNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyNoteCountAggregateInputType | true
    _min?: StudyNoteMinAggregateInputType
    _max?: StudyNoteMaxAggregateInputType
  }

  export type StudyNoteGroupByOutputType = {
    id: string
    studyId: string
    content: string
    createdAt: Date
    updatedAt: Date
    _count: StudyNoteCountAggregateOutputType | null
    _min: StudyNoteMinAggregateOutputType | null
    _max: StudyNoteMaxAggregateOutputType | null
  }

  type GetStudyNoteGroupByPayload<T extends StudyNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyNoteGroupByOutputType[P]>
            : GetScalarType<T[P], StudyNoteGroupByOutputType[P]>
        }
      >
    >


  export type StudyNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyNote"]>

  export type StudyNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyNote"]>

  export type StudyNoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyNote"]>

  export type StudyNoteSelectScalar = {
    id?: boolean
    studyId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudyNoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studyId" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["studyNote"]>
  export type StudyNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }
  export type StudyNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }
  export type StudyNoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }

  export type $StudyNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudyNote"
    objects: {
      study: Prisma.$StudyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studyId: string
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["studyNote"]>
    composites: {}
  }

  type StudyNoteGetPayload<S extends boolean | null | undefined | StudyNoteDefaultArgs> = $Result.GetResult<Prisma.$StudyNotePayload, S>

  type StudyNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudyNoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyNoteCountAggregateInputType | true
    }

  export interface StudyNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudyNote'], meta: { name: 'StudyNote' } }
    /**
     * Find zero or one StudyNote that matches the filter.
     * @param {StudyNoteFindUniqueArgs} args - Arguments to find a StudyNote
     * @example
     * // Get one StudyNote
     * const studyNote = await prisma.studyNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudyNoteFindUniqueArgs>(args: SelectSubset<T, StudyNoteFindUniqueArgs<ExtArgs>>): Prisma__StudyNoteClient<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudyNote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudyNoteFindUniqueOrThrowArgs} args - Arguments to find a StudyNote
     * @example
     * // Get one StudyNote
     * const studyNote = await prisma.studyNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudyNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, StudyNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudyNoteClient<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyNoteFindFirstArgs} args - Arguments to find a StudyNote
     * @example
     * // Get one StudyNote
     * const studyNote = await prisma.studyNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudyNoteFindFirstArgs>(args?: SelectSubset<T, StudyNoteFindFirstArgs<ExtArgs>>): Prisma__StudyNoteClient<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyNoteFindFirstOrThrowArgs} args - Arguments to find a StudyNote
     * @example
     * // Get one StudyNote
     * const studyNote = await prisma.studyNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudyNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, StudyNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudyNoteClient<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudyNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudyNotes
     * const studyNotes = await prisma.studyNote.findMany()
     * 
     * // Get first 10 StudyNotes
     * const studyNotes = await prisma.studyNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyNoteWithIdOnly = await prisma.studyNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudyNoteFindManyArgs>(args?: SelectSubset<T, StudyNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudyNote.
     * @param {StudyNoteCreateArgs} args - Arguments to create a StudyNote.
     * @example
     * // Create one StudyNote
     * const StudyNote = await prisma.studyNote.create({
     *   data: {
     *     // ... data to create a StudyNote
     *   }
     * })
     * 
     */
    create<T extends StudyNoteCreateArgs>(args: SelectSubset<T, StudyNoteCreateArgs<ExtArgs>>): Prisma__StudyNoteClient<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudyNotes.
     * @param {StudyNoteCreateManyArgs} args - Arguments to create many StudyNotes.
     * @example
     * // Create many StudyNotes
     * const studyNote = await prisma.studyNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudyNoteCreateManyArgs>(args?: SelectSubset<T, StudyNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudyNotes and returns the data saved in the database.
     * @param {StudyNoteCreateManyAndReturnArgs} args - Arguments to create many StudyNotes.
     * @example
     * // Create many StudyNotes
     * const studyNote = await prisma.studyNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudyNotes and only return the `id`
     * const studyNoteWithIdOnly = await prisma.studyNote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudyNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, StudyNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudyNote.
     * @param {StudyNoteDeleteArgs} args - Arguments to delete one StudyNote.
     * @example
     * // Delete one StudyNote
     * const StudyNote = await prisma.studyNote.delete({
     *   where: {
     *     // ... filter to delete one StudyNote
     *   }
     * })
     * 
     */
    delete<T extends StudyNoteDeleteArgs>(args: SelectSubset<T, StudyNoteDeleteArgs<ExtArgs>>): Prisma__StudyNoteClient<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudyNote.
     * @param {StudyNoteUpdateArgs} args - Arguments to update one StudyNote.
     * @example
     * // Update one StudyNote
     * const studyNote = await prisma.studyNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudyNoteUpdateArgs>(args: SelectSubset<T, StudyNoteUpdateArgs<ExtArgs>>): Prisma__StudyNoteClient<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudyNotes.
     * @param {StudyNoteDeleteManyArgs} args - Arguments to filter StudyNotes to delete.
     * @example
     * // Delete a few StudyNotes
     * const { count } = await prisma.studyNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudyNoteDeleteManyArgs>(args?: SelectSubset<T, StudyNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudyNotes
     * const studyNote = await prisma.studyNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudyNoteUpdateManyArgs>(args: SelectSubset<T, StudyNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyNotes and returns the data updated in the database.
     * @param {StudyNoteUpdateManyAndReturnArgs} args - Arguments to update many StudyNotes.
     * @example
     * // Update many StudyNotes
     * const studyNote = await prisma.studyNote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudyNotes and only return the `id`
     * const studyNoteWithIdOnly = await prisma.studyNote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudyNoteUpdateManyAndReturnArgs>(args: SelectSubset<T, StudyNoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudyNote.
     * @param {StudyNoteUpsertArgs} args - Arguments to update or create a StudyNote.
     * @example
     * // Update or create a StudyNote
     * const studyNote = await prisma.studyNote.upsert({
     *   create: {
     *     // ... data to create a StudyNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudyNote we want to update
     *   }
     * })
     */
    upsert<T extends StudyNoteUpsertArgs>(args: SelectSubset<T, StudyNoteUpsertArgs<ExtArgs>>): Prisma__StudyNoteClient<$Result.GetResult<Prisma.$StudyNotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudyNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyNoteCountArgs} args - Arguments to filter StudyNotes to count.
     * @example
     * // Count the number of StudyNotes
     * const count = await prisma.studyNote.count({
     *   where: {
     *     // ... the filter for the StudyNotes we want to count
     *   }
     * })
    **/
    count<T extends StudyNoteCountArgs>(
      args?: Subset<T, StudyNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudyNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyNoteAggregateArgs>(args: Subset<T, StudyNoteAggregateArgs>): Prisma.PrismaPromise<GetStudyNoteAggregateType<T>>

    /**
     * Group by StudyNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyNoteGroupByArgs['orderBy'] }
        : { orderBy?: StudyNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudyNote model
   */
  readonly fields: StudyNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudyNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    study<T extends StudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyDefaultArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudyNote model
   */
  interface StudyNoteFieldRefs {
    readonly id: FieldRef<"StudyNote", 'String'>
    readonly studyId: FieldRef<"StudyNote", 'String'>
    readonly content: FieldRef<"StudyNote", 'String'>
    readonly createdAt: FieldRef<"StudyNote", 'DateTime'>
    readonly updatedAt: FieldRef<"StudyNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudyNote findUnique
   */
  export type StudyNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * Filter, which StudyNote to fetch.
     */
    where: StudyNoteWhereUniqueInput
  }

  /**
   * StudyNote findUniqueOrThrow
   */
  export type StudyNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * Filter, which StudyNote to fetch.
     */
    where: StudyNoteWhereUniqueInput
  }

  /**
   * StudyNote findFirst
   */
  export type StudyNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * Filter, which StudyNote to fetch.
     */
    where?: StudyNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyNotes to fetch.
     */
    orderBy?: StudyNoteOrderByWithRelationInput | StudyNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyNotes.
     */
    cursor?: StudyNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyNotes.
     */
    distinct?: StudyNoteScalarFieldEnum | StudyNoteScalarFieldEnum[]
  }

  /**
   * StudyNote findFirstOrThrow
   */
  export type StudyNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * Filter, which StudyNote to fetch.
     */
    where?: StudyNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyNotes to fetch.
     */
    orderBy?: StudyNoteOrderByWithRelationInput | StudyNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyNotes.
     */
    cursor?: StudyNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyNotes.
     */
    distinct?: StudyNoteScalarFieldEnum | StudyNoteScalarFieldEnum[]
  }

  /**
   * StudyNote findMany
   */
  export type StudyNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * Filter, which StudyNotes to fetch.
     */
    where?: StudyNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyNotes to fetch.
     */
    orderBy?: StudyNoteOrderByWithRelationInput | StudyNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudyNotes.
     */
    cursor?: StudyNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyNotes.
     */
    skip?: number
    distinct?: StudyNoteScalarFieldEnum | StudyNoteScalarFieldEnum[]
  }

  /**
   * StudyNote create
   */
  export type StudyNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a StudyNote.
     */
    data: XOR<StudyNoteCreateInput, StudyNoteUncheckedCreateInput>
  }

  /**
   * StudyNote createMany
   */
  export type StudyNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudyNotes.
     */
    data: StudyNoteCreateManyInput | StudyNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudyNote createManyAndReturn
   */
  export type StudyNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * The data used to create many StudyNotes.
     */
    data: StudyNoteCreateManyInput | StudyNoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyNote update
   */
  export type StudyNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a StudyNote.
     */
    data: XOR<StudyNoteUpdateInput, StudyNoteUncheckedUpdateInput>
    /**
     * Choose, which StudyNote to update.
     */
    where: StudyNoteWhereUniqueInput
  }

  /**
   * StudyNote updateMany
   */
  export type StudyNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudyNotes.
     */
    data: XOR<StudyNoteUpdateManyMutationInput, StudyNoteUncheckedUpdateManyInput>
    /**
     * Filter which StudyNotes to update
     */
    where?: StudyNoteWhereInput
    /**
     * Limit how many StudyNotes to update.
     */
    limit?: number
  }

  /**
   * StudyNote updateManyAndReturn
   */
  export type StudyNoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * The data used to update StudyNotes.
     */
    data: XOR<StudyNoteUpdateManyMutationInput, StudyNoteUncheckedUpdateManyInput>
    /**
     * Filter which StudyNotes to update
     */
    where?: StudyNoteWhereInput
    /**
     * Limit how many StudyNotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyNote upsert
   */
  export type StudyNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the StudyNote to update in case it exists.
     */
    where: StudyNoteWhereUniqueInput
    /**
     * In case the StudyNote found by the `where` argument doesn't exist, create a new StudyNote with this data.
     */
    create: XOR<StudyNoteCreateInput, StudyNoteUncheckedCreateInput>
    /**
     * In case the StudyNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyNoteUpdateInput, StudyNoteUncheckedUpdateInput>
  }

  /**
   * StudyNote delete
   */
  export type StudyNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
    /**
     * Filter which StudyNote to delete.
     */
    where: StudyNoteWhereUniqueInput
  }

  /**
   * StudyNote deleteMany
   */
  export type StudyNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyNotes to delete
     */
    where?: StudyNoteWhereInput
    /**
     * Limit how many StudyNotes to delete.
     */
    limit?: number
  }

  /**
   * StudyNote without action
   */
  export type StudyNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyNote
     */
    select?: StudyNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyNote
     */
    omit?: StudyNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyNoteInclude<ExtArgs> | null
  }


  /**
   * Model SymptomTemplate
   */

  export type AggregateSymptomTemplate = {
    _count: SymptomTemplateCountAggregateOutputType | null
    _avg: SymptomTemplateAvgAggregateOutputType | null
    _sum: SymptomTemplateSumAggregateOutputType | null
    _min: SymptomTemplateMinAggregateOutputType | null
    _max: SymptomTemplateMaxAggregateOutputType | null
  }

  export type SymptomTemplateAvgAggregateOutputType = {
    minValue: number | null
    maxValue: number | null
  }

  export type SymptomTemplateSumAggregateOutputType = {
    minValue: number | null
    maxValue: number | null
  }

  export type SymptomTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    dataType: $Enums.SymptomDataType | null
    units: string | null
    minValue: number | null
    maxValue: number | null
    studyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SymptomTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    dataType: $Enums.SymptomDataType | null
    units: string | null
    minValue: number | null
    maxValue: number | null
    studyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SymptomTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    dataType: number
    units: number
    minValue: number
    maxValue: number
    options: number
    studyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SymptomTemplateAvgAggregateInputType = {
    minValue?: true
    maxValue?: true
  }

  export type SymptomTemplateSumAggregateInputType = {
    minValue?: true
    maxValue?: true
  }

  export type SymptomTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    dataType?: true
    units?: true
    minValue?: true
    maxValue?: true
    studyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SymptomTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    dataType?: true
    units?: true
    minValue?: true
    maxValue?: true
    studyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SymptomTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    dataType?: true
    units?: true
    minValue?: true
    maxValue?: true
    options?: true
    studyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SymptomTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SymptomTemplate to aggregate.
     */
    where?: SymptomTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SymptomTemplates to fetch.
     */
    orderBy?: SymptomTemplateOrderByWithRelationInput | SymptomTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SymptomTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SymptomTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SymptomTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SymptomTemplates
    **/
    _count?: true | SymptomTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SymptomTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SymptomTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SymptomTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SymptomTemplateMaxAggregateInputType
  }

  export type GetSymptomTemplateAggregateType<T extends SymptomTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateSymptomTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSymptomTemplate[P]>
      : GetScalarType<T[P], AggregateSymptomTemplate[P]>
  }




  export type SymptomTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SymptomTemplateWhereInput
    orderBy?: SymptomTemplateOrderByWithAggregationInput | SymptomTemplateOrderByWithAggregationInput[]
    by: SymptomTemplateScalarFieldEnum[] | SymptomTemplateScalarFieldEnum
    having?: SymptomTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SymptomTemplateCountAggregateInputType | true
    _avg?: SymptomTemplateAvgAggregateInputType
    _sum?: SymptomTemplateSumAggregateInputType
    _min?: SymptomTemplateMinAggregateInputType
    _max?: SymptomTemplateMaxAggregateInputType
  }

  export type SymptomTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string | null
    dataType: $Enums.SymptomDataType
    units: string | null
    minValue: number | null
    maxValue: number | null
    options: JsonValue | null
    studyId: string
    createdAt: Date
    updatedAt: Date
    _count: SymptomTemplateCountAggregateOutputType | null
    _avg: SymptomTemplateAvgAggregateOutputType | null
    _sum: SymptomTemplateSumAggregateOutputType | null
    _min: SymptomTemplateMinAggregateOutputType | null
    _max: SymptomTemplateMaxAggregateOutputType | null
  }

  type GetSymptomTemplateGroupByPayload<T extends SymptomTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SymptomTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SymptomTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SymptomTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], SymptomTemplateGroupByOutputType[P]>
        }
      >
    >


  export type SymptomTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    dataType?: boolean
    units?: boolean
    minValue?: boolean
    maxValue?: boolean
    options?: boolean
    studyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
    observations?: boolean | SymptomTemplate$observationsArgs<ExtArgs>
    alertThresholds?: boolean | SymptomTemplate$alertThresholdsArgs<ExtArgs>
    _count?: boolean | SymptomTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["symptomTemplate"]>

  export type SymptomTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    dataType?: boolean
    units?: boolean
    minValue?: boolean
    maxValue?: boolean
    options?: boolean
    studyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["symptomTemplate"]>

  export type SymptomTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    dataType?: boolean
    units?: boolean
    minValue?: boolean
    maxValue?: boolean
    options?: boolean
    studyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["symptomTemplate"]>

  export type SymptomTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    dataType?: boolean
    units?: boolean
    minValue?: boolean
    maxValue?: boolean
    options?: boolean
    studyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SymptomTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "category" | "dataType" | "units" | "minValue" | "maxValue" | "options" | "studyId" | "createdAt" | "updatedAt", ExtArgs["result"]["symptomTemplate"]>
  export type SymptomTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
    observations?: boolean | SymptomTemplate$observationsArgs<ExtArgs>
    alertThresholds?: boolean | SymptomTemplate$alertThresholdsArgs<ExtArgs>
    _count?: boolean | SymptomTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SymptomTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }
  export type SymptomTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }

  export type $SymptomTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SymptomTemplate"
    objects: {
      study: Prisma.$StudyPayload<ExtArgs>
      observations: Prisma.$ObservationPayload<ExtArgs>[]
      alertThresholds: Prisma.$AlertThresholdPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string | null
      dataType: $Enums.SymptomDataType
      units: string | null
      minValue: number | null
      maxValue: number | null
      options: Prisma.JsonValue | null
      studyId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["symptomTemplate"]>
    composites: {}
  }

  type SymptomTemplateGetPayload<S extends boolean | null | undefined | SymptomTemplateDefaultArgs> = $Result.GetResult<Prisma.$SymptomTemplatePayload, S>

  type SymptomTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SymptomTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SymptomTemplateCountAggregateInputType | true
    }

  export interface SymptomTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SymptomTemplate'], meta: { name: 'SymptomTemplate' } }
    /**
     * Find zero or one SymptomTemplate that matches the filter.
     * @param {SymptomTemplateFindUniqueArgs} args - Arguments to find a SymptomTemplate
     * @example
     * // Get one SymptomTemplate
     * const symptomTemplate = await prisma.symptomTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SymptomTemplateFindUniqueArgs>(args: SelectSubset<T, SymptomTemplateFindUniqueArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SymptomTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SymptomTemplateFindUniqueOrThrowArgs} args - Arguments to find a SymptomTemplate
     * @example
     * // Get one SymptomTemplate
     * const symptomTemplate = await prisma.symptomTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SymptomTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, SymptomTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SymptomTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymptomTemplateFindFirstArgs} args - Arguments to find a SymptomTemplate
     * @example
     * // Get one SymptomTemplate
     * const symptomTemplate = await prisma.symptomTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SymptomTemplateFindFirstArgs>(args?: SelectSubset<T, SymptomTemplateFindFirstArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SymptomTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymptomTemplateFindFirstOrThrowArgs} args - Arguments to find a SymptomTemplate
     * @example
     * // Get one SymptomTemplate
     * const symptomTemplate = await prisma.symptomTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SymptomTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, SymptomTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SymptomTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymptomTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SymptomTemplates
     * const symptomTemplates = await prisma.symptomTemplate.findMany()
     * 
     * // Get first 10 SymptomTemplates
     * const symptomTemplates = await prisma.symptomTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const symptomTemplateWithIdOnly = await prisma.symptomTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SymptomTemplateFindManyArgs>(args?: SelectSubset<T, SymptomTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SymptomTemplate.
     * @param {SymptomTemplateCreateArgs} args - Arguments to create a SymptomTemplate.
     * @example
     * // Create one SymptomTemplate
     * const SymptomTemplate = await prisma.symptomTemplate.create({
     *   data: {
     *     // ... data to create a SymptomTemplate
     *   }
     * })
     * 
     */
    create<T extends SymptomTemplateCreateArgs>(args: SelectSubset<T, SymptomTemplateCreateArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SymptomTemplates.
     * @param {SymptomTemplateCreateManyArgs} args - Arguments to create many SymptomTemplates.
     * @example
     * // Create many SymptomTemplates
     * const symptomTemplate = await prisma.symptomTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SymptomTemplateCreateManyArgs>(args?: SelectSubset<T, SymptomTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SymptomTemplates and returns the data saved in the database.
     * @param {SymptomTemplateCreateManyAndReturnArgs} args - Arguments to create many SymptomTemplates.
     * @example
     * // Create many SymptomTemplates
     * const symptomTemplate = await prisma.symptomTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SymptomTemplates and only return the `id`
     * const symptomTemplateWithIdOnly = await prisma.symptomTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SymptomTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, SymptomTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SymptomTemplate.
     * @param {SymptomTemplateDeleteArgs} args - Arguments to delete one SymptomTemplate.
     * @example
     * // Delete one SymptomTemplate
     * const SymptomTemplate = await prisma.symptomTemplate.delete({
     *   where: {
     *     // ... filter to delete one SymptomTemplate
     *   }
     * })
     * 
     */
    delete<T extends SymptomTemplateDeleteArgs>(args: SelectSubset<T, SymptomTemplateDeleteArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SymptomTemplate.
     * @param {SymptomTemplateUpdateArgs} args - Arguments to update one SymptomTemplate.
     * @example
     * // Update one SymptomTemplate
     * const symptomTemplate = await prisma.symptomTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SymptomTemplateUpdateArgs>(args: SelectSubset<T, SymptomTemplateUpdateArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SymptomTemplates.
     * @param {SymptomTemplateDeleteManyArgs} args - Arguments to filter SymptomTemplates to delete.
     * @example
     * // Delete a few SymptomTemplates
     * const { count } = await prisma.symptomTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SymptomTemplateDeleteManyArgs>(args?: SelectSubset<T, SymptomTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SymptomTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymptomTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SymptomTemplates
     * const symptomTemplate = await prisma.symptomTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SymptomTemplateUpdateManyArgs>(args: SelectSubset<T, SymptomTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SymptomTemplates and returns the data updated in the database.
     * @param {SymptomTemplateUpdateManyAndReturnArgs} args - Arguments to update many SymptomTemplates.
     * @example
     * // Update many SymptomTemplates
     * const symptomTemplate = await prisma.symptomTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SymptomTemplates and only return the `id`
     * const symptomTemplateWithIdOnly = await prisma.symptomTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SymptomTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, SymptomTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SymptomTemplate.
     * @param {SymptomTemplateUpsertArgs} args - Arguments to update or create a SymptomTemplate.
     * @example
     * // Update or create a SymptomTemplate
     * const symptomTemplate = await prisma.symptomTemplate.upsert({
     *   create: {
     *     // ... data to create a SymptomTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SymptomTemplate we want to update
     *   }
     * })
     */
    upsert<T extends SymptomTemplateUpsertArgs>(args: SelectSubset<T, SymptomTemplateUpsertArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SymptomTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymptomTemplateCountArgs} args - Arguments to filter SymptomTemplates to count.
     * @example
     * // Count the number of SymptomTemplates
     * const count = await prisma.symptomTemplate.count({
     *   where: {
     *     // ... the filter for the SymptomTemplates we want to count
     *   }
     * })
    **/
    count<T extends SymptomTemplateCountArgs>(
      args?: Subset<T, SymptomTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SymptomTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SymptomTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymptomTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SymptomTemplateAggregateArgs>(args: Subset<T, SymptomTemplateAggregateArgs>): Prisma.PrismaPromise<GetSymptomTemplateAggregateType<T>>

    /**
     * Group by SymptomTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymptomTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SymptomTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SymptomTemplateGroupByArgs['orderBy'] }
        : { orderBy?: SymptomTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SymptomTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSymptomTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SymptomTemplate model
   */
  readonly fields: SymptomTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SymptomTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SymptomTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    study<T extends StudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyDefaultArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    observations<T extends SymptomTemplate$observationsArgs<ExtArgs> = {}>(args?: Subset<T, SymptomTemplate$observationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alertThresholds<T extends SymptomTemplate$alertThresholdsArgs<ExtArgs> = {}>(args?: Subset<T, SymptomTemplate$alertThresholdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SymptomTemplate model
   */
  interface SymptomTemplateFieldRefs {
    readonly id: FieldRef<"SymptomTemplate", 'String'>
    readonly name: FieldRef<"SymptomTemplate", 'String'>
    readonly description: FieldRef<"SymptomTemplate", 'String'>
    readonly category: FieldRef<"SymptomTemplate", 'String'>
    readonly dataType: FieldRef<"SymptomTemplate", 'SymptomDataType'>
    readonly units: FieldRef<"SymptomTemplate", 'String'>
    readonly minValue: FieldRef<"SymptomTemplate", 'Float'>
    readonly maxValue: FieldRef<"SymptomTemplate", 'Float'>
    readonly options: FieldRef<"SymptomTemplate", 'Json'>
    readonly studyId: FieldRef<"SymptomTemplate", 'String'>
    readonly createdAt: FieldRef<"SymptomTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"SymptomTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SymptomTemplate findUnique
   */
  export type SymptomTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SymptomTemplate to fetch.
     */
    where: SymptomTemplateWhereUniqueInput
  }

  /**
   * SymptomTemplate findUniqueOrThrow
   */
  export type SymptomTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SymptomTemplate to fetch.
     */
    where: SymptomTemplateWhereUniqueInput
  }

  /**
   * SymptomTemplate findFirst
   */
  export type SymptomTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SymptomTemplate to fetch.
     */
    where?: SymptomTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SymptomTemplates to fetch.
     */
    orderBy?: SymptomTemplateOrderByWithRelationInput | SymptomTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SymptomTemplates.
     */
    cursor?: SymptomTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SymptomTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SymptomTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SymptomTemplates.
     */
    distinct?: SymptomTemplateScalarFieldEnum | SymptomTemplateScalarFieldEnum[]
  }

  /**
   * SymptomTemplate findFirstOrThrow
   */
  export type SymptomTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SymptomTemplate to fetch.
     */
    where?: SymptomTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SymptomTemplates to fetch.
     */
    orderBy?: SymptomTemplateOrderByWithRelationInput | SymptomTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SymptomTemplates.
     */
    cursor?: SymptomTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SymptomTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SymptomTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SymptomTemplates.
     */
    distinct?: SymptomTemplateScalarFieldEnum | SymptomTemplateScalarFieldEnum[]
  }

  /**
   * SymptomTemplate findMany
   */
  export type SymptomTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SymptomTemplates to fetch.
     */
    where?: SymptomTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SymptomTemplates to fetch.
     */
    orderBy?: SymptomTemplateOrderByWithRelationInput | SymptomTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SymptomTemplates.
     */
    cursor?: SymptomTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SymptomTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SymptomTemplates.
     */
    skip?: number
    distinct?: SymptomTemplateScalarFieldEnum | SymptomTemplateScalarFieldEnum[]
  }

  /**
   * SymptomTemplate create
   */
  export type SymptomTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a SymptomTemplate.
     */
    data: XOR<SymptomTemplateCreateInput, SymptomTemplateUncheckedCreateInput>
  }

  /**
   * SymptomTemplate createMany
   */
  export type SymptomTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SymptomTemplates.
     */
    data: SymptomTemplateCreateManyInput | SymptomTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SymptomTemplate createManyAndReturn
   */
  export type SymptomTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many SymptomTemplates.
     */
    data: SymptomTemplateCreateManyInput | SymptomTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SymptomTemplate update
   */
  export type SymptomTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a SymptomTemplate.
     */
    data: XOR<SymptomTemplateUpdateInput, SymptomTemplateUncheckedUpdateInput>
    /**
     * Choose, which SymptomTemplate to update.
     */
    where: SymptomTemplateWhereUniqueInput
  }

  /**
   * SymptomTemplate updateMany
   */
  export type SymptomTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SymptomTemplates.
     */
    data: XOR<SymptomTemplateUpdateManyMutationInput, SymptomTemplateUncheckedUpdateManyInput>
    /**
     * Filter which SymptomTemplates to update
     */
    where?: SymptomTemplateWhereInput
    /**
     * Limit how many SymptomTemplates to update.
     */
    limit?: number
  }

  /**
   * SymptomTemplate updateManyAndReturn
   */
  export type SymptomTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * The data used to update SymptomTemplates.
     */
    data: XOR<SymptomTemplateUpdateManyMutationInput, SymptomTemplateUncheckedUpdateManyInput>
    /**
     * Filter which SymptomTemplates to update
     */
    where?: SymptomTemplateWhereInput
    /**
     * Limit how many SymptomTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SymptomTemplate upsert
   */
  export type SymptomTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the SymptomTemplate to update in case it exists.
     */
    where: SymptomTemplateWhereUniqueInput
    /**
     * In case the SymptomTemplate found by the `where` argument doesn't exist, create a new SymptomTemplate with this data.
     */
    create: XOR<SymptomTemplateCreateInput, SymptomTemplateUncheckedCreateInput>
    /**
     * In case the SymptomTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SymptomTemplateUpdateInput, SymptomTemplateUncheckedUpdateInput>
  }

  /**
   * SymptomTemplate delete
   */
  export type SymptomTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
    /**
     * Filter which SymptomTemplate to delete.
     */
    where: SymptomTemplateWhereUniqueInput
  }

  /**
   * SymptomTemplate deleteMany
   */
  export type SymptomTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SymptomTemplates to delete
     */
    where?: SymptomTemplateWhereInput
    /**
     * Limit how many SymptomTemplates to delete.
     */
    limit?: number
  }

  /**
   * SymptomTemplate.observations
   */
  export type SymptomTemplate$observationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    cursor?: ObservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * SymptomTemplate.alertThresholds
   */
  export type SymptomTemplate$alertThresholdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    where?: AlertThresholdWhereInput
    orderBy?: AlertThresholdOrderByWithRelationInput | AlertThresholdOrderByWithRelationInput[]
    cursor?: AlertThresholdWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertThresholdScalarFieldEnum | AlertThresholdScalarFieldEnum[]
  }

  /**
   * SymptomTemplate without action
   */
  export type SymptomTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymptomTemplate
     */
    select?: SymptomTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SymptomTemplate
     */
    omit?: SymptomTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymptomTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Observation
   */

  export type AggregateObservation = {
    _count: ObservationCountAggregateOutputType | null
    _min: ObservationMinAggregateOutputType | null
    _max: ObservationMaxAggregateOutputType | null
  }

  export type ObservationMinAggregateOutputType = {
    id: string | null
    symptomTemplateId: string | null
    patientId: string | null
    studyPatientId: string | null
    recordedById: string | null
    recordedAt: Date | null
    notes: string | null
  }

  export type ObservationMaxAggregateOutputType = {
    id: string | null
    symptomTemplateId: string | null
    patientId: string | null
    studyPatientId: string | null
    recordedById: string | null
    recordedAt: Date | null
    notes: string | null
  }

  export type ObservationCountAggregateOutputType = {
    id: number
    symptomTemplateId: number
    patientId: number
    studyPatientId: number
    recordedById: number
    recordedAt: number
    value: number
    notes: number
    _all: number
  }


  export type ObservationMinAggregateInputType = {
    id?: true
    symptomTemplateId?: true
    patientId?: true
    studyPatientId?: true
    recordedById?: true
    recordedAt?: true
    notes?: true
  }

  export type ObservationMaxAggregateInputType = {
    id?: true
    symptomTemplateId?: true
    patientId?: true
    studyPatientId?: true
    recordedById?: true
    recordedAt?: true
    notes?: true
  }

  export type ObservationCountAggregateInputType = {
    id?: true
    symptomTemplateId?: true
    patientId?: true
    studyPatientId?: true
    recordedById?: true
    recordedAt?: true
    value?: true
    notes?: true
    _all?: true
  }

  export type ObservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Observation to aggregate.
     */
    where?: ObservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Observations to fetch.
     */
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ObservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Observations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Observations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Observations
    **/
    _count?: true | ObservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ObservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ObservationMaxAggregateInputType
  }

  export type GetObservationAggregateType<T extends ObservationAggregateArgs> = {
        [P in keyof T & keyof AggregateObservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObservation[P]>
      : GetScalarType<T[P], AggregateObservation[P]>
  }




  export type ObservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObservationWhereInput
    orderBy?: ObservationOrderByWithAggregationInput | ObservationOrderByWithAggregationInput[]
    by: ObservationScalarFieldEnum[] | ObservationScalarFieldEnum
    having?: ObservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ObservationCountAggregateInputType | true
    _min?: ObservationMinAggregateInputType
    _max?: ObservationMaxAggregateInputType
  }

  export type ObservationGroupByOutputType = {
    id: string
    symptomTemplateId: string
    patientId: string
    studyPatientId: string
    recordedById: string
    recordedAt: Date
    value: JsonValue
    notes: string | null
    _count: ObservationCountAggregateOutputType | null
    _min: ObservationMinAggregateOutputType | null
    _max: ObservationMaxAggregateOutputType | null
  }

  type GetObservationGroupByPayload<T extends ObservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ObservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ObservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ObservationGroupByOutputType[P]>
            : GetScalarType<T[P], ObservationGroupByOutputType[P]>
        }
      >
    >


  export type ObservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symptomTemplateId?: boolean
    patientId?: boolean
    studyPatientId?: boolean
    recordedById?: boolean
    recordedAt?: boolean
    value?: boolean
    notes?: boolean
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    recordedBy?: boolean | UserDefaultArgs<ExtArgs>
    files?: boolean | Observation$filesArgs<ExtArgs>
    alerts?: boolean | Observation$alertsArgs<ExtArgs>
    _count?: boolean | ObservationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["observation"]>

  export type ObservationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symptomTemplateId?: boolean
    patientId?: boolean
    studyPatientId?: boolean
    recordedById?: boolean
    recordedAt?: boolean
    value?: boolean
    notes?: boolean
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    recordedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["observation"]>

  export type ObservationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symptomTemplateId?: boolean
    patientId?: boolean
    studyPatientId?: boolean
    recordedById?: boolean
    recordedAt?: boolean
    value?: boolean
    notes?: boolean
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    recordedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["observation"]>

  export type ObservationSelectScalar = {
    id?: boolean
    symptomTemplateId?: boolean
    patientId?: boolean
    studyPatientId?: boolean
    recordedById?: boolean
    recordedAt?: boolean
    value?: boolean
    notes?: boolean
  }

  export type ObservationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symptomTemplateId" | "patientId" | "studyPatientId" | "recordedById" | "recordedAt" | "value" | "notes", ExtArgs["result"]["observation"]>
  export type ObservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    recordedBy?: boolean | UserDefaultArgs<ExtArgs>
    files?: boolean | Observation$filesArgs<ExtArgs>
    alerts?: boolean | Observation$alertsArgs<ExtArgs>
    _count?: boolean | ObservationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ObservationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    recordedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ObservationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    recordedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ObservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Observation"
    objects: {
      symptomTemplate: Prisma.$SymptomTemplatePayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      studyPatient: Prisma.$StudyPatientPayload<ExtArgs>
      recordedBy: Prisma.$UserPayload<ExtArgs>
      files: Prisma.$FilePayload<ExtArgs>[]
      alerts: Prisma.$AlertPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symptomTemplateId: string
      patientId: string
      studyPatientId: string
      recordedById: string
      recordedAt: Date
      value: Prisma.JsonValue
      notes: string | null
    }, ExtArgs["result"]["observation"]>
    composites: {}
  }

  type ObservationGetPayload<S extends boolean | null | undefined | ObservationDefaultArgs> = $Result.GetResult<Prisma.$ObservationPayload, S>

  type ObservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ObservationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ObservationCountAggregateInputType | true
    }

  export interface ObservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Observation'], meta: { name: 'Observation' } }
    /**
     * Find zero or one Observation that matches the filter.
     * @param {ObservationFindUniqueArgs} args - Arguments to find a Observation
     * @example
     * // Get one Observation
     * const observation = await prisma.observation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ObservationFindUniqueArgs>(args: SelectSubset<T, ObservationFindUniqueArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Observation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ObservationFindUniqueOrThrowArgs} args - Arguments to find a Observation
     * @example
     * // Get one Observation
     * const observation = await prisma.observation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ObservationFindUniqueOrThrowArgs>(args: SelectSubset<T, ObservationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Observation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationFindFirstArgs} args - Arguments to find a Observation
     * @example
     * // Get one Observation
     * const observation = await prisma.observation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ObservationFindFirstArgs>(args?: SelectSubset<T, ObservationFindFirstArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Observation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationFindFirstOrThrowArgs} args - Arguments to find a Observation
     * @example
     * // Get one Observation
     * const observation = await prisma.observation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ObservationFindFirstOrThrowArgs>(args?: SelectSubset<T, ObservationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Observations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Observations
     * const observations = await prisma.observation.findMany()
     * 
     * // Get first 10 Observations
     * const observations = await prisma.observation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const observationWithIdOnly = await prisma.observation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ObservationFindManyArgs>(args?: SelectSubset<T, ObservationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Observation.
     * @param {ObservationCreateArgs} args - Arguments to create a Observation.
     * @example
     * // Create one Observation
     * const Observation = await prisma.observation.create({
     *   data: {
     *     // ... data to create a Observation
     *   }
     * })
     * 
     */
    create<T extends ObservationCreateArgs>(args: SelectSubset<T, ObservationCreateArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Observations.
     * @param {ObservationCreateManyArgs} args - Arguments to create many Observations.
     * @example
     * // Create many Observations
     * const observation = await prisma.observation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ObservationCreateManyArgs>(args?: SelectSubset<T, ObservationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Observations and returns the data saved in the database.
     * @param {ObservationCreateManyAndReturnArgs} args - Arguments to create many Observations.
     * @example
     * // Create many Observations
     * const observation = await prisma.observation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Observations and only return the `id`
     * const observationWithIdOnly = await prisma.observation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ObservationCreateManyAndReturnArgs>(args?: SelectSubset<T, ObservationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Observation.
     * @param {ObservationDeleteArgs} args - Arguments to delete one Observation.
     * @example
     * // Delete one Observation
     * const Observation = await prisma.observation.delete({
     *   where: {
     *     // ... filter to delete one Observation
     *   }
     * })
     * 
     */
    delete<T extends ObservationDeleteArgs>(args: SelectSubset<T, ObservationDeleteArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Observation.
     * @param {ObservationUpdateArgs} args - Arguments to update one Observation.
     * @example
     * // Update one Observation
     * const observation = await prisma.observation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ObservationUpdateArgs>(args: SelectSubset<T, ObservationUpdateArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Observations.
     * @param {ObservationDeleteManyArgs} args - Arguments to filter Observations to delete.
     * @example
     * // Delete a few Observations
     * const { count } = await prisma.observation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ObservationDeleteManyArgs>(args?: SelectSubset<T, ObservationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Observations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Observations
     * const observation = await prisma.observation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ObservationUpdateManyArgs>(args: SelectSubset<T, ObservationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Observations and returns the data updated in the database.
     * @param {ObservationUpdateManyAndReturnArgs} args - Arguments to update many Observations.
     * @example
     * // Update many Observations
     * const observation = await prisma.observation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Observations and only return the `id`
     * const observationWithIdOnly = await prisma.observation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ObservationUpdateManyAndReturnArgs>(args: SelectSubset<T, ObservationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Observation.
     * @param {ObservationUpsertArgs} args - Arguments to update or create a Observation.
     * @example
     * // Update or create a Observation
     * const observation = await prisma.observation.upsert({
     *   create: {
     *     // ... data to create a Observation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Observation we want to update
     *   }
     * })
     */
    upsert<T extends ObservationUpsertArgs>(args: SelectSubset<T, ObservationUpsertArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Observations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationCountArgs} args - Arguments to filter Observations to count.
     * @example
     * // Count the number of Observations
     * const count = await prisma.observation.count({
     *   where: {
     *     // ... the filter for the Observations we want to count
     *   }
     * })
    **/
    count<T extends ObservationCountArgs>(
      args?: Subset<T, ObservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ObservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Observation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ObservationAggregateArgs>(args: Subset<T, ObservationAggregateArgs>): Prisma.PrismaPromise<GetObservationAggregateType<T>>

    /**
     * Group by Observation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ObservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ObservationGroupByArgs['orderBy'] }
        : { orderBy?: ObservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ObservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Observation model
   */
  readonly fields: ObservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Observation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ObservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    symptomTemplate<T extends SymptomTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SymptomTemplateDefaultArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studyPatient<T extends StudyPatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyPatientDefaultArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recordedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    files<T extends Observation$filesArgs<ExtArgs> = {}>(args?: Subset<T, Observation$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alerts<T extends Observation$alertsArgs<ExtArgs> = {}>(args?: Subset<T, Observation$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Observation model
   */
  interface ObservationFieldRefs {
    readonly id: FieldRef<"Observation", 'String'>
    readonly symptomTemplateId: FieldRef<"Observation", 'String'>
    readonly patientId: FieldRef<"Observation", 'String'>
    readonly studyPatientId: FieldRef<"Observation", 'String'>
    readonly recordedById: FieldRef<"Observation", 'String'>
    readonly recordedAt: FieldRef<"Observation", 'DateTime'>
    readonly value: FieldRef<"Observation", 'Json'>
    readonly notes: FieldRef<"Observation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Observation findUnique
   */
  export type ObservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observation to fetch.
     */
    where: ObservationWhereUniqueInput
  }

  /**
   * Observation findUniqueOrThrow
   */
  export type ObservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observation to fetch.
     */
    where: ObservationWhereUniqueInput
  }

  /**
   * Observation findFirst
   */
  export type ObservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observation to fetch.
     */
    where?: ObservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Observations to fetch.
     */
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Observations.
     */
    cursor?: ObservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Observations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Observations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Observations.
     */
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * Observation findFirstOrThrow
   */
  export type ObservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observation to fetch.
     */
    where?: ObservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Observations to fetch.
     */
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Observations.
     */
    cursor?: ObservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Observations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Observations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Observations.
     */
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * Observation findMany
   */
  export type ObservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter, which Observations to fetch.
     */
    where?: ObservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Observations to fetch.
     */
    orderBy?: ObservationOrderByWithRelationInput | ObservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Observations.
     */
    cursor?: ObservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Observations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Observations.
     */
    skip?: number
    distinct?: ObservationScalarFieldEnum | ObservationScalarFieldEnum[]
  }

  /**
   * Observation create
   */
  export type ObservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Observation.
     */
    data: XOR<ObservationCreateInput, ObservationUncheckedCreateInput>
  }

  /**
   * Observation createMany
   */
  export type ObservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Observations.
     */
    data: ObservationCreateManyInput | ObservationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Observation createManyAndReturn
   */
  export type ObservationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * The data used to create many Observations.
     */
    data: ObservationCreateManyInput | ObservationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Observation update
   */
  export type ObservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Observation.
     */
    data: XOR<ObservationUpdateInput, ObservationUncheckedUpdateInput>
    /**
     * Choose, which Observation to update.
     */
    where: ObservationWhereUniqueInput
  }

  /**
   * Observation updateMany
   */
  export type ObservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Observations.
     */
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyInput>
    /**
     * Filter which Observations to update
     */
    where?: ObservationWhereInput
    /**
     * Limit how many Observations to update.
     */
    limit?: number
  }

  /**
   * Observation updateManyAndReturn
   */
  export type ObservationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * The data used to update Observations.
     */
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyInput>
    /**
     * Filter which Observations to update
     */
    where?: ObservationWhereInput
    /**
     * Limit how many Observations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Observation upsert
   */
  export type ObservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Observation to update in case it exists.
     */
    where: ObservationWhereUniqueInput
    /**
     * In case the Observation found by the `where` argument doesn't exist, create a new Observation with this data.
     */
    create: XOR<ObservationCreateInput, ObservationUncheckedCreateInput>
    /**
     * In case the Observation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ObservationUpdateInput, ObservationUncheckedUpdateInput>
  }

  /**
   * Observation delete
   */
  export type ObservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    /**
     * Filter which Observation to delete.
     */
    where: ObservationWhereUniqueInput
  }

  /**
   * Observation deleteMany
   */
  export type ObservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Observations to delete
     */
    where?: ObservationWhereInput
    /**
     * Limit how many Observations to delete.
     */
    limit?: number
  }

  /**
   * Observation.files
   */
  export type Observation$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Observation.alerts
   */
  export type Observation$alertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    cursor?: AlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Observation without action
   */
  export type ObservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
  }


  /**
   * Model TreatmentTemplate
   */

  export type AggregateTreatmentTemplate = {
    _count: TreatmentTemplateCountAggregateOutputType | null
    _min: TreatmentTemplateMinAggregateOutputType | null
    _max: TreatmentTemplateMaxAggregateOutputType | null
  }

  export type TreatmentTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    studyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    studyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    protocol: number
    studyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TreatmentTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    studyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    studyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    protocol?: true
    studyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TreatmentTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentTemplate to aggregate.
     */
    where?: TreatmentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentTemplates to fetch.
     */
    orderBy?: TreatmentTemplateOrderByWithRelationInput | TreatmentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TreatmentTemplates
    **/
    _count?: true | TreatmentTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentTemplateMaxAggregateInputType
  }

  export type GetTreatmentTemplateAggregateType<T extends TreatmentTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatmentTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatmentTemplate[P]>
      : GetScalarType<T[P], AggregateTreatmentTemplate[P]>
  }




  export type TreatmentTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentTemplateWhereInput
    orderBy?: TreatmentTemplateOrderByWithAggregationInput | TreatmentTemplateOrderByWithAggregationInput[]
    by: TreatmentTemplateScalarFieldEnum[] | TreatmentTemplateScalarFieldEnum
    having?: TreatmentTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentTemplateCountAggregateInputType | true
    _min?: TreatmentTemplateMinAggregateInputType
    _max?: TreatmentTemplateMaxAggregateInputType
  }

  export type TreatmentTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    protocol: JsonValue | null
    studyId: string
    createdAt: Date
    updatedAt: Date
    _count: TreatmentTemplateCountAggregateOutputType | null
    _min: TreatmentTemplateMinAggregateOutputType | null
    _max: TreatmentTemplateMaxAggregateOutputType | null
  }

  type GetTreatmentTemplateGroupByPayload<T extends TreatmentTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentTemplateGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    protocol?: boolean
    studyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
    treatments?: boolean | TreatmentTemplate$treatmentsArgs<ExtArgs>
    _count?: boolean | TreatmentTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentTemplate"]>

  export type TreatmentTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    protocol?: boolean
    studyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentTemplate"]>

  export type TreatmentTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    protocol?: boolean
    studyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentTemplate"]>

  export type TreatmentTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    protocol?: boolean
    studyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TreatmentTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "protocol" | "studyId" | "createdAt" | "updatedAt", ExtArgs["result"]["treatmentTemplate"]>
  export type TreatmentTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
    treatments?: boolean | TreatmentTemplate$treatmentsArgs<ExtArgs>
    _count?: boolean | TreatmentTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TreatmentTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }
  export type TreatmentTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    study?: boolean | StudyDefaultArgs<ExtArgs>
  }

  export type $TreatmentTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TreatmentTemplate"
    objects: {
      study: Prisma.$StudyPayload<ExtArgs>
      treatments: Prisma.$TreatmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      protocol: Prisma.JsonValue | null
      studyId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["treatmentTemplate"]>
    composites: {}
  }

  type TreatmentTemplateGetPayload<S extends boolean | null | undefined | TreatmentTemplateDefaultArgs> = $Result.GetResult<Prisma.$TreatmentTemplatePayload, S>

  type TreatmentTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TreatmentTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TreatmentTemplateCountAggregateInputType | true
    }

  export interface TreatmentTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TreatmentTemplate'], meta: { name: 'TreatmentTemplate' } }
    /**
     * Find zero or one TreatmentTemplate that matches the filter.
     * @param {TreatmentTemplateFindUniqueArgs} args - Arguments to find a TreatmentTemplate
     * @example
     * // Get one TreatmentTemplate
     * const treatmentTemplate = await prisma.treatmentTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentTemplateFindUniqueArgs>(args: SelectSubset<T, TreatmentTemplateFindUniqueArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TreatmentTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TreatmentTemplateFindUniqueOrThrowArgs} args - Arguments to find a TreatmentTemplate
     * @example
     * // Get one TreatmentTemplate
     * const treatmentTemplate = await prisma.treatmentTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TreatmentTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentTemplateFindFirstArgs} args - Arguments to find a TreatmentTemplate
     * @example
     * // Get one TreatmentTemplate
     * const treatmentTemplate = await prisma.treatmentTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentTemplateFindFirstArgs>(args?: SelectSubset<T, TreatmentTemplateFindFirstArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TreatmentTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentTemplateFindFirstOrThrowArgs} args - Arguments to find a TreatmentTemplate
     * @example
     * // Get one TreatmentTemplate
     * const treatmentTemplate = await prisma.treatmentTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TreatmentTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TreatmentTemplates
     * const treatmentTemplates = await prisma.treatmentTemplate.findMany()
     * 
     * // Get first 10 TreatmentTemplates
     * const treatmentTemplates = await prisma.treatmentTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentTemplateWithIdOnly = await prisma.treatmentTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentTemplateFindManyArgs>(args?: SelectSubset<T, TreatmentTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TreatmentTemplate.
     * @param {TreatmentTemplateCreateArgs} args - Arguments to create a TreatmentTemplate.
     * @example
     * // Create one TreatmentTemplate
     * const TreatmentTemplate = await prisma.treatmentTemplate.create({
     *   data: {
     *     // ... data to create a TreatmentTemplate
     *   }
     * })
     * 
     */
    create<T extends TreatmentTemplateCreateArgs>(args: SelectSubset<T, TreatmentTemplateCreateArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TreatmentTemplates.
     * @param {TreatmentTemplateCreateManyArgs} args - Arguments to create many TreatmentTemplates.
     * @example
     * // Create many TreatmentTemplates
     * const treatmentTemplate = await prisma.treatmentTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentTemplateCreateManyArgs>(args?: SelectSubset<T, TreatmentTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TreatmentTemplates and returns the data saved in the database.
     * @param {TreatmentTemplateCreateManyAndReturnArgs} args - Arguments to create many TreatmentTemplates.
     * @example
     * // Create many TreatmentTemplates
     * const treatmentTemplate = await prisma.treatmentTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TreatmentTemplates and only return the `id`
     * const treatmentTemplateWithIdOnly = await prisma.treatmentTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreatmentTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, TreatmentTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TreatmentTemplate.
     * @param {TreatmentTemplateDeleteArgs} args - Arguments to delete one TreatmentTemplate.
     * @example
     * // Delete one TreatmentTemplate
     * const TreatmentTemplate = await prisma.treatmentTemplate.delete({
     *   where: {
     *     // ... filter to delete one TreatmentTemplate
     *   }
     * })
     * 
     */
    delete<T extends TreatmentTemplateDeleteArgs>(args: SelectSubset<T, TreatmentTemplateDeleteArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TreatmentTemplate.
     * @param {TreatmentTemplateUpdateArgs} args - Arguments to update one TreatmentTemplate.
     * @example
     * // Update one TreatmentTemplate
     * const treatmentTemplate = await prisma.treatmentTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentTemplateUpdateArgs>(args: SelectSubset<T, TreatmentTemplateUpdateArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TreatmentTemplates.
     * @param {TreatmentTemplateDeleteManyArgs} args - Arguments to filter TreatmentTemplates to delete.
     * @example
     * // Delete a few TreatmentTemplates
     * const { count } = await prisma.treatmentTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentTemplateDeleteManyArgs>(args?: SelectSubset<T, TreatmentTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreatmentTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TreatmentTemplates
     * const treatmentTemplate = await prisma.treatmentTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentTemplateUpdateManyArgs>(args: SelectSubset<T, TreatmentTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreatmentTemplates and returns the data updated in the database.
     * @param {TreatmentTemplateUpdateManyAndReturnArgs} args - Arguments to update many TreatmentTemplates.
     * @example
     * // Update many TreatmentTemplates
     * const treatmentTemplate = await prisma.treatmentTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TreatmentTemplates and only return the `id`
     * const treatmentTemplateWithIdOnly = await prisma.treatmentTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TreatmentTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, TreatmentTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TreatmentTemplate.
     * @param {TreatmentTemplateUpsertArgs} args - Arguments to update or create a TreatmentTemplate.
     * @example
     * // Update or create a TreatmentTemplate
     * const treatmentTemplate = await prisma.treatmentTemplate.upsert({
     *   create: {
     *     // ... data to create a TreatmentTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TreatmentTemplate we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentTemplateUpsertArgs>(args: SelectSubset<T, TreatmentTemplateUpsertArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TreatmentTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentTemplateCountArgs} args - Arguments to filter TreatmentTemplates to count.
     * @example
     * // Count the number of TreatmentTemplates
     * const count = await prisma.treatmentTemplate.count({
     *   where: {
     *     // ... the filter for the TreatmentTemplates we want to count
     *   }
     * })
    **/
    count<T extends TreatmentTemplateCountArgs>(
      args?: Subset<T, TreatmentTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TreatmentTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentTemplateAggregateArgs>(args: Subset<T, TreatmentTemplateAggregateArgs>): Prisma.PrismaPromise<GetTreatmentTemplateAggregateType<T>>

    /**
     * Group by TreatmentTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentTemplateGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TreatmentTemplate model
   */
  readonly fields: TreatmentTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TreatmentTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    study<T extends StudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyDefaultArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    treatments<T extends TreatmentTemplate$treatmentsArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentTemplate$treatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TreatmentTemplate model
   */
  interface TreatmentTemplateFieldRefs {
    readonly id: FieldRef<"TreatmentTemplate", 'String'>
    readonly name: FieldRef<"TreatmentTemplate", 'String'>
    readonly description: FieldRef<"TreatmentTemplate", 'String'>
    readonly protocol: FieldRef<"TreatmentTemplate", 'Json'>
    readonly studyId: FieldRef<"TreatmentTemplate", 'String'>
    readonly createdAt: FieldRef<"TreatmentTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"TreatmentTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TreatmentTemplate findUnique
   */
  export type TreatmentTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentTemplate to fetch.
     */
    where: TreatmentTemplateWhereUniqueInput
  }

  /**
   * TreatmentTemplate findUniqueOrThrow
   */
  export type TreatmentTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentTemplate to fetch.
     */
    where: TreatmentTemplateWhereUniqueInput
  }

  /**
   * TreatmentTemplate findFirst
   */
  export type TreatmentTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentTemplate to fetch.
     */
    where?: TreatmentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentTemplates to fetch.
     */
    orderBy?: TreatmentTemplateOrderByWithRelationInput | TreatmentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentTemplates.
     */
    cursor?: TreatmentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentTemplates.
     */
    distinct?: TreatmentTemplateScalarFieldEnum | TreatmentTemplateScalarFieldEnum[]
  }

  /**
   * TreatmentTemplate findFirstOrThrow
   */
  export type TreatmentTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentTemplate to fetch.
     */
    where?: TreatmentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentTemplates to fetch.
     */
    orderBy?: TreatmentTemplateOrderByWithRelationInput | TreatmentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentTemplates.
     */
    cursor?: TreatmentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentTemplates.
     */
    distinct?: TreatmentTemplateScalarFieldEnum | TreatmentTemplateScalarFieldEnum[]
  }

  /**
   * TreatmentTemplate findMany
   */
  export type TreatmentTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentTemplates to fetch.
     */
    where?: TreatmentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentTemplates to fetch.
     */
    orderBy?: TreatmentTemplateOrderByWithRelationInput | TreatmentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TreatmentTemplates.
     */
    cursor?: TreatmentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentTemplates.
     */
    skip?: number
    distinct?: TreatmentTemplateScalarFieldEnum | TreatmentTemplateScalarFieldEnum[]
  }

  /**
   * TreatmentTemplate create
   */
  export type TreatmentTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a TreatmentTemplate.
     */
    data: XOR<TreatmentTemplateCreateInput, TreatmentTemplateUncheckedCreateInput>
  }

  /**
   * TreatmentTemplate createMany
   */
  export type TreatmentTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TreatmentTemplates.
     */
    data: TreatmentTemplateCreateManyInput | TreatmentTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TreatmentTemplate createManyAndReturn
   */
  export type TreatmentTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many TreatmentTemplates.
     */
    data: TreatmentTemplateCreateManyInput | TreatmentTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TreatmentTemplate update
   */
  export type TreatmentTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a TreatmentTemplate.
     */
    data: XOR<TreatmentTemplateUpdateInput, TreatmentTemplateUncheckedUpdateInput>
    /**
     * Choose, which TreatmentTemplate to update.
     */
    where: TreatmentTemplateWhereUniqueInput
  }

  /**
   * TreatmentTemplate updateMany
   */
  export type TreatmentTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TreatmentTemplates.
     */
    data: XOR<TreatmentTemplateUpdateManyMutationInput, TreatmentTemplateUncheckedUpdateManyInput>
    /**
     * Filter which TreatmentTemplates to update
     */
    where?: TreatmentTemplateWhereInput
    /**
     * Limit how many TreatmentTemplates to update.
     */
    limit?: number
  }

  /**
   * TreatmentTemplate updateManyAndReturn
   */
  export type TreatmentTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * The data used to update TreatmentTemplates.
     */
    data: XOR<TreatmentTemplateUpdateManyMutationInput, TreatmentTemplateUncheckedUpdateManyInput>
    /**
     * Filter which TreatmentTemplates to update
     */
    where?: TreatmentTemplateWhereInput
    /**
     * Limit how many TreatmentTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TreatmentTemplate upsert
   */
  export type TreatmentTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the TreatmentTemplate to update in case it exists.
     */
    where: TreatmentTemplateWhereUniqueInput
    /**
     * In case the TreatmentTemplate found by the `where` argument doesn't exist, create a new TreatmentTemplate with this data.
     */
    create: XOR<TreatmentTemplateCreateInput, TreatmentTemplateUncheckedCreateInput>
    /**
     * In case the TreatmentTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentTemplateUpdateInput, TreatmentTemplateUncheckedUpdateInput>
  }

  /**
   * TreatmentTemplate delete
   */
  export type TreatmentTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    /**
     * Filter which TreatmentTemplate to delete.
     */
    where: TreatmentTemplateWhereUniqueInput
  }

  /**
   * TreatmentTemplate deleteMany
   */
  export type TreatmentTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentTemplates to delete
     */
    where?: TreatmentTemplateWhereInput
    /**
     * Limit how many TreatmentTemplates to delete.
     */
    limit?: number
  }

  /**
   * TreatmentTemplate.treatments
   */
  export type TreatmentTemplate$treatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    cursor?: TreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * TreatmentTemplate without action
   */
  export type TreatmentTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Treatment
   */

  export type AggregateTreatment = {
    _count: TreatmentCountAggregateOutputType | null
    _min: TreatmentMinAggregateOutputType | null
    _max: TreatmentMaxAggregateOutputType | null
  }

  export type TreatmentMinAggregateOutputType = {
    id: string | null
    templateId: string | null
    patientId: string | null
    studyPatientId: string | null
    createdById: string | null
    createdAt: Date | null
    administeredAt: Date | null
    name: string | null
    description: string | null
    dosage: string | null
    notes: string | null
  }

  export type TreatmentMaxAggregateOutputType = {
    id: string | null
    templateId: string | null
    patientId: string | null
    studyPatientId: string | null
    createdById: string | null
    createdAt: Date | null
    administeredAt: Date | null
    name: string | null
    description: string | null
    dosage: string | null
    notes: string | null
  }

  export type TreatmentCountAggregateOutputType = {
    id: number
    templateId: number
    patientId: number
    studyPatientId: number
    createdById: number
    createdAt: number
    administeredAt: number
    name: number
    description: number
    dosage: number
    notes: number
    _all: number
  }


  export type TreatmentMinAggregateInputType = {
    id?: true
    templateId?: true
    patientId?: true
    studyPatientId?: true
    createdById?: true
    createdAt?: true
    administeredAt?: true
    name?: true
    description?: true
    dosage?: true
    notes?: true
  }

  export type TreatmentMaxAggregateInputType = {
    id?: true
    templateId?: true
    patientId?: true
    studyPatientId?: true
    createdById?: true
    createdAt?: true
    administeredAt?: true
    name?: true
    description?: true
    dosage?: true
    notes?: true
  }

  export type TreatmentCountAggregateInputType = {
    id?: true
    templateId?: true
    patientId?: true
    studyPatientId?: true
    createdById?: true
    createdAt?: true
    administeredAt?: true
    name?: true
    description?: true
    dosage?: true
    notes?: true
    _all?: true
  }

  export type TreatmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treatment to aggregate.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Treatments
    **/
    _count?: true | TreatmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentMaxAggregateInputType
  }

  export type GetTreatmentAggregateType<T extends TreatmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatment[P]>
      : GetScalarType<T[P], AggregateTreatment[P]>
  }




  export type TreatmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithAggregationInput | TreatmentOrderByWithAggregationInput[]
    by: TreatmentScalarFieldEnum[] | TreatmentScalarFieldEnum
    having?: TreatmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentCountAggregateInputType | true
    _min?: TreatmentMinAggregateInputType
    _max?: TreatmentMaxAggregateInputType
  }

  export type TreatmentGroupByOutputType = {
    id: string
    templateId: string | null
    patientId: string
    studyPatientId: string
    createdById: string
    createdAt: Date
    administeredAt: Date
    name: string
    description: string | null
    dosage: string | null
    notes: string | null
    _count: TreatmentCountAggregateOutputType | null
    _min: TreatmentMinAggregateOutputType | null
    _max: TreatmentMaxAggregateOutputType | null
  }

  type GetTreatmentGroupByPayload<T extends TreatmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    patientId?: boolean
    studyPatientId?: boolean
    createdById?: boolean
    createdAt?: boolean
    administeredAt?: boolean
    name?: boolean
    description?: boolean
    dosage?: boolean
    notes?: boolean
    template?: boolean | Treatment$templateArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    files?: boolean | Treatment$filesArgs<ExtArgs>
    _count?: boolean | TreatmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>

  export type TreatmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    patientId?: boolean
    studyPatientId?: boolean
    createdById?: boolean
    createdAt?: boolean
    administeredAt?: boolean
    name?: boolean
    description?: boolean
    dosage?: boolean
    notes?: boolean
    template?: boolean | Treatment$templateArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>

  export type TreatmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    patientId?: boolean
    studyPatientId?: boolean
    createdById?: boolean
    createdAt?: boolean
    administeredAt?: boolean
    name?: boolean
    description?: boolean
    dosage?: boolean
    notes?: boolean
    template?: boolean | Treatment$templateArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>

  export type TreatmentSelectScalar = {
    id?: boolean
    templateId?: boolean
    patientId?: boolean
    studyPatientId?: boolean
    createdById?: boolean
    createdAt?: boolean
    administeredAt?: boolean
    name?: boolean
    description?: boolean
    dosage?: boolean
    notes?: boolean
  }

  export type TreatmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "templateId" | "patientId" | "studyPatientId" | "createdById" | "createdAt" | "administeredAt" | "name" | "description" | "dosage" | "notes", ExtArgs["result"]["treatment"]>
  export type TreatmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | Treatment$templateArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    files?: boolean | Treatment$filesArgs<ExtArgs>
    _count?: boolean | TreatmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TreatmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | Treatment$templateArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TreatmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | Treatment$templateArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    studyPatient?: boolean | StudyPatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TreatmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Treatment"
    objects: {
      template: Prisma.$TreatmentTemplatePayload<ExtArgs> | null
      patient: Prisma.$PatientPayload<ExtArgs>
      studyPatient: Prisma.$StudyPatientPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      files: Prisma.$FilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      templateId: string | null
      patientId: string
      studyPatientId: string
      createdById: string
      createdAt: Date
      administeredAt: Date
      name: string
      description: string | null
      dosage: string | null
      notes: string | null
    }, ExtArgs["result"]["treatment"]>
    composites: {}
  }

  type TreatmentGetPayload<S extends boolean | null | undefined | TreatmentDefaultArgs> = $Result.GetResult<Prisma.$TreatmentPayload, S>

  type TreatmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TreatmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TreatmentCountAggregateInputType | true
    }

  export interface TreatmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Treatment'], meta: { name: 'Treatment' } }
    /**
     * Find zero or one Treatment that matches the filter.
     * @param {TreatmentFindUniqueArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentFindUniqueArgs>(args: SelectSubset<T, TreatmentFindUniqueArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Treatment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TreatmentFindUniqueOrThrowArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Treatment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindFirstArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentFindFirstArgs>(args?: SelectSubset<T, TreatmentFindFirstArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Treatment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindFirstOrThrowArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Treatments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Treatments
     * const treatments = await prisma.treatment.findMany()
     * 
     * // Get first 10 Treatments
     * const treatments = await prisma.treatment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentWithIdOnly = await prisma.treatment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentFindManyArgs>(args?: SelectSubset<T, TreatmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Treatment.
     * @param {TreatmentCreateArgs} args - Arguments to create a Treatment.
     * @example
     * // Create one Treatment
     * const Treatment = await prisma.treatment.create({
     *   data: {
     *     // ... data to create a Treatment
     *   }
     * })
     * 
     */
    create<T extends TreatmentCreateArgs>(args: SelectSubset<T, TreatmentCreateArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Treatments.
     * @param {TreatmentCreateManyArgs} args - Arguments to create many Treatments.
     * @example
     * // Create many Treatments
     * const treatment = await prisma.treatment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentCreateManyArgs>(args?: SelectSubset<T, TreatmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Treatments and returns the data saved in the database.
     * @param {TreatmentCreateManyAndReturnArgs} args - Arguments to create many Treatments.
     * @example
     * // Create many Treatments
     * const treatment = await prisma.treatment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Treatments and only return the `id`
     * const treatmentWithIdOnly = await prisma.treatment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreatmentCreateManyAndReturnArgs>(args?: SelectSubset<T, TreatmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Treatment.
     * @param {TreatmentDeleteArgs} args - Arguments to delete one Treatment.
     * @example
     * // Delete one Treatment
     * const Treatment = await prisma.treatment.delete({
     *   where: {
     *     // ... filter to delete one Treatment
     *   }
     * })
     * 
     */
    delete<T extends TreatmentDeleteArgs>(args: SelectSubset<T, TreatmentDeleteArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Treatment.
     * @param {TreatmentUpdateArgs} args - Arguments to update one Treatment.
     * @example
     * // Update one Treatment
     * const treatment = await prisma.treatment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentUpdateArgs>(args: SelectSubset<T, TreatmentUpdateArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Treatments.
     * @param {TreatmentDeleteManyArgs} args - Arguments to filter Treatments to delete.
     * @example
     * // Delete a few Treatments
     * const { count } = await prisma.treatment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentDeleteManyArgs>(args?: SelectSubset<T, TreatmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Treatments
     * const treatment = await prisma.treatment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentUpdateManyArgs>(args: SelectSubset<T, TreatmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treatments and returns the data updated in the database.
     * @param {TreatmentUpdateManyAndReturnArgs} args - Arguments to update many Treatments.
     * @example
     * // Update many Treatments
     * const treatment = await prisma.treatment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Treatments and only return the `id`
     * const treatmentWithIdOnly = await prisma.treatment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TreatmentUpdateManyAndReturnArgs>(args: SelectSubset<T, TreatmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Treatment.
     * @param {TreatmentUpsertArgs} args - Arguments to update or create a Treatment.
     * @example
     * // Update or create a Treatment
     * const treatment = await prisma.treatment.upsert({
     *   create: {
     *     // ... data to create a Treatment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Treatment we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentUpsertArgs>(args: SelectSubset<T, TreatmentUpsertArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Treatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentCountArgs} args - Arguments to filter Treatments to count.
     * @example
     * // Count the number of Treatments
     * const count = await prisma.treatment.count({
     *   where: {
     *     // ... the filter for the Treatments we want to count
     *   }
     * })
    **/
    count<T extends TreatmentCountArgs>(
      args?: Subset<T, TreatmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Treatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentAggregateArgs>(args: Subset<T, TreatmentAggregateArgs>): Prisma.PrismaPromise<GetTreatmentAggregateType<T>>

    /**
     * Group by Treatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Treatment model
   */
  readonly fields: TreatmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Treatment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends Treatment$templateArgs<ExtArgs> = {}>(args?: Subset<T, Treatment$templateArgs<ExtArgs>>): Prisma__TreatmentTemplateClient<$Result.GetResult<Prisma.$TreatmentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studyPatient<T extends StudyPatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyPatientDefaultArgs<ExtArgs>>): Prisma__StudyPatientClient<$Result.GetResult<Prisma.$StudyPatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    files<T extends Treatment$filesArgs<ExtArgs> = {}>(args?: Subset<T, Treatment$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Treatment model
   */
  interface TreatmentFieldRefs {
    readonly id: FieldRef<"Treatment", 'String'>
    readonly templateId: FieldRef<"Treatment", 'String'>
    readonly patientId: FieldRef<"Treatment", 'String'>
    readonly studyPatientId: FieldRef<"Treatment", 'String'>
    readonly createdById: FieldRef<"Treatment", 'String'>
    readonly createdAt: FieldRef<"Treatment", 'DateTime'>
    readonly administeredAt: FieldRef<"Treatment", 'DateTime'>
    readonly name: FieldRef<"Treatment", 'String'>
    readonly description: FieldRef<"Treatment", 'String'>
    readonly dosage: FieldRef<"Treatment", 'String'>
    readonly notes: FieldRef<"Treatment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Treatment findUnique
   */
  export type TreatmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment findUniqueOrThrow
   */
  export type TreatmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment findFirst
   */
  export type TreatmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treatments.
     */
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment findFirstOrThrow
   */
  export type TreatmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treatments.
     */
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment findMany
   */
  export type TreatmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatments to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment create
   */
  export type TreatmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Treatment.
     */
    data: XOR<TreatmentCreateInput, TreatmentUncheckedCreateInput>
  }

  /**
   * Treatment createMany
   */
  export type TreatmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Treatments.
     */
    data: TreatmentCreateManyInput | TreatmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Treatment createManyAndReturn
   */
  export type TreatmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * The data used to create many Treatments.
     */
    data: TreatmentCreateManyInput | TreatmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Treatment update
   */
  export type TreatmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Treatment.
     */
    data: XOR<TreatmentUpdateInput, TreatmentUncheckedUpdateInput>
    /**
     * Choose, which Treatment to update.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment updateMany
   */
  export type TreatmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Treatments.
     */
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyInput>
    /**
     * Filter which Treatments to update
     */
    where?: TreatmentWhereInput
    /**
     * Limit how many Treatments to update.
     */
    limit?: number
  }

  /**
   * Treatment updateManyAndReturn
   */
  export type TreatmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * The data used to update Treatments.
     */
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyInput>
    /**
     * Filter which Treatments to update
     */
    where?: TreatmentWhereInput
    /**
     * Limit how many Treatments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Treatment upsert
   */
  export type TreatmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Treatment to update in case it exists.
     */
    where: TreatmentWhereUniqueInput
    /**
     * In case the Treatment found by the `where` argument doesn't exist, create a new Treatment with this data.
     */
    create: XOR<TreatmentCreateInput, TreatmentUncheckedCreateInput>
    /**
     * In case the Treatment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentUpdateInput, TreatmentUncheckedUpdateInput>
  }

  /**
   * Treatment delete
   */
  export type TreatmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter which Treatment to delete.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment deleteMany
   */
  export type TreatmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treatments to delete
     */
    where?: TreatmentWhereInput
    /**
     * Limit how many Treatments to delete.
     */
    limit?: number
  }

  /**
   * Treatment.template
   */
  export type Treatment$templateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentTemplate
     */
    select?: TreatmentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TreatmentTemplate
     */
    omit?: TreatmentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentTemplateInclude<ExtArgs> | null
    where?: TreatmentTemplateWhereInput
  }

  /**
   * Treatment.files
   */
  export type Treatment$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Treatment without action
   */
  export type TreatmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
  }


  /**
   * Model AlertThreshold
   */

  export type AggregateAlertThreshold = {
    _count: AlertThresholdCountAggregateOutputType | null
    _min: AlertThresholdMinAggregateOutputType | null
    _max: AlertThresholdMaxAggregateOutputType | null
  }

  export type AlertThresholdMinAggregateOutputType = {
    id: string | null
    symptomTemplateId: string | null
    condition: string | null
    severity: $Enums.AlertSeverity | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlertThresholdMaxAggregateOutputType = {
    id: string | null
    symptomTemplateId: string | null
    condition: string | null
    severity: $Enums.AlertSeverity | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlertThresholdCountAggregateOutputType = {
    id: number
    symptomTemplateId: number
    condition: number
    severity: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlertThresholdMinAggregateInputType = {
    id?: true
    symptomTemplateId?: true
    condition?: true
    severity?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlertThresholdMaxAggregateInputType = {
    id?: true
    symptomTemplateId?: true
    condition?: true
    severity?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlertThresholdCountAggregateInputType = {
    id?: true
    symptomTemplateId?: true
    condition?: true
    severity?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlertThresholdAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlertThreshold to aggregate.
     */
    where?: AlertThresholdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertThresholds to fetch.
     */
    orderBy?: AlertThresholdOrderByWithRelationInput | AlertThresholdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertThresholdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertThresholds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertThresholds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlertThresholds
    **/
    _count?: true | AlertThresholdCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertThresholdMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertThresholdMaxAggregateInputType
  }

  export type GetAlertThresholdAggregateType<T extends AlertThresholdAggregateArgs> = {
        [P in keyof T & keyof AggregateAlertThreshold]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlertThreshold[P]>
      : GetScalarType<T[P], AggregateAlertThreshold[P]>
  }




  export type AlertThresholdGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertThresholdWhereInput
    orderBy?: AlertThresholdOrderByWithAggregationInput | AlertThresholdOrderByWithAggregationInput[]
    by: AlertThresholdScalarFieldEnum[] | AlertThresholdScalarFieldEnum
    having?: AlertThresholdScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertThresholdCountAggregateInputType | true
    _min?: AlertThresholdMinAggregateInputType
    _max?: AlertThresholdMaxAggregateInputType
  }

  export type AlertThresholdGroupByOutputType = {
    id: string
    symptomTemplateId: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt: Date
    updatedAt: Date
    _count: AlertThresholdCountAggregateOutputType | null
    _min: AlertThresholdMinAggregateOutputType | null
    _max: AlertThresholdMaxAggregateOutputType | null
  }

  type GetAlertThresholdGroupByPayload<T extends AlertThresholdGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertThresholdGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertThresholdGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertThresholdGroupByOutputType[P]>
            : GetScalarType<T[P], AlertThresholdGroupByOutputType[P]>
        }
      >
    >


  export type AlertThresholdSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symptomTemplateId?: boolean
    condition?: boolean
    severity?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
    alerts?: boolean | AlertThreshold$alertsArgs<ExtArgs>
    _count?: boolean | AlertThresholdCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alertThreshold"]>

  export type AlertThresholdSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symptomTemplateId?: boolean
    condition?: boolean
    severity?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alertThreshold"]>

  export type AlertThresholdSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symptomTemplateId?: boolean
    condition?: boolean
    severity?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alertThreshold"]>

  export type AlertThresholdSelectScalar = {
    id?: boolean
    symptomTemplateId?: boolean
    condition?: boolean
    severity?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AlertThresholdOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symptomTemplateId" | "condition" | "severity" | "message" | "createdAt" | "updatedAt", ExtArgs["result"]["alertThreshold"]>
  export type AlertThresholdInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
    alerts?: boolean | AlertThreshold$alertsArgs<ExtArgs>
    _count?: boolean | AlertThresholdCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlertThresholdIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
  }
  export type AlertThresholdIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    symptomTemplate?: boolean | SymptomTemplateDefaultArgs<ExtArgs>
  }

  export type $AlertThresholdPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlertThreshold"
    objects: {
      symptomTemplate: Prisma.$SymptomTemplatePayload<ExtArgs>
      alerts: Prisma.$AlertPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symptomTemplateId: string
      condition: string
      severity: $Enums.AlertSeverity
      message: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["alertThreshold"]>
    composites: {}
  }

  type AlertThresholdGetPayload<S extends boolean | null | undefined | AlertThresholdDefaultArgs> = $Result.GetResult<Prisma.$AlertThresholdPayload, S>

  type AlertThresholdCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlertThresholdFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlertThresholdCountAggregateInputType | true
    }

  export interface AlertThresholdDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlertThreshold'], meta: { name: 'AlertThreshold' } }
    /**
     * Find zero or one AlertThreshold that matches the filter.
     * @param {AlertThresholdFindUniqueArgs} args - Arguments to find a AlertThreshold
     * @example
     * // Get one AlertThreshold
     * const alertThreshold = await prisma.alertThreshold.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertThresholdFindUniqueArgs>(args: SelectSubset<T, AlertThresholdFindUniqueArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AlertThreshold that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlertThresholdFindUniqueOrThrowArgs} args - Arguments to find a AlertThreshold
     * @example
     * // Get one AlertThreshold
     * const alertThreshold = await prisma.alertThreshold.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertThresholdFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertThresholdFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlertThreshold that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertThresholdFindFirstArgs} args - Arguments to find a AlertThreshold
     * @example
     * // Get one AlertThreshold
     * const alertThreshold = await prisma.alertThreshold.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertThresholdFindFirstArgs>(args?: SelectSubset<T, AlertThresholdFindFirstArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlertThreshold that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertThresholdFindFirstOrThrowArgs} args - Arguments to find a AlertThreshold
     * @example
     * // Get one AlertThreshold
     * const alertThreshold = await prisma.alertThreshold.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertThresholdFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertThresholdFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AlertThresholds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertThresholdFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlertThresholds
     * const alertThresholds = await prisma.alertThreshold.findMany()
     * 
     * // Get first 10 AlertThresholds
     * const alertThresholds = await prisma.alertThreshold.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertThresholdWithIdOnly = await prisma.alertThreshold.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertThresholdFindManyArgs>(args?: SelectSubset<T, AlertThresholdFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AlertThreshold.
     * @param {AlertThresholdCreateArgs} args - Arguments to create a AlertThreshold.
     * @example
     * // Create one AlertThreshold
     * const AlertThreshold = await prisma.alertThreshold.create({
     *   data: {
     *     // ... data to create a AlertThreshold
     *   }
     * })
     * 
     */
    create<T extends AlertThresholdCreateArgs>(args: SelectSubset<T, AlertThresholdCreateArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AlertThresholds.
     * @param {AlertThresholdCreateManyArgs} args - Arguments to create many AlertThresholds.
     * @example
     * // Create many AlertThresholds
     * const alertThreshold = await prisma.alertThreshold.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertThresholdCreateManyArgs>(args?: SelectSubset<T, AlertThresholdCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AlertThresholds and returns the data saved in the database.
     * @param {AlertThresholdCreateManyAndReturnArgs} args - Arguments to create many AlertThresholds.
     * @example
     * // Create many AlertThresholds
     * const alertThreshold = await prisma.alertThreshold.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AlertThresholds and only return the `id`
     * const alertThresholdWithIdOnly = await prisma.alertThreshold.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlertThresholdCreateManyAndReturnArgs>(args?: SelectSubset<T, AlertThresholdCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AlertThreshold.
     * @param {AlertThresholdDeleteArgs} args - Arguments to delete one AlertThreshold.
     * @example
     * // Delete one AlertThreshold
     * const AlertThreshold = await prisma.alertThreshold.delete({
     *   where: {
     *     // ... filter to delete one AlertThreshold
     *   }
     * })
     * 
     */
    delete<T extends AlertThresholdDeleteArgs>(args: SelectSubset<T, AlertThresholdDeleteArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AlertThreshold.
     * @param {AlertThresholdUpdateArgs} args - Arguments to update one AlertThreshold.
     * @example
     * // Update one AlertThreshold
     * const alertThreshold = await prisma.alertThreshold.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertThresholdUpdateArgs>(args: SelectSubset<T, AlertThresholdUpdateArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AlertThresholds.
     * @param {AlertThresholdDeleteManyArgs} args - Arguments to filter AlertThresholds to delete.
     * @example
     * // Delete a few AlertThresholds
     * const { count } = await prisma.alertThreshold.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertThresholdDeleteManyArgs>(args?: SelectSubset<T, AlertThresholdDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlertThresholds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertThresholdUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlertThresholds
     * const alertThreshold = await prisma.alertThreshold.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertThresholdUpdateManyArgs>(args: SelectSubset<T, AlertThresholdUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlertThresholds and returns the data updated in the database.
     * @param {AlertThresholdUpdateManyAndReturnArgs} args - Arguments to update many AlertThresholds.
     * @example
     * // Update many AlertThresholds
     * const alertThreshold = await prisma.alertThreshold.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AlertThresholds and only return the `id`
     * const alertThresholdWithIdOnly = await prisma.alertThreshold.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlertThresholdUpdateManyAndReturnArgs>(args: SelectSubset<T, AlertThresholdUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AlertThreshold.
     * @param {AlertThresholdUpsertArgs} args - Arguments to update or create a AlertThreshold.
     * @example
     * // Update or create a AlertThreshold
     * const alertThreshold = await prisma.alertThreshold.upsert({
     *   create: {
     *     // ... data to create a AlertThreshold
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlertThreshold we want to update
     *   }
     * })
     */
    upsert<T extends AlertThresholdUpsertArgs>(args: SelectSubset<T, AlertThresholdUpsertArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AlertThresholds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertThresholdCountArgs} args - Arguments to filter AlertThresholds to count.
     * @example
     * // Count the number of AlertThresholds
     * const count = await prisma.alertThreshold.count({
     *   where: {
     *     // ... the filter for the AlertThresholds we want to count
     *   }
     * })
    **/
    count<T extends AlertThresholdCountArgs>(
      args?: Subset<T, AlertThresholdCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertThresholdCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlertThreshold.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertThresholdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertThresholdAggregateArgs>(args: Subset<T, AlertThresholdAggregateArgs>): Prisma.PrismaPromise<GetAlertThresholdAggregateType<T>>

    /**
     * Group by AlertThreshold.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertThresholdGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertThresholdGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertThresholdGroupByArgs['orderBy'] }
        : { orderBy?: AlertThresholdGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertThresholdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertThresholdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlertThreshold model
   */
  readonly fields: AlertThresholdFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlertThreshold.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertThresholdClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    symptomTemplate<T extends SymptomTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SymptomTemplateDefaultArgs<ExtArgs>>): Prisma__SymptomTemplateClient<$Result.GetResult<Prisma.$SymptomTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    alerts<T extends AlertThreshold$alertsArgs<ExtArgs> = {}>(args?: Subset<T, AlertThreshold$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlertThreshold model
   */
  interface AlertThresholdFieldRefs {
    readonly id: FieldRef<"AlertThreshold", 'String'>
    readonly symptomTemplateId: FieldRef<"AlertThreshold", 'String'>
    readonly condition: FieldRef<"AlertThreshold", 'String'>
    readonly severity: FieldRef<"AlertThreshold", 'AlertSeverity'>
    readonly message: FieldRef<"AlertThreshold", 'String'>
    readonly createdAt: FieldRef<"AlertThreshold", 'DateTime'>
    readonly updatedAt: FieldRef<"AlertThreshold", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AlertThreshold findUnique
   */
  export type AlertThresholdFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * Filter, which AlertThreshold to fetch.
     */
    where: AlertThresholdWhereUniqueInput
  }

  /**
   * AlertThreshold findUniqueOrThrow
   */
  export type AlertThresholdFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * Filter, which AlertThreshold to fetch.
     */
    where: AlertThresholdWhereUniqueInput
  }

  /**
   * AlertThreshold findFirst
   */
  export type AlertThresholdFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * Filter, which AlertThreshold to fetch.
     */
    where?: AlertThresholdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertThresholds to fetch.
     */
    orderBy?: AlertThresholdOrderByWithRelationInput | AlertThresholdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlertThresholds.
     */
    cursor?: AlertThresholdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertThresholds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertThresholds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlertThresholds.
     */
    distinct?: AlertThresholdScalarFieldEnum | AlertThresholdScalarFieldEnum[]
  }

  /**
   * AlertThreshold findFirstOrThrow
   */
  export type AlertThresholdFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * Filter, which AlertThreshold to fetch.
     */
    where?: AlertThresholdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertThresholds to fetch.
     */
    orderBy?: AlertThresholdOrderByWithRelationInput | AlertThresholdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlertThresholds.
     */
    cursor?: AlertThresholdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertThresholds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertThresholds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlertThresholds.
     */
    distinct?: AlertThresholdScalarFieldEnum | AlertThresholdScalarFieldEnum[]
  }

  /**
   * AlertThreshold findMany
   */
  export type AlertThresholdFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * Filter, which AlertThresholds to fetch.
     */
    where?: AlertThresholdWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlertThresholds to fetch.
     */
    orderBy?: AlertThresholdOrderByWithRelationInput | AlertThresholdOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlertThresholds.
     */
    cursor?: AlertThresholdWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlertThresholds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlertThresholds.
     */
    skip?: number
    distinct?: AlertThresholdScalarFieldEnum | AlertThresholdScalarFieldEnum[]
  }

  /**
   * AlertThreshold create
   */
  export type AlertThresholdCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * The data needed to create a AlertThreshold.
     */
    data: XOR<AlertThresholdCreateInput, AlertThresholdUncheckedCreateInput>
  }

  /**
   * AlertThreshold createMany
   */
  export type AlertThresholdCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlertThresholds.
     */
    data: AlertThresholdCreateManyInput | AlertThresholdCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AlertThreshold createManyAndReturn
   */
  export type AlertThresholdCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * The data used to create many AlertThresholds.
     */
    data: AlertThresholdCreateManyInput | AlertThresholdCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlertThreshold update
   */
  export type AlertThresholdUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * The data needed to update a AlertThreshold.
     */
    data: XOR<AlertThresholdUpdateInput, AlertThresholdUncheckedUpdateInput>
    /**
     * Choose, which AlertThreshold to update.
     */
    where: AlertThresholdWhereUniqueInput
  }

  /**
   * AlertThreshold updateMany
   */
  export type AlertThresholdUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlertThresholds.
     */
    data: XOR<AlertThresholdUpdateManyMutationInput, AlertThresholdUncheckedUpdateManyInput>
    /**
     * Filter which AlertThresholds to update
     */
    where?: AlertThresholdWhereInput
    /**
     * Limit how many AlertThresholds to update.
     */
    limit?: number
  }

  /**
   * AlertThreshold updateManyAndReturn
   */
  export type AlertThresholdUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * The data used to update AlertThresholds.
     */
    data: XOR<AlertThresholdUpdateManyMutationInput, AlertThresholdUncheckedUpdateManyInput>
    /**
     * Filter which AlertThresholds to update
     */
    where?: AlertThresholdWhereInput
    /**
     * Limit how many AlertThresholds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlertThreshold upsert
   */
  export type AlertThresholdUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * The filter to search for the AlertThreshold to update in case it exists.
     */
    where: AlertThresholdWhereUniqueInput
    /**
     * In case the AlertThreshold found by the `where` argument doesn't exist, create a new AlertThreshold with this data.
     */
    create: XOR<AlertThresholdCreateInput, AlertThresholdUncheckedCreateInput>
    /**
     * In case the AlertThreshold was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertThresholdUpdateInput, AlertThresholdUncheckedUpdateInput>
  }

  /**
   * AlertThreshold delete
   */
  export type AlertThresholdDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
    /**
     * Filter which AlertThreshold to delete.
     */
    where: AlertThresholdWhereUniqueInput
  }

  /**
   * AlertThreshold deleteMany
   */
  export type AlertThresholdDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlertThresholds to delete
     */
    where?: AlertThresholdWhereInput
    /**
     * Limit how many AlertThresholds to delete.
     */
    limit?: number
  }

  /**
   * AlertThreshold.alerts
   */
  export type AlertThreshold$alertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    cursor?: AlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * AlertThreshold without action
   */
  export type AlertThresholdDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlertThreshold
     */
    select?: AlertThresholdSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlertThreshold
     */
    omit?: AlertThresholdOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertThresholdInclude<ExtArgs> | null
  }


  /**
   * Model Alert
   */

  export type AggregateAlert = {
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  export type AlertMinAggregateOutputType = {
    id: string | null
    thresholdId: string | null
    observationId: string | null
    triggeredAt: Date | null
    resolvedAt: Date | null
  }

  export type AlertMaxAggregateOutputType = {
    id: string | null
    thresholdId: string | null
    observationId: string | null
    triggeredAt: Date | null
    resolvedAt: Date | null
  }

  export type AlertCountAggregateOutputType = {
    id: number
    thresholdId: number
    observationId: number
    triggeredAt: number
    resolvedAt: number
    _all: number
  }


  export type AlertMinAggregateInputType = {
    id?: true
    thresholdId?: true
    observationId?: true
    triggeredAt?: true
    resolvedAt?: true
  }

  export type AlertMaxAggregateInputType = {
    id?: true
    thresholdId?: true
    observationId?: true
    triggeredAt?: true
    resolvedAt?: true
  }

  export type AlertCountAggregateInputType = {
    id?: true
    thresholdId?: true
    observationId?: true
    triggeredAt?: true
    resolvedAt?: true
    _all?: true
  }

  export type AlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alert to aggregate.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alerts
    **/
    _count?: true | AlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertMaxAggregateInputType
  }

  export type GetAlertAggregateType<T extends AlertAggregateArgs> = {
        [P in keyof T & keyof AggregateAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlert[P]>
      : GetScalarType<T[P], AggregateAlert[P]>
  }




  export type AlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithAggregationInput | AlertOrderByWithAggregationInput[]
    by: AlertScalarFieldEnum[] | AlertScalarFieldEnum
    having?: AlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertCountAggregateInputType | true
    _min?: AlertMinAggregateInputType
    _max?: AlertMaxAggregateInputType
  }

  export type AlertGroupByOutputType = {
    id: string
    thresholdId: string
    observationId: string
    triggeredAt: Date
    resolvedAt: Date | null
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  type GetAlertGroupByPayload<T extends AlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertGroupByOutputType[P]>
            : GetScalarType<T[P], AlertGroupByOutputType[P]>
        }
      >
    >


  export type AlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    thresholdId?: boolean
    observationId?: boolean
    triggeredAt?: boolean
    resolvedAt?: boolean
    threshold?: boolean | AlertThresholdDefaultArgs<ExtArgs>
    observation?: boolean | ObservationDefaultArgs<ExtArgs>
    notifications?: boolean | Alert$notificationsArgs<ExtArgs>
    _count?: boolean | AlertCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    thresholdId?: boolean
    observationId?: boolean
    triggeredAt?: boolean
    resolvedAt?: boolean
    threshold?: boolean | AlertThresholdDefaultArgs<ExtArgs>
    observation?: boolean | ObservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    thresholdId?: boolean
    observationId?: boolean
    triggeredAt?: boolean
    resolvedAt?: boolean
    threshold?: boolean | AlertThresholdDefaultArgs<ExtArgs>
    observation?: boolean | ObservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectScalar = {
    id?: boolean
    thresholdId?: boolean
    observationId?: boolean
    triggeredAt?: boolean
    resolvedAt?: boolean
  }

  export type AlertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "thresholdId" | "observationId" | "triggeredAt" | "resolvedAt", ExtArgs["result"]["alert"]>
  export type AlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    threshold?: boolean | AlertThresholdDefaultArgs<ExtArgs>
    observation?: boolean | ObservationDefaultArgs<ExtArgs>
    notifications?: boolean | Alert$notificationsArgs<ExtArgs>
    _count?: boolean | AlertCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlertIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    threshold?: boolean | AlertThresholdDefaultArgs<ExtArgs>
    observation?: boolean | ObservationDefaultArgs<ExtArgs>
  }
  export type AlertIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    threshold?: boolean | AlertThresholdDefaultArgs<ExtArgs>
    observation?: boolean | ObservationDefaultArgs<ExtArgs>
  }

  export type $AlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alert"
    objects: {
      threshold: Prisma.$AlertThresholdPayload<ExtArgs>
      observation: Prisma.$ObservationPayload<ExtArgs>
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      thresholdId: string
      observationId: string
      triggeredAt: Date
      resolvedAt: Date | null
    }, ExtArgs["result"]["alert"]>
    composites: {}
  }

  type AlertGetPayload<S extends boolean | null | undefined | AlertDefaultArgs> = $Result.GetResult<Prisma.$AlertPayload, S>

  type AlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlertCountAggregateInputType | true
    }

  export interface AlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alert'], meta: { name: 'Alert' } }
    /**
     * Find zero or one Alert that matches the filter.
     * @param {AlertFindUniqueArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertFindUniqueArgs>(args: SelectSubset<T, AlertFindUniqueArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlertFindUniqueOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertFindFirstArgs>(args?: SelectSubset<T, AlertFindFirstArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alerts
     * const alerts = await prisma.alert.findMany()
     * 
     * // Get first 10 Alerts
     * const alerts = await prisma.alert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertWithIdOnly = await prisma.alert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertFindManyArgs>(args?: SelectSubset<T, AlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alert.
     * @param {AlertCreateArgs} args - Arguments to create a Alert.
     * @example
     * // Create one Alert
     * const Alert = await prisma.alert.create({
     *   data: {
     *     // ... data to create a Alert
     *   }
     * })
     * 
     */
    create<T extends AlertCreateArgs>(args: SelectSubset<T, AlertCreateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alerts.
     * @param {AlertCreateManyArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertCreateManyArgs>(args?: SelectSubset<T, AlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alerts and returns the data saved in the database.
     * @param {AlertCreateManyAndReturnArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alerts and only return the `id`
     * const alertWithIdOnly = await prisma.alert.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlertCreateManyAndReturnArgs>(args?: SelectSubset<T, AlertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Alert.
     * @param {AlertDeleteArgs} args - Arguments to delete one Alert.
     * @example
     * // Delete one Alert
     * const Alert = await prisma.alert.delete({
     *   where: {
     *     // ... filter to delete one Alert
     *   }
     * })
     * 
     */
    delete<T extends AlertDeleteArgs>(args: SelectSubset<T, AlertDeleteArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alert.
     * @param {AlertUpdateArgs} args - Arguments to update one Alert.
     * @example
     * // Update one Alert
     * const alert = await prisma.alert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertUpdateArgs>(args: SelectSubset<T, AlertUpdateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alerts.
     * @param {AlertDeleteManyArgs} args - Arguments to filter Alerts to delete.
     * @example
     * // Delete a few Alerts
     * const { count } = await prisma.alert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertDeleteManyArgs>(args?: SelectSubset<T, AlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertUpdateManyArgs>(args: SelectSubset<T, AlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts and returns the data updated in the database.
     * @param {AlertUpdateManyAndReturnArgs} args - Arguments to update many Alerts.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Alerts and only return the `id`
     * const alertWithIdOnly = await prisma.alert.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlertUpdateManyAndReturnArgs>(args: SelectSubset<T, AlertUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Alert.
     * @param {AlertUpsertArgs} args - Arguments to update or create a Alert.
     * @example
     * // Update or create a Alert
     * const alert = await prisma.alert.upsert({
     *   create: {
     *     // ... data to create a Alert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alert we want to update
     *   }
     * })
     */
    upsert<T extends AlertUpsertArgs>(args: SelectSubset<T, AlertUpsertArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertCountArgs} args - Arguments to filter Alerts to count.
     * @example
     * // Count the number of Alerts
     * const count = await prisma.alert.count({
     *   where: {
     *     // ... the filter for the Alerts we want to count
     *   }
     * })
    **/
    count<T extends AlertCountArgs>(
      args?: Subset<T, AlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertAggregateArgs>(args: Subset<T, AlertAggregateArgs>): Prisma.PrismaPromise<GetAlertAggregateType<T>>

    /**
     * Group by Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertGroupByArgs['orderBy'] }
        : { orderBy?: AlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alert model
   */
  readonly fields: AlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    threshold<T extends AlertThresholdDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlertThresholdDefaultArgs<ExtArgs>>): Prisma__AlertThresholdClient<$Result.GetResult<Prisma.$AlertThresholdPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    observation<T extends ObservationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ObservationDefaultArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notifications<T extends Alert$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Alert$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alert model
   */
  interface AlertFieldRefs {
    readonly id: FieldRef<"Alert", 'String'>
    readonly thresholdId: FieldRef<"Alert", 'String'>
    readonly observationId: FieldRef<"Alert", 'String'>
    readonly triggeredAt: FieldRef<"Alert", 'DateTime'>
    readonly resolvedAt: FieldRef<"Alert", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alert findUnique
   */
  export type AlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findUniqueOrThrow
   */
  export type AlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findFirst
   */
  export type AlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findFirstOrThrow
   */
  export type AlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findMany
   */
  export type AlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alerts to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert create
   */
  export type AlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to create a Alert.
     */
    data: XOR<AlertCreateInput, AlertUncheckedCreateInput>
  }

  /**
   * Alert createMany
   */
  export type AlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alert createManyAndReturn
   */
  export type AlertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alert update
   */
  export type AlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to update a Alert.
     */
    data: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
    /**
     * Choose, which Alert to update.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert updateMany
   */
  export type AlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
    /**
     * Limit how many Alerts to update.
     */
    limit?: number
  }

  /**
   * Alert updateManyAndReturn
   */
  export type AlertUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
    /**
     * Limit how many Alerts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alert upsert
   */
  export type AlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The filter to search for the Alert to update in case it exists.
     */
    where: AlertWhereUniqueInput
    /**
     * In case the Alert found by the `where` argument doesn't exist, create a new Alert with this data.
     */
    create: XOR<AlertCreateInput, AlertUncheckedCreateInput>
    /**
     * In case the Alert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
  }

  /**
   * Alert delete
   */
  export type AlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter which Alert to delete.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert deleteMany
   */
  export type AlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerts to delete
     */
    where?: AlertWhereInput
    /**
     * Limit how many Alerts to delete.
     */
    limit?: number
  }

  /**
   * Alert.notifications
   */
  export type Alert$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Alert without action
   */
  export type AlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    alertId: string | null
    createdAt: Date | null
    readAt: Date | null
    isRead: boolean | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    alertId: string | null
    createdAt: Date | null
    readAt: Date | null
    isRead: boolean | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    alertId: number
    createdAt: number
    readAt: number
    isRead: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    alertId?: true
    createdAt?: true
    readAt?: true
    isRead?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    alertId?: true
    createdAt?: true
    readAt?: true
    isRead?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    alertId?: true
    createdAt?: true
    readAt?: true
    isRead?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    title: string
    message: string
    alertId: string | null
    createdAt: Date
    readAt: Date | null
    isRead: boolean
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    alertId?: boolean
    createdAt?: boolean
    readAt?: boolean
    isRead?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    alert?: boolean | Notification$alertArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    alertId?: boolean
    createdAt?: boolean
    readAt?: boolean
    isRead?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    alert?: boolean | Notification$alertArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    alertId?: boolean
    createdAt?: boolean
    readAt?: boolean
    isRead?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    alert?: boolean | Notification$alertArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    alertId?: boolean
    createdAt?: boolean
    readAt?: boolean
    isRead?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "message" | "alertId" | "createdAt" | "readAt" | "isRead", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    alert?: boolean | Notification$alertArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    alert?: boolean | Notification$alertArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    alert?: boolean | Notification$alertArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      alert: Prisma.$AlertPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      message: string
      alertId: string | null
      createdAt: Date
      readAt: Date | null
      isRead: boolean
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    alert<T extends Notification$alertArgs<ExtArgs> = {}>(args?: Subset<T, Notification$alertArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly alertId: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.alert
   */
  export type Notification$alertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    filename: string | null
    filepath: string | null
    mimetype: string | null
    size: number | null
    createdAt: Date | null
    patientId: string | null
    observationId: string | null
    treatmentId: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    filepath: string | null
    mimetype: string | null
    size: number | null
    createdAt: Date | null
    patientId: string | null
    observationId: string | null
    treatmentId: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    filename: number
    filepath: number
    mimetype: number
    size: number
    createdAt: number
    patientId: number
    observationId: number
    treatmentId: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    filename?: true
    filepath?: true
    mimetype?: true
    size?: true
    createdAt?: true
    patientId?: true
    observationId?: true
    treatmentId?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    filename?: true
    filepath?: true
    mimetype?: true
    size?: true
    createdAt?: true
    patientId?: true
    observationId?: true
    treatmentId?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    filename?: true
    filepath?: true
    mimetype?: true
    size?: true
    createdAt?: true
    patientId?: true
    observationId?: true
    treatmentId?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt: Date
    patientId: string | null
    observationId: string | null
    treatmentId: string | null
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    filepath?: boolean
    mimetype?: boolean
    size?: boolean
    createdAt?: boolean
    patientId?: boolean
    observationId?: boolean
    treatmentId?: boolean
    patient?: boolean | File$patientArgs<ExtArgs>
    observation?: boolean | File$observationArgs<ExtArgs>
    treatment?: boolean | File$treatmentArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    filepath?: boolean
    mimetype?: boolean
    size?: boolean
    createdAt?: boolean
    patientId?: boolean
    observationId?: boolean
    treatmentId?: boolean
    patient?: boolean | File$patientArgs<ExtArgs>
    observation?: boolean | File$observationArgs<ExtArgs>
    treatment?: boolean | File$treatmentArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    filepath?: boolean
    mimetype?: boolean
    size?: boolean
    createdAt?: boolean
    patientId?: boolean
    observationId?: boolean
    treatmentId?: boolean
    patient?: boolean | File$patientArgs<ExtArgs>
    observation?: boolean | File$observationArgs<ExtArgs>
    treatment?: boolean | File$treatmentArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    filename?: boolean
    filepath?: boolean
    mimetype?: boolean
    size?: boolean
    createdAt?: boolean
    patientId?: boolean
    observationId?: boolean
    treatmentId?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "filename" | "filepath" | "mimetype" | "size" | "createdAt" | "patientId" | "observationId" | "treatmentId", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | File$patientArgs<ExtArgs>
    observation?: boolean | File$observationArgs<ExtArgs>
    treatment?: boolean | File$treatmentArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | File$patientArgs<ExtArgs>
    observation?: boolean | File$observationArgs<ExtArgs>
    treatment?: boolean | File$treatmentArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | File$patientArgs<ExtArgs>
    observation?: boolean | File$observationArgs<ExtArgs>
    treatment?: boolean | File$treatmentArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs> | null
      observation: Prisma.$ObservationPayload<ExtArgs> | null
      treatment: Prisma.$TreatmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      filepath: string
      mimetype: string
      size: number
      createdAt: Date
      patientId: string | null
      observationId: string | null
      treatmentId: string | null
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends File$patientArgs<ExtArgs> = {}>(args?: Subset<T, File$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    observation<T extends File$observationArgs<ExtArgs> = {}>(args?: Subset<T, File$observationArgs<ExtArgs>>): Prisma__ObservationClient<$Result.GetResult<Prisma.$ObservationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    treatment<T extends File$treatmentArgs<ExtArgs> = {}>(args?: Subset<T, File$treatmentArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly filename: FieldRef<"File", 'String'>
    readonly filepath: FieldRef<"File", 'String'>
    readonly mimetype: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly patientId: FieldRef<"File", 'String'>
    readonly observationId: FieldRef<"File", 'String'>
    readonly treatmentId: FieldRef<"File", 'String'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.patient
   */
  export type File$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * File.observation
   */
  export type File$observationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Observation
     */
    select?: ObservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Observation
     */
    omit?: ObservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObservationInclude<ExtArgs> | null
    where?: ObservationWhereInput
  }

  /**
   * File.treatment
   */
  export type File$treatmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive',
    practiceId: 'practiceId',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PracticeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    phone: 'phone',
    email: 'email',
    logo: 'logo',
    subscriptionTier: 'subscriptionTier',
    subscriptionStatus: 'subscriptionStatus',
    subscriptionStartDate: 'subscriptionStartDate',
    subscriptionEndDate: 'subscriptionEndDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive',
    customBranding: 'customBranding',
    maxStorage: 'maxStorage',
    currentStorage: 'currentStorage'
  };

  export type PracticeScalarFieldEnum = (typeof PracticeScalarFieldEnum)[keyof typeof PracticeScalarFieldEnum]


  export const SubscriptionHistoryScalarFieldEnum: {
    id: 'id',
    practiceId: 'practiceId',
    tier: 'tier',
    startDate: 'startDate',
    endDate: 'endDate',
    amount: 'amount',
    paymentId: 'paymentId',
    createdAt: 'createdAt'
  };

  export type SubscriptionHistoryScalarFieldEnum = (typeof SubscriptionHistoryScalarFieldEnum)[keyof typeof SubscriptionHistoryScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    species: 'species',
    breed: 'breed',
    age: 'age',
    weight: 'weight',
    sex: 'sex',
    practiceId: 'practiceId',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive',
    ownerId: 'ownerId',
    ownerName: 'ownerName',
    ownerEmail: 'ownerEmail',
    ownerPhone: 'ownerPhone',
    medicalHistory: 'medicalHistory'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const StudyScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    protocol: 'protocol',
    practiceId: 'practiceId',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    isTemplate: 'isTemplate'
  };

  export type StudyScalarFieldEnum = (typeof StudyScalarFieldEnum)[keyof typeof StudyScalarFieldEnum]


  export const StudyPatientScalarFieldEnum: {
    id: 'id',
    studyId: 'studyId',
    patientId: 'patientId',
    enrollmentDate: 'enrollmentDate',
    exitDate: 'exitDate',
    isActive: 'isActive'
  };

  export type StudyPatientScalarFieldEnum = (typeof StudyPatientScalarFieldEnum)[keyof typeof StudyPatientScalarFieldEnum]


  export const StudyAssignmentScalarFieldEnum: {
    id: 'id',
    studyId: 'studyId',
    userId: 'userId',
    assignedAt: 'assignedAt',
    role: 'role'
  };

  export type StudyAssignmentScalarFieldEnum = (typeof StudyAssignmentScalarFieldEnum)[keyof typeof StudyAssignmentScalarFieldEnum]


  export const StudyNoteScalarFieldEnum: {
    id: 'id',
    studyId: 'studyId',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudyNoteScalarFieldEnum = (typeof StudyNoteScalarFieldEnum)[keyof typeof StudyNoteScalarFieldEnum]


  export const SymptomTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    dataType: 'dataType',
    units: 'units',
    minValue: 'minValue',
    maxValue: 'maxValue',
    options: 'options',
    studyId: 'studyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SymptomTemplateScalarFieldEnum = (typeof SymptomTemplateScalarFieldEnum)[keyof typeof SymptomTemplateScalarFieldEnum]


  export const ObservationScalarFieldEnum: {
    id: 'id',
    symptomTemplateId: 'symptomTemplateId',
    patientId: 'patientId',
    studyPatientId: 'studyPatientId',
    recordedById: 'recordedById',
    recordedAt: 'recordedAt',
    value: 'value',
    notes: 'notes'
  };

  export type ObservationScalarFieldEnum = (typeof ObservationScalarFieldEnum)[keyof typeof ObservationScalarFieldEnum]


  export const TreatmentTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    protocol: 'protocol',
    studyId: 'studyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TreatmentTemplateScalarFieldEnum = (typeof TreatmentTemplateScalarFieldEnum)[keyof typeof TreatmentTemplateScalarFieldEnum]


  export const TreatmentScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    patientId: 'patientId',
    studyPatientId: 'studyPatientId',
    createdById: 'createdById',
    createdAt: 'createdAt',
    administeredAt: 'administeredAt',
    name: 'name',
    description: 'description',
    dosage: 'dosage',
    notes: 'notes'
  };

  export type TreatmentScalarFieldEnum = (typeof TreatmentScalarFieldEnum)[keyof typeof TreatmentScalarFieldEnum]


  export const AlertThresholdScalarFieldEnum: {
    id: 'id',
    symptomTemplateId: 'symptomTemplateId',
    condition: 'condition',
    severity: 'severity',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlertThresholdScalarFieldEnum = (typeof AlertThresholdScalarFieldEnum)[keyof typeof AlertThresholdScalarFieldEnum]


  export const AlertScalarFieldEnum: {
    id: 'id',
    thresholdId: 'thresholdId',
    observationId: 'observationId',
    triggeredAt: 'triggeredAt',
    resolvedAt: 'resolvedAt'
  };

  export type AlertScalarFieldEnum = (typeof AlertScalarFieldEnum)[keyof typeof AlertScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    alertId: 'alertId',
    createdAt: 'createdAt',
    readAt: 'readAt',
    isRead: 'isRead'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    filepath: 'filepath',
    mimetype: 'mimetype',
    size: 'size',
    createdAt: 'createdAt',
    patientId: 'patientId',
    observationId: 'observationId',
    treatmentId: 'treatmentId'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'SubscriptionTier'
   */
  export type EnumSubscriptionTierFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionTier'>
    


  /**
   * Reference to a field of type 'SubscriptionTier[]'
   */
  export type ListEnumSubscriptionTierFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionTier[]'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Sex'
   */
  export type EnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex'>
    


  /**
   * Reference to a field of type 'Sex[]'
   */
  export type ListEnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex[]'>
    


  /**
   * Reference to a field of type 'StudyStatus'
   */
  export type EnumStudyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StudyStatus'>
    


  /**
   * Reference to a field of type 'StudyStatus[]'
   */
  export type ListEnumStudyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StudyStatus[]'>
    


  /**
   * Reference to a field of type 'StudyRole'
   */
  export type EnumStudyRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StudyRole'>
    


  /**
   * Reference to a field of type 'StudyRole[]'
   */
  export type ListEnumStudyRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StudyRole[]'>
    


  /**
   * Reference to a field of type 'SymptomDataType'
   */
  export type EnumSymptomDataTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SymptomDataType'>
    


  /**
   * Reference to a field of type 'SymptomDataType[]'
   */
  export type ListEnumSymptomDataTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SymptomDataType[]'>
    


  /**
   * Reference to a field of type 'AlertSeverity'
   */
  export type EnumAlertSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertSeverity'>
    


  /**
   * Reference to a field of type 'AlertSeverity[]'
   */
  export type ListEnumAlertSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertSeverity[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    practiceId?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    practice?: XOR<PracticeNullableScalarRelationFilter, PracticeWhereInput> | null
    createdStudies?: StudyListRelationFilter
    assignedStudies?: StudyAssignmentListRelationFilter
    createdTreatments?: TreatmentListRelationFilter
    observations?: ObservationListRelationFilter
    createdPatients?: PatientListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    practiceId?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    practice?: PracticeOrderByWithRelationInput
    createdStudies?: StudyOrderByRelationAggregateInput
    assignedStudies?: StudyAssignmentOrderByRelationAggregateInput
    createdTreatments?: TreatmentOrderByRelationAggregateInput
    observations?: ObservationOrderByRelationAggregateInput
    createdPatients?: PatientOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    practiceId?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    practice?: XOR<PracticeNullableScalarRelationFilter, PracticeWhereInput> | null
    createdStudies?: StudyListRelationFilter
    assignedStudies?: StudyAssignmentListRelationFilter
    createdTreatments?: TreatmentListRelationFilter
    observations?: ObservationListRelationFilter
    createdPatients?: PatientListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    practiceId?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    practiceId?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type PracticeWhereInput = {
    AND?: PracticeWhereInput | PracticeWhereInput[]
    OR?: PracticeWhereInput[]
    NOT?: PracticeWhereInput | PracticeWhereInput[]
    id?: StringFilter<"Practice"> | string
    name?: StringFilter<"Practice"> | string
    address?: StringNullableFilter<"Practice"> | string | null
    phone?: StringNullableFilter<"Practice"> | string | null
    email?: StringNullableFilter<"Practice"> | string | null
    logo?: StringNullableFilter<"Practice"> | string | null
    subscriptionTier?: EnumSubscriptionTierFilter<"Practice"> | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFilter<"Practice"> | $Enums.SubscriptionStatus
    subscriptionStartDate?: DateTimeNullableFilter<"Practice"> | Date | string | null
    subscriptionEndDate?: DateTimeNullableFilter<"Practice"> | Date | string | null
    createdAt?: DateTimeFilter<"Practice"> | Date | string
    updatedAt?: DateTimeFilter<"Practice"> | Date | string
    isActive?: BoolFilter<"Practice"> | boolean
    customBranding?: JsonNullableFilter<"Practice">
    maxStorage?: IntFilter<"Practice"> | number
    currentStorage?: IntFilter<"Practice"> | number
    users?: UserListRelationFilter
    patients?: PatientListRelationFilter
    studies?: StudyListRelationFilter
    subscriptionHistory?: SubscriptionHistoryListRelationFilter
  }

  export type PracticeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionStartDate?: SortOrderInput | SortOrder
    subscriptionEndDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    customBranding?: SortOrderInput | SortOrder
    maxStorage?: SortOrder
    currentStorage?: SortOrder
    users?: UserOrderByRelationAggregateInput
    patients?: PatientOrderByRelationAggregateInput
    studies?: StudyOrderByRelationAggregateInput
    subscriptionHistory?: SubscriptionHistoryOrderByRelationAggregateInput
  }

  export type PracticeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PracticeWhereInput | PracticeWhereInput[]
    OR?: PracticeWhereInput[]
    NOT?: PracticeWhereInput | PracticeWhereInput[]
    name?: StringFilter<"Practice"> | string
    address?: StringNullableFilter<"Practice"> | string | null
    phone?: StringNullableFilter<"Practice"> | string | null
    email?: StringNullableFilter<"Practice"> | string | null
    logo?: StringNullableFilter<"Practice"> | string | null
    subscriptionTier?: EnumSubscriptionTierFilter<"Practice"> | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFilter<"Practice"> | $Enums.SubscriptionStatus
    subscriptionStartDate?: DateTimeNullableFilter<"Practice"> | Date | string | null
    subscriptionEndDate?: DateTimeNullableFilter<"Practice"> | Date | string | null
    createdAt?: DateTimeFilter<"Practice"> | Date | string
    updatedAt?: DateTimeFilter<"Practice"> | Date | string
    isActive?: BoolFilter<"Practice"> | boolean
    customBranding?: JsonNullableFilter<"Practice">
    maxStorage?: IntFilter<"Practice"> | number
    currentStorage?: IntFilter<"Practice"> | number
    users?: UserListRelationFilter
    patients?: PatientListRelationFilter
    studies?: StudyListRelationFilter
    subscriptionHistory?: SubscriptionHistoryListRelationFilter
  }, "id">

  export type PracticeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionStartDate?: SortOrderInput | SortOrder
    subscriptionEndDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    customBranding?: SortOrderInput | SortOrder
    maxStorage?: SortOrder
    currentStorage?: SortOrder
    _count?: PracticeCountOrderByAggregateInput
    _avg?: PracticeAvgOrderByAggregateInput
    _max?: PracticeMaxOrderByAggregateInput
    _min?: PracticeMinOrderByAggregateInput
    _sum?: PracticeSumOrderByAggregateInput
  }

  export type PracticeScalarWhereWithAggregatesInput = {
    AND?: PracticeScalarWhereWithAggregatesInput | PracticeScalarWhereWithAggregatesInput[]
    OR?: PracticeScalarWhereWithAggregatesInput[]
    NOT?: PracticeScalarWhereWithAggregatesInput | PracticeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Practice"> | string
    name?: StringWithAggregatesFilter<"Practice"> | string
    address?: StringNullableWithAggregatesFilter<"Practice"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Practice"> | string | null
    email?: StringNullableWithAggregatesFilter<"Practice"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Practice"> | string | null
    subscriptionTier?: EnumSubscriptionTierWithAggregatesFilter<"Practice"> | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusWithAggregatesFilter<"Practice"> | $Enums.SubscriptionStatus
    subscriptionStartDate?: DateTimeNullableWithAggregatesFilter<"Practice"> | Date | string | null
    subscriptionEndDate?: DateTimeNullableWithAggregatesFilter<"Practice"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Practice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Practice"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Practice"> | boolean
    customBranding?: JsonNullableWithAggregatesFilter<"Practice">
    maxStorage?: IntWithAggregatesFilter<"Practice"> | number
    currentStorage?: IntWithAggregatesFilter<"Practice"> | number
  }

  export type SubscriptionHistoryWhereInput = {
    AND?: SubscriptionHistoryWhereInput | SubscriptionHistoryWhereInput[]
    OR?: SubscriptionHistoryWhereInput[]
    NOT?: SubscriptionHistoryWhereInput | SubscriptionHistoryWhereInput[]
    id?: StringFilter<"SubscriptionHistory"> | string
    practiceId?: StringFilter<"SubscriptionHistory"> | string
    tier?: EnumSubscriptionTierFilter<"SubscriptionHistory"> | $Enums.SubscriptionTier
    startDate?: DateTimeFilter<"SubscriptionHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"SubscriptionHistory"> | Date | string | null
    amount?: FloatNullableFilter<"SubscriptionHistory"> | number | null
    paymentId?: StringNullableFilter<"SubscriptionHistory"> | string | null
    createdAt?: DateTimeFilter<"SubscriptionHistory"> | Date | string
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
  }

  export type SubscriptionHistoryOrderByWithRelationInput = {
    id?: SortOrder
    practiceId?: SortOrder
    tier?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    paymentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    practice?: PracticeOrderByWithRelationInput
  }

  export type SubscriptionHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionHistoryWhereInput | SubscriptionHistoryWhereInput[]
    OR?: SubscriptionHistoryWhereInput[]
    NOT?: SubscriptionHistoryWhereInput | SubscriptionHistoryWhereInput[]
    practiceId?: StringFilter<"SubscriptionHistory"> | string
    tier?: EnumSubscriptionTierFilter<"SubscriptionHistory"> | $Enums.SubscriptionTier
    startDate?: DateTimeFilter<"SubscriptionHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"SubscriptionHistory"> | Date | string | null
    amount?: FloatNullableFilter<"SubscriptionHistory"> | number | null
    paymentId?: StringNullableFilter<"SubscriptionHistory"> | string | null
    createdAt?: DateTimeFilter<"SubscriptionHistory"> | Date | string
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
  }, "id">

  export type SubscriptionHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    practiceId?: SortOrder
    tier?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    paymentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SubscriptionHistoryCountOrderByAggregateInput
    _avg?: SubscriptionHistoryAvgOrderByAggregateInput
    _max?: SubscriptionHistoryMaxOrderByAggregateInput
    _min?: SubscriptionHistoryMinOrderByAggregateInput
    _sum?: SubscriptionHistorySumOrderByAggregateInput
  }

  export type SubscriptionHistoryScalarWhereWithAggregatesInput = {
    AND?: SubscriptionHistoryScalarWhereWithAggregatesInput | SubscriptionHistoryScalarWhereWithAggregatesInput[]
    OR?: SubscriptionHistoryScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionHistoryScalarWhereWithAggregatesInput | SubscriptionHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubscriptionHistory"> | string
    practiceId?: StringWithAggregatesFilter<"SubscriptionHistory"> | string
    tier?: EnumSubscriptionTierWithAggregatesFilter<"SubscriptionHistory"> | $Enums.SubscriptionTier
    startDate?: DateTimeWithAggregatesFilter<"SubscriptionHistory"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"SubscriptionHistory"> | Date | string | null
    amount?: FloatNullableWithAggregatesFilter<"SubscriptionHistory"> | number | null
    paymentId?: StringNullableWithAggregatesFilter<"SubscriptionHistory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SubscriptionHistory"> | Date | string
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    species?: StringFilter<"Patient"> | string
    breed?: StringNullableFilter<"Patient"> | string | null
    age?: IntNullableFilter<"Patient"> | number | null
    weight?: FloatNullableFilter<"Patient"> | number | null
    sex?: EnumSexNullableFilter<"Patient"> | $Enums.Sex | null
    practiceId?: StringFilter<"Patient"> | string
    createdById?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    isActive?: BoolFilter<"Patient"> | boolean
    ownerId?: StringNullableFilter<"Patient"> | string | null
    ownerName?: StringNullableFilter<"Patient"> | string | null
    ownerEmail?: StringNullableFilter<"Patient"> | string | null
    ownerPhone?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: JsonNullableFilter<"Patient">
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    studies?: StudyPatientListRelationFilter
    observations?: ObservationListRelationFilter
    treatments?: TreatmentListRelationFilter
    files?: FileListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    species?: SortOrder
    breed?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrderInput | SortOrder
    ownerName?: SortOrderInput | SortOrder
    ownerEmail?: SortOrderInput | SortOrder
    ownerPhone?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    practice?: PracticeOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    studies?: StudyPatientOrderByRelationAggregateInput
    observations?: ObservationOrderByRelationAggregateInput
    treatments?: TreatmentOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    name?: StringFilter<"Patient"> | string
    species?: StringFilter<"Patient"> | string
    breed?: StringNullableFilter<"Patient"> | string | null
    age?: IntNullableFilter<"Patient"> | number | null
    weight?: FloatNullableFilter<"Patient"> | number | null
    sex?: EnumSexNullableFilter<"Patient"> | $Enums.Sex | null
    practiceId?: StringFilter<"Patient"> | string
    createdById?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    isActive?: BoolFilter<"Patient"> | boolean
    ownerId?: StringNullableFilter<"Patient"> | string | null
    ownerName?: StringNullableFilter<"Patient"> | string | null
    ownerEmail?: StringNullableFilter<"Patient"> | string | null
    ownerPhone?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: JsonNullableFilter<"Patient">
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    studies?: StudyPatientListRelationFilter
    observations?: ObservationListRelationFilter
    treatments?: TreatmentListRelationFilter
    files?: FileListRelationFilter
  }, "id">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    species?: SortOrder
    breed?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrderInput | SortOrder
    ownerName?: SortOrderInput | SortOrder
    ownerEmail?: SortOrderInput | SortOrder
    ownerPhone?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    name?: StringWithAggregatesFilter<"Patient"> | string
    species?: StringWithAggregatesFilter<"Patient"> | string
    breed?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    age?: IntNullableWithAggregatesFilter<"Patient"> | number | null
    weight?: FloatNullableWithAggregatesFilter<"Patient"> | number | null
    sex?: EnumSexNullableWithAggregatesFilter<"Patient"> | $Enums.Sex | null
    practiceId?: StringWithAggregatesFilter<"Patient"> | string
    createdById?: StringWithAggregatesFilter<"Patient"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Patient"> | boolean
    ownerId?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    ownerName?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    ownerEmail?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    ownerPhone?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    medicalHistory?: JsonNullableWithAggregatesFilter<"Patient">
  }

  export type StudyWhereInput = {
    AND?: StudyWhereInput | StudyWhereInput[]
    OR?: StudyWhereInput[]
    NOT?: StudyWhereInput | StudyWhereInput[]
    id?: StringFilter<"Study"> | string
    title?: StringFilter<"Study"> | string
    description?: StringNullableFilter<"Study"> | string | null
    protocol?: JsonNullableFilter<"Study">
    practiceId?: StringFilter<"Study"> | string
    createdById?: StringFilter<"Study"> | string
    createdAt?: DateTimeFilter<"Study"> | Date | string
    updatedAt?: DateTimeFilter<"Study"> | Date | string
    startDate?: DateTimeNullableFilter<"Study"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Study"> | Date | string | null
    status?: EnumStudyStatusFilter<"Study"> | $Enums.StudyStatus
    isTemplate?: BoolFilter<"Study"> | boolean
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    patients?: StudyPatientListRelationFilter
    assignedUsers?: StudyAssignmentListRelationFilter
    symptomTemplates?: SymptomTemplateListRelationFilter
    treatmentTemplates?: TreatmentTemplateListRelationFilter
    notes?: StudyNoteListRelationFilter
  }

  export type StudyOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    protocol?: SortOrderInput | SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
    practice?: PracticeOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    patients?: StudyPatientOrderByRelationAggregateInput
    assignedUsers?: StudyAssignmentOrderByRelationAggregateInput
    symptomTemplates?: SymptomTemplateOrderByRelationAggregateInput
    treatmentTemplates?: TreatmentTemplateOrderByRelationAggregateInput
    notes?: StudyNoteOrderByRelationAggregateInput
  }

  export type StudyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StudyWhereInput | StudyWhereInput[]
    OR?: StudyWhereInput[]
    NOT?: StudyWhereInput | StudyWhereInput[]
    title?: StringFilter<"Study"> | string
    description?: StringNullableFilter<"Study"> | string | null
    protocol?: JsonNullableFilter<"Study">
    practiceId?: StringFilter<"Study"> | string
    createdById?: StringFilter<"Study"> | string
    createdAt?: DateTimeFilter<"Study"> | Date | string
    updatedAt?: DateTimeFilter<"Study"> | Date | string
    startDate?: DateTimeNullableFilter<"Study"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Study"> | Date | string | null
    status?: EnumStudyStatusFilter<"Study"> | $Enums.StudyStatus
    isTemplate?: BoolFilter<"Study"> | boolean
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    patients?: StudyPatientListRelationFilter
    assignedUsers?: StudyAssignmentListRelationFilter
    symptomTemplates?: SymptomTemplateListRelationFilter
    treatmentTemplates?: TreatmentTemplateListRelationFilter
    notes?: StudyNoteListRelationFilter
  }, "id">

  export type StudyOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    protocol?: SortOrderInput | SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
    _count?: StudyCountOrderByAggregateInput
    _max?: StudyMaxOrderByAggregateInput
    _min?: StudyMinOrderByAggregateInput
  }

  export type StudyScalarWhereWithAggregatesInput = {
    AND?: StudyScalarWhereWithAggregatesInput | StudyScalarWhereWithAggregatesInput[]
    OR?: StudyScalarWhereWithAggregatesInput[]
    NOT?: StudyScalarWhereWithAggregatesInput | StudyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Study"> | string
    title?: StringWithAggregatesFilter<"Study"> | string
    description?: StringNullableWithAggregatesFilter<"Study"> | string | null
    protocol?: JsonNullableWithAggregatesFilter<"Study">
    practiceId?: StringWithAggregatesFilter<"Study"> | string
    createdById?: StringWithAggregatesFilter<"Study"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Study"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Study"> | Date | string
    startDate?: DateTimeNullableWithAggregatesFilter<"Study"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Study"> | Date | string | null
    status?: EnumStudyStatusWithAggregatesFilter<"Study"> | $Enums.StudyStatus
    isTemplate?: BoolWithAggregatesFilter<"Study"> | boolean
  }

  export type StudyPatientWhereInput = {
    AND?: StudyPatientWhereInput | StudyPatientWhereInput[]
    OR?: StudyPatientWhereInput[]
    NOT?: StudyPatientWhereInput | StudyPatientWhereInput[]
    id?: StringFilter<"StudyPatient"> | string
    studyId?: StringFilter<"StudyPatient"> | string
    patientId?: StringFilter<"StudyPatient"> | string
    enrollmentDate?: DateTimeFilter<"StudyPatient"> | Date | string
    exitDate?: DateTimeNullableFilter<"StudyPatient"> | Date | string | null
    isActive?: BoolFilter<"StudyPatient"> | boolean
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    observations?: ObservationListRelationFilter
    treatments?: TreatmentListRelationFilter
  }

  export type StudyPatientOrderByWithRelationInput = {
    id?: SortOrder
    studyId?: SortOrder
    patientId?: SortOrder
    enrollmentDate?: SortOrder
    exitDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    study?: StudyOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    observations?: ObservationOrderByRelationAggregateInput
    treatments?: TreatmentOrderByRelationAggregateInput
  }

  export type StudyPatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studyId_patientId?: StudyPatientStudyIdPatientIdCompoundUniqueInput
    AND?: StudyPatientWhereInput | StudyPatientWhereInput[]
    OR?: StudyPatientWhereInput[]
    NOT?: StudyPatientWhereInput | StudyPatientWhereInput[]
    studyId?: StringFilter<"StudyPatient"> | string
    patientId?: StringFilter<"StudyPatient"> | string
    enrollmentDate?: DateTimeFilter<"StudyPatient"> | Date | string
    exitDate?: DateTimeNullableFilter<"StudyPatient"> | Date | string | null
    isActive?: BoolFilter<"StudyPatient"> | boolean
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    observations?: ObservationListRelationFilter
    treatments?: TreatmentListRelationFilter
  }, "id" | "studyId_patientId">

  export type StudyPatientOrderByWithAggregationInput = {
    id?: SortOrder
    studyId?: SortOrder
    patientId?: SortOrder
    enrollmentDate?: SortOrder
    exitDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    _count?: StudyPatientCountOrderByAggregateInput
    _max?: StudyPatientMaxOrderByAggregateInput
    _min?: StudyPatientMinOrderByAggregateInput
  }

  export type StudyPatientScalarWhereWithAggregatesInput = {
    AND?: StudyPatientScalarWhereWithAggregatesInput | StudyPatientScalarWhereWithAggregatesInput[]
    OR?: StudyPatientScalarWhereWithAggregatesInput[]
    NOT?: StudyPatientScalarWhereWithAggregatesInput | StudyPatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudyPatient"> | string
    studyId?: StringWithAggregatesFilter<"StudyPatient"> | string
    patientId?: StringWithAggregatesFilter<"StudyPatient"> | string
    enrollmentDate?: DateTimeWithAggregatesFilter<"StudyPatient"> | Date | string
    exitDate?: DateTimeNullableWithAggregatesFilter<"StudyPatient"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"StudyPatient"> | boolean
  }

  export type StudyAssignmentWhereInput = {
    AND?: StudyAssignmentWhereInput | StudyAssignmentWhereInput[]
    OR?: StudyAssignmentWhereInput[]
    NOT?: StudyAssignmentWhereInput | StudyAssignmentWhereInput[]
    id?: StringFilter<"StudyAssignment"> | string
    studyId?: StringFilter<"StudyAssignment"> | string
    userId?: StringFilter<"StudyAssignment"> | string
    assignedAt?: DateTimeFilter<"StudyAssignment"> | Date | string
    role?: EnumStudyRoleFilter<"StudyAssignment"> | $Enums.StudyRole
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StudyAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    studyId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    role?: SortOrder
    study?: StudyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type StudyAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studyId_userId?: StudyAssignmentStudyIdUserIdCompoundUniqueInput
    AND?: StudyAssignmentWhereInput | StudyAssignmentWhereInput[]
    OR?: StudyAssignmentWhereInput[]
    NOT?: StudyAssignmentWhereInput | StudyAssignmentWhereInput[]
    studyId?: StringFilter<"StudyAssignment"> | string
    userId?: StringFilter<"StudyAssignment"> | string
    assignedAt?: DateTimeFilter<"StudyAssignment"> | Date | string
    role?: EnumStudyRoleFilter<"StudyAssignment"> | $Enums.StudyRole
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "studyId_userId">

  export type StudyAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    studyId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    role?: SortOrder
    _count?: StudyAssignmentCountOrderByAggregateInput
    _max?: StudyAssignmentMaxOrderByAggregateInput
    _min?: StudyAssignmentMinOrderByAggregateInput
  }

  export type StudyAssignmentScalarWhereWithAggregatesInput = {
    AND?: StudyAssignmentScalarWhereWithAggregatesInput | StudyAssignmentScalarWhereWithAggregatesInput[]
    OR?: StudyAssignmentScalarWhereWithAggregatesInput[]
    NOT?: StudyAssignmentScalarWhereWithAggregatesInput | StudyAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudyAssignment"> | string
    studyId?: StringWithAggregatesFilter<"StudyAssignment"> | string
    userId?: StringWithAggregatesFilter<"StudyAssignment"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"StudyAssignment"> | Date | string
    role?: EnumStudyRoleWithAggregatesFilter<"StudyAssignment"> | $Enums.StudyRole
  }

  export type StudyNoteWhereInput = {
    AND?: StudyNoteWhereInput | StudyNoteWhereInput[]
    OR?: StudyNoteWhereInput[]
    NOT?: StudyNoteWhereInput | StudyNoteWhereInput[]
    id?: StringFilter<"StudyNote"> | string
    studyId?: StringFilter<"StudyNote"> | string
    content?: StringFilter<"StudyNote"> | string
    createdAt?: DateTimeFilter<"StudyNote"> | Date | string
    updatedAt?: DateTimeFilter<"StudyNote"> | Date | string
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
  }

  export type StudyNoteOrderByWithRelationInput = {
    id?: SortOrder
    studyId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    study?: StudyOrderByWithRelationInput
  }

  export type StudyNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StudyNoteWhereInput | StudyNoteWhereInput[]
    OR?: StudyNoteWhereInput[]
    NOT?: StudyNoteWhereInput | StudyNoteWhereInput[]
    studyId?: StringFilter<"StudyNote"> | string
    content?: StringFilter<"StudyNote"> | string
    createdAt?: DateTimeFilter<"StudyNote"> | Date | string
    updatedAt?: DateTimeFilter<"StudyNote"> | Date | string
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
  }, "id">

  export type StudyNoteOrderByWithAggregationInput = {
    id?: SortOrder
    studyId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudyNoteCountOrderByAggregateInput
    _max?: StudyNoteMaxOrderByAggregateInput
    _min?: StudyNoteMinOrderByAggregateInput
  }

  export type StudyNoteScalarWhereWithAggregatesInput = {
    AND?: StudyNoteScalarWhereWithAggregatesInput | StudyNoteScalarWhereWithAggregatesInput[]
    OR?: StudyNoteScalarWhereWithAggregatesInput[]
    NOT?: StudyNoteScalarWhereWithAggregatesInput | StudyNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudyNote"> | string
    studyId?: StringWithAggregatesFilter<"StudyNote"> | string
    content?: StringWithAggregatesFilter<"StudyNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"StudyNote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StudyNote"> | Date | string
  }

  export type SymptomTemplateWhereInput = {
    AND?: SymptomTemplateWhereInput | SymptomTemplateWhereInput[]
    OR?: SymptomTemplateWhereInput[]
    NOT?: SymptomTemplateWhereInput | SymptomTemplateWhereInput[]
    id?: StringFilter<"SymptomTemplate"> | string
    name?: StringFilter<"SymptomTemplate"> | string
    description?: StringNullableFilter<"SymptomTemplate"> | string | null
    category?: StringNullableFilter<"SymptomTemplate"> | string | null
    dataType?: EnumSymptomDataTypeFilter<"SymptomTemplate"> | $Enums.SymptomDataType
    units?: StringNullableFilter<"SymptomTemplate"> | string | null
    minValue?: FloatNullableFilter<"SymptomTemplate"> | number | null
    maxValue?: FloatNullableFilter<"SymptomTemplate"> | number | null
    options?: JsonNullableFilter<"SymptomTemplate">
    studyId?: StringFilter<"SymptomTemplate"> | string
    createdAt?: DateTimeFilter<"SymptomTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"SymptomTemplate"> | Date | string
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
    observations?: ObservationListRelationFilter
    alertThresholds?: AlertThresholdListRelationFilter
  }

  export type SymptomTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dataType?: SortOrder
    units?: SortOrderInput | SortOrder
    minValue?: SortOrderInput | SortOrder
    maxValue?: SortOrderInput | SortOrder
    options?: SortOrderInput | SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    study?: StudyOrderByWithRelationInput
    observations?: ObservationOrderByRelationAggregateInput
    alertThresholds?: AlertThresholdOrderByRelationAggregateInput
  }

  export type SymptomTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SymptomTemplateWhereInput | SymptomTemplateWhereInput[]
    OR?: SymptomTemplateWhereInput[]
    NOT?: SymptomTemplateWhereInput | SymptomTemplateWhereInput[]
    name?: StringFilter<"SymptomTemplate"> | string
    description?: StringNullableFilter<"SymptomTemplate"> | string | null
    category?: StringNullableFilter<"SymptomTemplate"> | string | null
    dataType?: EnumSymptomDataTypeFilter<"SymptomTemplate"> | $Enums.SymptomDataType
    units?: StringNullableFilter<"SymptomTemplate"> | string | null
    minValue?: FloatNullableFilter<"SymptomTemplate"> | number | null
    maxValue?: FloatNullableFilter<"SymptomTemplate"> | number | null
    options?: JsonNullableFilter<"SymptomTemplate">
    studyId?: StringFilter<"SymptomTemplate"> | string
    createdAt?: DateTimeFilter<"SymptomTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"SymptomTemplate"> | Date | string
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
    observations?: ObservationListRelationFilter
    alertThresholds?: AlertThresholdListRelationFilter
  }, "id">

  export type SymptomTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dataType?: SortOrder
    units?: SortOrderInput | SortOrder
    minValue?: SortOrderInput | SortOrder
    maxValue?: SortOrderInput | SortOrder
    options?: SortOrderInput | SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SymptomTemplateCountOrderByAggregateInput
    _avg?: SymptomTemplateAvgOrderByAggregateInput
    _max?: SymptomTemplateMaxOrderByAggregateInput
    _min?: SymptomTemplateMinOrderByAggregateInput
    _sum?: SymptomTemplateSumOrderByAggregateInput
  }

  export type SymptomTemplateScalarWhereWithAggregatesInput = {
    AND?: SymptomTemplateScalarWhereWithAggregatesInput | SymptomTemplateScalarWhereWithAggregatesInput[]
    OR?: SymptomTemplateScalarWhereWithAggregatesInput[]
    NOT?: SymptomTemplateScalarWhereWithAggregatesInput | SymptomTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SymptomTemplate"> | string
    name?: StringWithAggregatesFilter<"SymptomTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"SymptomTemplate"> | string | null
    category?: StringNullableWithAggregatesFilter<"SymptomTemplate"> | string | null
    dataType?: EnumSymptomDataTypeWithAggregatesFilter<"SymptomTemplate"> | $Enums.SymptomDataType
    units?: StringNullableWithAggregatesFilter<"SymptomTemplate"> | string | null
    minValue?: FloatNullableWithAggregatesFilter<"SymptomTemplate"> | number | null
    maxValue?: FloatNullableWithAggregatesFilter<"SymptomTemplate"> | number | null
    options?: JsonNullableWithAggregatesFilter<"SymptomTemplate">
    studyId?: StringWithAggregatesFilter<"SymptomTemplate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SymptomTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SymptomTemplate"> | Date | string
  }

  export type ObservationWhereInput = {
    AND?: ObservationWhereInput | ObservationWhereInput[]
    OR?: ObservationWhereInput[]
    NOT?: ObservationWhereInput | ObservationWhereInput[]
    id?: StringFilter<"Observation"> | string
    symptomTemplateId?: StringFilter<"Observation"> | string
    patientId?: StringFilter<"Observation"> | string
    studyPatientId?: StringFilter<"Observation"> | string
    recordedById?: StringFilter<"Observation"> | string
    recordedAt?: DateTimeFilter<"Observation"> | Date | string
    value?: JsonFilter<"Observation">
    notes?: StringNullableFilter<"Observation"> | string | null
    symptomTemplate?: XOR<SymptomTemplateScalarRelationFilter, SymptomTemplateWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    studyPatient?: XOR<StudyPatientScalarRelationFilter, StudyPatientWhereInput>
    recordedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    files?: FileListRelationFilter
    alerts?: AlertListRelationFilter
  }

  export type ObservationOrderByWithRelationInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    recordedById?: SortOrder
    recordedAt?: SortOrder
    value?: SortOrder
    notes?: SortOrderInput | SortOrder
    symptomTemplate?: SymptomTemplateOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    studyPatient?: StudyPatientOrderByWithRelationInput
    recordedBy?: UserOrderByWithRelationInput
    files?: FileOrderByRelationAggregateInput
    alerts?: AlertOrderByRelationAggregateInput
  }

  export type ObservationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ObservationWhereInput | ObservationWhereInput[]
    OR?: ObservationWhereInput[]
    NOT?: ObservationWhereInput | ObservationWhereInput[]
    symptomTemplateId?: StringFilter<"Observation"> | string
    patientId?: StringFilter<"Observation"> | string
    studyPatientId?: StringFilter<"Observation"> | string
    recordedById?: StringFilter<"Observation"> | string
    recordedAt?: DateTimeFilter<"Observation"> | Date | string
    value?: JsonFilter<"Observation">
    notes?: StringNullableFilter<"Observation"> | string | null
    symptomTemplate?: XOR<SymptomTemplateScalarRelationFilter, SymptomTemplateWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    studyPatient?: XOR<StudyPatientScalarRelationFilter, StudyPatientWhereInput>
    recordedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    files?: FileListRelationFilter
    alerts?: AlertListRelationFilter
  }, "id">

  export type ObservationOrderByWithAggregationInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    recordedById?: SortOrder
    recordedAt?: SortOrder
    value?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ObservationCountOrderByAggregateInput
    _max?: ObservationMaxOrderByAggregateInput
    _min?: ObservationMinOrderByAggregateInput
  }

  export type ObservationScalarWhereWithAggregatesInput = {
    AND?: ObservationScalarWhereWithAggregatesInput | ObservationScalarWhereWithAggregatesInput[]
    OR?: ObservationScalarWhereWithAggregatesInput[]
    NOT?: ObservationScalarWhereWithAggregatesInput | ObservationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Observation"> | string
    symptomTemplateId?: StringWithAggregatesFilter<"Observation"> | string
    patientId?: StringWithAggregatesFilter<"Observation"> | string
    studyPatientId?: StringWithAggregatesFilter<"Observation"> | string
    recordedById?: StringWithAggregatesFilter<"Observation"> | string
    recordedAt?: DateTimeWithAggregatesFilter<"Observation"> | Date | string
    value?: JsonWithAggregatesFilter<"Observation">
    notes?: StringNullableWithAggregatesFilter<"Observation"> | string | null
  }

  export type TreatmentTemplateWhereInput = {
    AND?: TreatmentTemplateWhereInput | TreatmentTemplateWhereInput[]
    OR?: TreatmentTemplateWhereInput[]
    NOT?: TreatmentTemplateWhereInput | TreatmentTemplateWhereInput[]
    id?: StringFilter<"TreatmentTemplate"> | string
    name?: StringFilter<"TreatmentTemplate"> | string
    description?: StringNullableFilter<"TreatmentTemplate"> | string | null
    protocol?: JsonNullableFilter<"TreatmentTemplate">
    studyId?: StringFilter<"TreatmentTemplate"> | string
    createdAt?: DateTimeFilter<"TreatmentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentTemplate"> | Date | string
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
    treatments?: TreatmentListRelationFilter
  }

  export type TreatmentTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    protocol?: SortOrderInput | SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    study?: StudyOrderByWithRelationInput
    treatments?: TreatmentOrderByRelationAggregateInput
  }

  export type TreatmentTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TreatmentTemplateWhereInput | TreatmentTemplateWhereInput[]
    OR?: TreatmentTemplateWhereInput[]
    NOT?: TreatmentTemplateWhereInput | TreatmentTemplateWhereInput[]
    name?: StringFilter<"TreatmentTemplate"> | string
    description?: StringNullableFilter<"TreatmentTemplate"> | string | null
    protocol?: JsonNullableFilter<"TreatmentTemplate">
    studyId?: StringFilter<"TreatmentTemplate"> | string
    createdAt?: DateTimeFilter<"TreatmentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentTemplate"> | Date | string
    study?: XOR<StudyScalarRelationFilter, StudyWhereInput>
    treatments?: TreatmentListRelationFilter
  }, "id">

  export type TreatmentTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    protocol?: SortOrderInput | SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TreatmentTemplateCountOrderByAggregateInput
    _max?: TreatmentTemplateMaxOrderByAggregateInput
    _min?: TreatmentTemplateMinOrderByAggregateInput
  }

  export type TreatmentTemplateScalarWhereWithAggregatesInput = {
    AND?: TreatmentTemplateScalarWhereWithAggregatesInput | TreatmentTemplateScalarWhereWithAggregatesInput[]
    OR?: TreatmentTemplateScalarWhereWithAggregatesInput[]
    NOT?: TreatmentTemplateScalarWhereWithAggregatesInput | TreatmentTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TreatmentTemplate"> | string
    name?: StringWithAggregatesFilter<"TreatmentTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"TreatmentTemplate"> | string | null
    protocol?: JsonNullableWithAggregatesFilter<"TreatmentTemplate">
    studyId?: StringWithAggregatesFilter<"TreatmentTemplate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TreatmentTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TreatmentTemplate"> | Date | string
  }

  export type TreatmentWhereInput = {
    AND?: TreatmentWhereInput | TreatmentWhereInput[]
    OR?: TreatmentWhereInput[]
    NOT?: TreatmentWhereInput | TreatmentWhereInput[]
    id?: StringFilter<"Treatment"> | string
    templateId?: StringNullableFilter<"Treatment"> | string | null
    patientId?: StringFilter<"Treatment"> | string
    studyPatientId?: StringFilter<"Treatment"> | string
    createdById?: StringFilter<"Treatment"> | string
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    administeredAt?: DateTimeFilter<"Treatment"> | Date | string
    name?: StringFilter<"Treatment"> | string
    description?: StringNullableFilter<"Treatment"> | string | null
    dosage?: StringNullableFilter<"Treatment"> | string | null
    notes?: StringNullableFilter<"Treatment"> | string | null
    template?: XOR<TreatmentTemplateNullableScalarRelationFilter, TreatmentTemplateWhereInput> | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    studyPatient?: XOR<StudyPatientScalarRelationFilter, StudyPatientWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    files?: FileListRelationFilter
  }

  export type TreatmentOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrderInput | SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    administeredAt?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    dosage?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    template?: TreatmentTemplateOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    studyPatient?: StudyPatientOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    files?: FileOrderByRelationAggregateInput
  }

  export type TreatmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TreatmentWhereInput | TreatmentWhereInput[]
    OR?: TreatmentWhereInput[]
    NOT?: TreatmentWhereInput | TreatmentWhereInput[]
    templateId?: StringNullableFilter<"Treatment"> | string | null
    patientId?: StringFilter<"Treatment"> | string
    studyPatientId?: StringFilter<"Treatment"> | string
    createdById?: StringFilter<"Treatment"> | string
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    administeredAt?: DateTimeFilter<"Treatment"> | Date | string
    name?: StringFilter<"Treatment"> | string
    description?: StringNullableFilter<"Treatment"> | string | null
    dosage?: StringNullableFilter<"Treatment"> | string | null
    notes?: StringNullableFilter<"Treatment"> | string | null
    template?: XOR<TreatmentTemplateNullableScalarRelationFilter, TreatmentTemplateWhereInput> | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    studyPatient?: XOR<StudyPatientScalarRelationFilter, StudyPatientWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    files?: FileListRelationFilter
  }, "id">

  export type TreatmentOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrderInput | SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    administeredAt?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    dosage?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: TreatmentCountOrderByAggregateInput
    _max?: TreatmentMaxOrderByAggregateInput
    _min?: TreatmentMinOrderByAggregateInput
  }

  export type TreatmentScalarWhereWithAggregatesInput = {
    AND?: TreatmentScalarWhereWithAggregatesInput | TreatmentScalarWhereWithAggregatesInput[]
    OR?: TreatmentScalarWhereWithAggregatesInput[]
    NOT?: TreatmentScalarWhereWithAggregatesInput | TreatmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Treatment"> | string
    templateId?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
    patientId?: StringWithAggregatesFilter<"Treatment"> | string
    studyPatientId?: StringWithAggregatesFilter<"Treatment"> | string
    createdById?: StringWithAggregatesFilter<"Treatment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    administeredAt?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    name?: StringWithAggregatesFilter<"Treatment"> | string
    description?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
    dosage?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
  }

  export type AlertThresholdWhereInput = {
    AND?: AlertThresholdWhereInput | AlertThresholdWhereInput[]
    OR?: AlertThresholdWhereInput[]
    NOT?: AlertThresholdWhereInput | AlertThresholdWhereInput[]
    id?: StringFilter<"AlertThreshold"> | string
    symptomTemplateId?: StringFilter<"AlertThreshold"> | string
    condition?: StringFilter<"AlertThreshold"> | string
    severity?: EnumAlertSeverityFilter<"AlertThreshold"> | $Enums.AlertSeverity
    message?: StringFilter<"AlertThreshold"> | string
    createdAt?: DateTimeFilter<"AlertThreshold"> | Date | string
    updatedAt?: DateTimeFilter<"AlertThreshold"> | Date | string
    symptomTemplate?: XOR<SymptomTemplateScalarRelationFilter, SymptomTemplateWhereInput>
    alerts?: AlertListRelationFilter
  }

  export type AlertThresholdOrderByWithRelationInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    condition?: SortOrder
    severity?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    symptomTemplate?: SymptomTemplateOrderByWithRelationInput
    alerts?: AlertOrderByRelationAggregateInput
  }

  export type AlertThresholdWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlertThresholdWhereInput | AlertThresholdWhereInput[]
    OR?: AlertThresholdWhereInput[]
    NOT?: AlertThresholdWhereInput | AlertThresholdWhereInput[]
    symptomTemplateId?: StringFilter<"AlertThreshold"> | string
    condition?: StringFilter<"AlertThreshold"> | string
    severity?: EnumAlertSeverityFilter<"AlertThreshold"> | $Enums.AlertSeverity
    message?: StringFilter<"AlertThreshold"> | string
    createdAt?: DateTimeFilter<"AlertThreshold"> | Date | string
    updatedAt?: DateTimeFilter<"AlertThreshold"> | Date | string
    symptomTemplate?: XOR<SymptomTemplateScalarRelationFilter, SymptomTemplateWhereInput>
    alerts?: AlertListRelationFilter
  }, "id">

  export type AlertThresholdOrderByWithAggregationInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    condition?: SortOrder
    severity?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlertThresholdCountOrderByAggregateInput
    _max?: AlertThresholdMaxOrderByAggregateInput
    _min?: AlertThresholdMinOrderByAggregateInput
  }

  export type AlertThresholdScalarWhereWithAggregatesInput = {
    AND?: AlertThresholdScalarWhereWithAggregatesInput | AlertThresholdScalarWhereWithAggregatesInput[]
    OR?: AlertThresholdScalarWhereWithAggregatesInput[]
    NOT?: AlertThresholdScalarWhereWithAggregatesInput | AlertThresholdScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AlertThreshold"> | string
    symptomTemplateId?: StringWithAggregatesFilter<"AlertThreshold"> | string
    condition?: StringWithAggregatesFilter<"AlertThreshold"> | string
    severity?: EnumAlertSeverityWithAggregatesFilter<"AlertThreshold"> | $Enums.AlertSeverity
    message?: StringWithAggregatesFilter<"AlertThreshold"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AlertThreshold"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AlertThreshold"> | Date | string
  }

  export type AlertWhereInput = {
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    id?: StringFilter<"Alert"> | string
    thresholdId?: StringFilter<"Alert"> | string
    observationId?: StringFilter<"Alert"> | string
    triggeredAt?: DateTimeFilter<"Alert"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    threshold?: XOR<AlertThresholdScalarRelationFilter, AlertThresholdWhereInput>
    observation?: XOR<ObservationScalarRelationFilter, ObservationWhereInput>
    notifications?: NotificationListRelationFilter
  }

  export type AlertOrderByWithRelationInput = {
    id?: SortOrder
    thresholdId?: SortOrder
    observationId?: SortOrder
    triggeredAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    threshold?: AlertThresholdOrderByWithRelationInput
    observation?: ObservationOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type AlertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    thresholdId?: StringFilter<"Alert"> | string
    observationId?: StringFilter<"Alert"> | string
    triggeredAt?: DateTimeFilter<"Alert"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    threshold?: XOR<AlertThresholdScalarRelationFilter, AlertThresholdWhereInput>
    observation?: XOR<ObservationScalarRelationFilter, ObservationWhereInput>
    notifications?: NotificationListRelationFilter
  }, "id">

  export type AlertOrderByWithAggregationInput = {
    id?: SortOrder
    thresholdId?: SortOrder
    observationId?: SortOrder
    triggeredAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    _count?: AlertCountOrderByAggregateInput
    _max?: AlertMaxOrderByAggregateInput
    _min?: AlertMinOrderByAggregateInput
  }

  export type AlertScalarWhereWithAggregatesInput = {
    AND?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    OR?: AlertScalarWhereWithAggregatesInput[]
    NOT?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Alert"> | string
    thresholdId?: StringWithAggregatesFilter<"Alert"> | string
    observationId?: StringWithAggregatesFilter<"Alert"> | string
    triggeredAt?: DateTimeWithAggregatesFilter<"Alert"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Alert"> | Date | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    alertId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    alert?: XOR<AlertNullableScalarRelationFilter, AlertWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    alertId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    readAt?: SortOrderInput | SortOrder
    isRead?: SortOrder
    user?: UserOrderByWithRelationInput
    alert?: AlertOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    alertId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    alert?: XOR<AlertNullableScalarRelationFilter, AlertWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    alertId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    readAt?: SortOrderInput | SortOrder
    isRead?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    alertId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    filename?: StringFilter<"File"> | string
    filepath?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    createdAt?: DateTimeFilter<"File"> | Date | string
    patientId?: StringNullableFilter<"File"> | string | null
    observationId?: StringNullableFilter<"File"> | string | null
    treatmentId?: StringNullableFilter<"File"> | string | null
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    observation?: XOR<ObservationNullableScalarRelationFilter, ObservationWhereInput> | null
    treatment?: XOR<TreatmentNullableScalarRelationFilter, TreatmentWhereInput> | null
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    patientId?: SortOrderInput | SortOrder
    observationId?: SortOrderInput | SortOrder
    treatmentId?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    observation?: ObservationOrderByWithRelationInput
    treatment?: TreatmentOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    filename?: StringFilter<"File"> | string
    filepath?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    createdAt?: DateTimeFilter<"File"> | Date | string
    patientId?: StringNullableFilter<"File"> | string | null
    observationId?: StringNullableFilter<"File"> | string | null
    treatmentId?: StringNullableFilter<"File"> | string | null
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    observation?: XOR<ObservationNullableScalarRelationFilter, ObservationWhereInput> | null
    treatment?: XOR<TreatmentNullableScalarRelationFilter, TreatmentWhereInput> | null
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    patientId?: SortOrderInput | SortOrder
    observationId?: SortOrderInput | SortOrder
    treatmentId?: SortOrderInput | SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    filename?: StringWithAggregatesFilter<"File"> | string
    filepath?: StringWithAggregatesFilter<"File"> | string
    mimetype?: StringWithAggregatesFilter<"File"> | string
    size?: IntWithAggregatesFilter<"File"> | number
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    patientId?: StringNullableWithAggregatesFilter<"File"> | string | null
    observationId?: StringNullableWithAggregatesFilter<"File"> | string | null
    treatmentId?: StringNullableWithAggregatesFilter<"File"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    practice?: PracticeCreateNestedOneWithoutUsersInput
    createdStudies?: StudyCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    observations?: ObservationCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    practiceId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdStudies?: StudyUncheckedCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentUncheckedCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    observations?: ObservationUncheckedCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practice?: PracticeUpdateOneWithoutUsersNestedInput
    createdStudies?: StudyUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    practiceId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdStudies?: StudyUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUncheckedUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    practiceId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    practiceId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PracticeCreateInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    users?: UserCreateNestedManyWithoutPracticeInput
    patients?: PatientCreateNestedManyWithoutPracticeInput
    studies?: StudyCreateNestedManyWithoutPracticeInput
    subscriptionHistory?: SubscriptionHistoryCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    users?: UserUncheckedCreateNestedManyWithoutPracticeInput
    patients?: PatientUncheckedCreateNestedManyWithoutPracticeInput
    studies?: StudyUncheckedCreateNestedManyWithoutPracticeInput
    subscriptionHistory?: SubscriptionHistoryUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutPracticeNestedInput
    patients?: PatientUpdateManyWithoutPracticeNestedInput
    studies?: StudyUpdateManyWithoutPracticeNestedInput
    subscriptionHistory?: SubscriptionHistoryUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutPracticeNestedInput
    patients?: PatientUncheckedUpdateManyWithoutPracticeNestedInput
    studies?: StudyUncheckedUpdateManyWithoutPracticeNestedInput
    subscriptionHistory?: SubscriptionHistoryUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
  }

  export type PracticeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
  }

  export type PracticeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
  }

  export type SubscriptionHistoryCreateInput = {
    id?: string
    tier: $Enums.SubscriptionTier
    startDate: Date | string
    endDate?: Date | string | null
    amount?: number | null
    paymentId?: string | null
    createdAt?: Date | string
    practice: PracticeCreateNestedOneWithoutSubscriptionHistoryInput
  }

  export type SubscriptionHistoryUncheckedCreateInput = {
    id?: string
    practiceId: string
    tier: $Enums.SubscriptionTier
    startDate: Date | string
    endDate?: Date | string | null
    amount?: number | null
    paymentId?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practice?: PracticeUpdateOneRequiredWithoutSubscriptionHistoryNestedInput
  }

  export type SubscriptionHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    tier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionHistoryCreateManyInput = {
    id?: string
    practiceId: string
    tier: $Enums.SubscriptionTier
    startDate: Date | string
    endDate?: Date | string | null
    amount?: number | null
    paymentId?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    tier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice: PracticeCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    studies?: StudyPatientCreateNestedManyWithoutPatientInput
    observations?: ObservationCreateNestedManyWithoutPatientInput
    treatments?: TreatmentCreateNestedManyWithoutPatientInput
    files?: FileCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedCreateNestedManyWithoutPatientInput
    observations?: ObservationUncheckedCreateNestedManyWithoutPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutPatientInput
    files?: FileUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice?: PracticeUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    studies?: StudyPatientUpdateManyWithoutPatientNestedInput
    observations?: ObservationUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutPatientNestedInput
    files?: FileUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedUpdateManyWithoutPatientNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutPatientNestedInput
    files?: FileUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StudyCreateInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    practice: PracticeCreateNestedOneWithoutStudiesInput
    createdBy: UserCreateNestedOneWithoutCreatedStudiesInput
    patients?: StudyPatientCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateCreateNestedManyWithoutStudyInput
    notes?: StudyNoteCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    patients?: StudyPatientUncheckedCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentUncheckedCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateUncheckedCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateUncheckedCreateNestedManyWithoutStudyInput
    notes?: StudyNoteUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    practice?: PracticeUpdateOneRequiredWithoutStudiesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedStudiesNestedInput
    patients?: StudyPatientUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    patients?: StudyPatientUncheckedUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUncheckedUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUncheckedUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUncheckedUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type StudyCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
  }

  export type StudyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudyPatientCreateInput = {
    id?: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    study: StudyCreateNestedOneWithoutPatientsInput
    patient: PatientCreateNestedOneWithoutStudiesInput
    observations?: ObservationCreateNestedManyWithoutStudyPatientInput
    treatments?: TreatmentCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientUncheckedCreateInput = {
    id?: string
    studyId: string
    patientId: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    observations?: ObservationUncheckedCreateNestedManyWithoutStudyPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    study?: StudyUpdateOneRequiredWithoutPatientsNestedInput
    patient?: PatientUpdateOneRequiredWithoutStudiesNestedInput
    observations?: ObservationUpdateManyWithoutStudyPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutStudyPatientNestedInput
  }

  export type StudyPatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    observations?: ObservationUncheckedUpdateManyWithoutStudyPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutStudyPatientNestedInput
  }

  export type StudyPatientCreateManyInput = {
    id?: string
    studyId: string
    patientId: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
  }

  export type StudyPatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudyPatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudyAssignmentCreateInput = {
    id?: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
    study: StudyCreateNestedOneWithoutAssignedUsersInput
    user: UserCreateNestedOneWithoutAssignedStudiesInput
  }

  export type StudyAssignmentUncheckedCreateInput = {
    id?: string
    studyId: string
    userId: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
  }

  export type StudyAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
    study?: StudyUpdateOneRequiredWithoutAssignedUsersNestedInput
    user?: UserUpdateOneRequiredWithoutAssignedStudiesNestedInput
  }

  export type StudyAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
  }

  export type StudyAssignmentCreateManyInput = {
    id?: string
    studyId: string
    userId: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
  }

  export type StudyAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
  }

  export type StudyAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
  }

  export type StudyNoteCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    study: StudyCreateNestedOneWithoutNotesInput
  }

  export type StudyNoteUncheckedCreateInput = {
    id?: string
    studyId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudyNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    study?: StudyUpdateOneRequiredWithoutNotesNestedInput
  }

  export type StudyNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyNoteCreateManyInput = {
    id?: string
    studyId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudyNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SymptomTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    study: StudyCreateNestedOneWithoutSymptomTemplatesInput
    observations?: ObservationCreateNestedManyWithoutSymptomTemplateInput
    alertThresholds?: AlertThresholdCreateNestedManyWithoutSymptomTemplateInput
  }

  export type SymptomTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    studyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    observations?: ObservationUncheckedCreateNestedManyWithoutSymptomTemplateInput
    alertThresholds?: AlertThresholdUncheckedCreateNestedManyWithoutSymptomTemplateInput
  }

  export type SymptomTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    study?: StudyUpdateOneRequiredWithoutSymptomTemplatesNestedInput
    observations?: ObservationUpdateManyWithoutSymptomTemplateNestedInput
    alertThresholds?: AlertThresholdUpdateManyWithoutSymptomTemplateNestedInput
  }

  export type SymptomTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    studyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: ObservationUncheckedUpdateManyWithoutSymptomTemplateNestedInput
    alertThresholds?: AlertThresholdUncheckedUpdateManyWithoutSymptomTemplateNestedInput
  }

  export type SymptomTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    studyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SymptomTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SymptomTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    studyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ObservationCreateInput = {
    id?: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    symptomTemplate: SymptomTemplateCreateNestedOneWithoutObservationsInput
    patient: PatientCreateNestedOneWithoutObservationsInput
    studyPatient: StudyPatientCreateNestedOneWithoutObservationsInput
    recordedBy: UserCreateNestedOneWithoutObservationsInput
    files?: FileCreateNestedManyWithoutObservationInput
    alerts?: AlertCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateInput = {
    id?: string
    symptomTemplateId: string
    patientId: string
    studyPatientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutObservationInput
    alerts?: AlertUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    symptomTemplate?: SymptomTemplateUpdateOneRequiredWithoutObservationsNestedInput
    patient?: PatientUpdateOneRequiredWithoutObservationsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutObservationsNestedInput
    recordedBy?: UserUpdateOneRequiredWithoutObservationsNestedInput
    files?: FileUpdateManyWithoutObservationNestedInput
    alerts?: AlertUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutObservationNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationCreateManyInput = {
    id?: string
    symptomTemplateId: string
    patientId: string
    studyPatientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ObservationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ObservationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TreatmentTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    study: StudyCreateNestedOneWithoutTreatmentTemplatesInput
    treatments?: TreatmentCreateNestedManyWithoutTemplateInput
  }

  export type TreatmentTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    studyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    treatments?: TreatmentUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TreatmentTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    study?: StudyUpdateOneRequiredWithoutTreatmentTemplatesNestedInput
    treatments?: TreatmentUpdateManyWithoutTemplateNestedInput
  }

  export type TreatmentTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    studyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatments?: TreatmentUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type TreatmentTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    studyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    studyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentCreateInput = {
    id?: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    template?: TreatmentTemplateCreateNestedOneWithoutTreatmentsInput
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    studyPatient: StudyPatientCreateNestedOneWithoutTreatmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedTreatmentsInput
    files?: FileCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateInput = {
    id?: string
    templateId?: string | null
    patientId: string
    studyPatientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    template?: TreatmentTemplateUpdateOneWithoutTreatmentsNestedInput
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutTreatmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
    files?: FileUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentCreateManyInput = {
    id?: string
    templateId?: string | null
    patientId: string
    studyPatientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
  }

  export type TreatmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TreatmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlertThresholdCreateInput = {
    id?: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    symptomTemplate: SymptomTemplateCreateNestedOneWithoutAlertThresholdsInput
    alerts?: AlertCreateNestedManyWithoutThresholdInput
  }

  export type AlertThresholdUncheckedCreateInput = {
    id?: string
    symptomTemplateId: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alerts?: AlertUncheckedCreateNestedManyWithoutThresholdInput
  }

  export type AlertThresholdUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    symptomTemplate?: SymptomTemplateUpdateOneRequiredWithoutAlertThresholdsNestedInput
    alerts?: AlertUpdateManyWithoutThresholdNestedInput
  }

  export type AlertThresholdUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alerts?: AlertUncheckedUpdateManyWithoutThresholdNestedInput
  }

  export type AlertThresholdCreateManyInput = {
    id?: string
    symptomTemplateId: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlertThresholdUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertThresholdUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertCreateInput = {
    id?: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
    threshold: AlertThresholdCreateNestedOneWithoutAlertsInput
    observation: ObservationCreateNestedOneWithoutAlertsInput
    notifications?: NotificationCreateNestedManyWithoutAlertInput
  }

  export type AlertUncheckedCreateInput = {
    id?: string
    thresholdId: string
    observationId: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
    notifications?: NotificationUncheckedCreateNestedManyWithoutAlertInput
  }

  export type AlertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threshold?: AlertThresholdUpdateOneRequiredWithoutAlertsNestedInput
    observation?: ObservationUpdateOneRequiredWithoutAlertsNestedInput
    notifications?: NotificationUpdateManyWithoutAlertNestedInput
  }

  export type AlertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    thresholdId?: StringFieldUpdateOperationsInput | string
    observationId?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: NotificationUncheckedUpdateManyWithoutAlertNestedInput
  }

  export type AlertCreateManyInput = {
    id?: string
    thresholdId: string
    observationId: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type AlertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    thresholdId?: StringFieldUpdateOperationsInput | string
    observationId?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
    alert?: AlertCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    message: string
    alertId?: string | null
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    alert?: AlertUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    alertId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    title: string
    message: string
    alertId?: string | null
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    alertId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FileCreateInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patient?: PatientCreateNestedOneWithoutFilesInput
    observation?: ObservationCreateNestedOneWithoutFilesInput
    treatment?: TreatmentCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patientId?: string | null
    observationId?: string | null
    treatmentId?: string | null
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneWithoutFilesNestedInput
    observation?: ObservationUpdateOneWithoutFilesNestedInput
    treatment?: TreatmentUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateManyInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patientId?: string | null
    observationId?: string | null
    treatmentId?: string | null
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PracticeNullableScalarRelationFilter = {
    is?: PracticeWhereInput | null
    isNot?: PracticeWhereInput | null
  }

  export type StudyListRelationFilter = {
    every?: StudyWhereInput
    some?: StudyWhereInput
    none?: StudyWhereInput
  }

  export type StudyAssignmentListRelationFilter = {
    every?: StudyAssignmentWhereInput
    some?: StudyAssignmentWhereInput
    none?: StudyAssignmentWhereInput
  }

  export type TreatmentListRelationFilter = {
    every?: TreatmentWhereInput
    some?: TreatmentWhereInput
    none?: TreatmentWhereInput
  }

  export type ObservationListRelationFilter = {
    every?: ObservationWhereInput
    some?: ObservationWhereInput
    none?: ObservationWhereInput
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StudyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudyAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TreatmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ObservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    practiceId?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    practiceId?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    practiceId?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumSubscriptionTierFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionTier | EnumSubscriptionTierFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionTier[] | ListEnumSubscriptionTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionTier[] | ListEnumSubscriptionTierFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionTierFilter<$PrismaModel> | $Enums.SubscriptionTier
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SubscriptionHistoryListRelationFilter = {
    every?: SubscriptionHistoryWhereInput
    some?: SubscriptionHistoryWhereInput
    none?: SubscriptionHistoryWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PracticeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    logo?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionStartDate?: SortOrder
    subscriptionEndDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    customBranding?: SortOrder
    maxStorage?: SortOrder
    currentStorage?: SortOrder
  }

  export type PracticeAvgOrderByAggregateInput = {
    maxStorage?: SortOrder
    currentStorage?: SortOrder
  }

  export type PracticeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    logo?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionStartDate?: SortOrder
    subscriptionEndDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    maxStorage?: SortOrder
    currentStorage?: SortOrder
  }

  export type PracticeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    logo?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    subscriptionStartDate?: SortOrder
    subscriptionEndDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    maxStorage?: SortOrder
    currentStorage?: SortOrder
  }

  export type PracticeSumOrderByAggregateInput = {
    maxStorage?: SortOrder
    currentStorage?: SortOrder
  }

  export type EnumSubscriptionTierWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionTier | EnumSubscriptionTierFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionTier[] | ListEnumSubscriptionTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionTier[] | ListEnumSubscriptionTierFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionTierWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionTier
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionTierFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionTierFilter<$PrismaModel>
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PracticeScalarRelationFilter = {
    is?: PracticeWhereInput
    isNot?: PracticeWhereInput
  }

  export type SubscriptionHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    tier?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    amount?: SortOrder
    paymentId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubscriptionHistoryAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type SubscriptionHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    tier?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    amount?: SortOrder
    paymentId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubscriptionHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    tier?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    amount?: SortOrder
    paymentId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubscriptionHistorySumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumSexNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSexNullableFilter<$PrismaModel> | $Enums.Sex | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StudyPatientListRelationFilter = {
    every?: StudyPatientWhereInput
    some?: StudyPatientWhereInput
    none?: StudyPatientWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type StudyPatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    species?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    sex?: SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    ownerName?: SortOrder
    ownerEmail?: SortOrder
    ownerPhone?: SortOrder
    medicalHistory?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    age?: SortOrder
    weight?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    species?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    sex?: SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    ownerName?: SortOrder
    ownerEmail?: SortOrder
    ownerPhone?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    species?: SortOrder
    breed?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    sex?: SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    ownerId?: SortOrder
    ownerName?: SortOrder
    ownerEmail?: SortOrder
    ownerPhone?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    age?: SortOrder
    weight?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumSexNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSexNullableWithAggregatesFilter<$PrismaModel> | $Enums.Sex | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSexNullableFilter<$PrismaModel>
    _max?: NestedEnumSexNullableFilter<$PrismaModel>
  }

  export type EnumStudyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StudyStatus | EnumStudyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StudyStatus[] | ListEnumStudyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StudyStatus[] | ListEnumStudyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStudyStatusFilter<$PrismaModel> | $Enums.StudyStatus
  }

  export type SymptomTemplateListRelationFilter = {
    every?: SymptomTemplateWhereInput
    some?: SymptomTemplateWhereInput
    none?: SymptomTemplateWhereInput
  }

  export type TreatmentTemplateListRelationFilter = {
    every?: TreatmentTemplateWhereInput
    some?: TreatmentTemplateWhereInput
    none?: TreatmentTemplateWhereInput
  }

  export type StudyNoteListRelationFilter = {
    every?: StudyNoteWhereInput
    some?: StudyNoteWhereInput
    none?: StudyNoteWhereInput
  }

  export type SymptomTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TreatmentTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudyNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudyCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    protocol?: SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
  }

  export type StudyMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
  }

  export type StudyMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    practiceId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    isTemplate?: SortOrder
  }

  export type EnumStudyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudyStatus | EnumStudyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StudyStatus[] | ListEnumStudyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StudyStatus[] | ListEnumStudyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStudyStatusWithAggregatesFilter<$PrismaModel> | $Enums.StudyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStudyStatusFilter<$PrismaModel>
    _max?: NestedEnumStudyStatusFilter<$PrismaModel>
  }

  export type StudyScalarRelationFilter = {
    is?: StudyWhereInput
    isNot?: StudyWhereInput
  }

  export type PatientScalarRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type StudyPatientStudyIdPatientIdCompoundUniqueInput = {
    studyId: string
    patientId: string
  }

  export type StudyPatientCountOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    patientId?: SortOrder
    enrollmentDate?: SortOrder
    exitDate?: SortOrder
    isActive?: SortOrder
  }

  export type StudyPatientMaxOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    patientId?: SortOrder
    enrollmentDate?: SortOrder
    exitDate?: SortOrder
    isActive?: SortOrder
  }

  export type StudyPatientMinOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    patientId?: SortOrder
    enrollmentDate?: SortOrder
    exitDate?: SortOrder
    isActive?: SortOrder
  }

  export type EnumStudyRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.StudyRole | EnumStudyRoleFieldRefInput<$PrismaModel>
    in?: $Enums.StudyRole[] | ListEnumStudyRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StudyRole[] | ListEnumStudyRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumStudyRoleFilter<$PrismaModel> | $Enums.StudyRole
  }

  export type StudyAssignmentStudyIdUserIdCompoundUniqueInput = {
    studyId: string
    userId: string
  }

  export type StudyAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    role?: SortOrder
  }

  export type StudyAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    role?: SortOrder
  }

  export type StudyAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    role?: SortOrder
  }

  export type EnumStudyRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudyRole | EnumStudyRoleFieldRefInput<$PrismaModel>
    in?: $Enums.StudyRole[] | ListEnumStudyRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StudyRole[] | ListEnumStudyRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumStudyRoleWithAggregatesFilter<$PrismaModel> | $Enums.StudyRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStudyRoleFilter<$PrismaModel>
    _max?: NestedEnumStudyRoleFilter<$PrismaModel>
  }

  export type StudyNoteCountOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudyNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudyNoteMinOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSymptomDataTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SymptomDataType | EnumSymptomDataTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SymptomDataType[] | ListEnumSymptomDataTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SymptomDataType[] | ListEnumSymptomDataTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSymptomDataTypeFilter<$PrismaModel> | $Enums.SymptomDataType
  }

  export type AlertThresholdListRelationFilter = {
    every?: AlertThresholdWhereInput
    some?: AlertThresholdWhereInput
    none?: AlertThresholdWhereInput
  }

  export type AlertThresholdOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SymptomTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    dataType?: SortOrder
    units?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
    options?: SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SymptomTemplateAvgOrderByAggregateInput = {
    minValue?: SortOrder
    maxValue?: SortOrder
  }

  export type SymptomTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    dataType?: SortOrder
    units?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SymptomTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    dataType?: SortOrder
    units?: SortOrder
    minValue?: SortOrder
    maxValue?: SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SymptomTemplateSumOrderByAggregateInput = {
    minValue?: SortOrder
    maxValue?: SortOrder
  }

  export type EnumSymptomDataTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SymptomDataType | EnumSymptomDataTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SymptomDataType[] | ListEnumSymptomDataTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SymptomDataType[] | ListEnumSymptomDataTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSymptomDataTypeWithAggregatesFilter<$PrismaModel> | $Enums.SymptomDataType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSymptomDataTypeFilter<$PrismaModel>
    _max?: NestedEnumSymptomDataTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SymptomTemplateScalarRelationFilter = {
    is?: SymptomTemplateWhereInput
    isNot?: SymptomTemplateWhereInput
  }

  export type StudyPatientScalarRelationFilter = {
    is?: StudyPatientWhereInput
    isNot?: StudyPatientWhereInput
  }

  export type AlertListRelationFilter = {
    every?: AlertWhereInput
    some?: AlertWhereInput
    none?: AlertWhereInput
  }

  export type AlertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ObservationCountOrderByAggregateInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    recordedById?: SortOrder
    recordedAt?: SortOrder
    value?: SortOrder
    notes?: SortOrder
  }

  export type ObservationMaxOrderByAggregateInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    recordedById?: SortOrder
    recordedAt?: SortOrder
    notes?: SortOrder
  }

  export type ObservationMinOrderByAggregateInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    recordedById?: SortOrder
    recordedAt?: SortOrder
    notes?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type TreatmentTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    protocol?: SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    studyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentTemplateNullableScalarRelationFilter = {
    is?: TreatmentTemplateWhereInput | null
    isNot?: TreatmentTemplateWhereInput | null
  }

  export type TreatmentCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    administeredAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dosage?: SortOrder
    notes?: SortOrder
  }

  export type TreatmentMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    administeredAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dosage?: SortOrder
    notes?: SortOrder
  }

  export type TreatmentMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    patientId?: SortOrder
    studyPatientId?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    administeredAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dosage?: SortOrder
    notes?: SortOrder
  }

  export type EnumAlertSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityFilter<$PrismaModel> | $Enums.AlertSeverity
  }

  export type AlertThresholdCountOrderByAggregateInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    condition?: SortOrder
    severity?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlertThresholdMaxOrderByAggregateInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    condition?: SortOrder
    severity?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlertThresholdMinOrderByAggregateInput = {
    id?: SortOrder
    symptomTemplateId?: SortOrder
    condition?: SortOrder
    severity?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAlertSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel> | $Enums.AlertSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertSeverityFilter<$PrismaModel>
    _max?: NestedEnumAlertSeverityFilter<$PrismaModel>
  }

  export type AlertThresholdScalarRelationFilter = {
    is?: AlertThresholdWhereInput
    isNot?: AlertThresholdWhereInput
  }

  export type ObservationScalarRelationFilter = {
    is?: ObservationWhereInput
    isNot?: ObservationWhereInput
  }

  export type AlertCountOrderByAggregateInput = {
    id?: SortOrder
    thresholdId?: SortOrder
    observationId?: SortOrder
    triggeredAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type AlertMaxOrderByAggregateInput = {
    id?: SortOrder
    thresholdId?: SortOrder
    observationId?: SortOrder
    triggeredAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type AlertMinOrderByAggregateInput = {
    id?: SortOrder
    thresholdId?: SortOrder
    observationId?: SortOrder
    triggeredAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type AlertNullableScalarRelationFilter = {
    is?: AlertWhereInput | null
    isNot?: AlertWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    alertId?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    isRead?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    alertId?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    isRead?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    alertId?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    isRead?: SortOrder
  }

  export type PatientNullableScalarRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type ObservationNullableScalarRelationFilter = {
    is?: ObservationWhereInput | null
    isNot?: ObservationWhereInput | null
  }

  export type TreatmentNullableScalarRelationFilter = {
    is?: TreatmentWhereInput | null
    isNot?: TreatmentWhereInput | null
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    patientId?: SortOrder
    observationId?: SortOrder
    treatmentId?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    patientId?: SortOrder
    observationId?: SortOrder
    treatmentId?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    patientId?: SortOrder
    observationId?: SortOrder
    treatmentId?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type PracticeCreateNestedOneWithoutUsersInput = {
    create?: XOR<PracticeCreateWithoutUsersInput, PracticeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutUsersInput
    connect?: PracticeWhereUniqueInput
  }

  export type StudyCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<StudyCreateWithoutCreatedByInput, StudyUncheckedCreateWithoutCreatedByInput> | StudyCreateWithoutCreatedByInput[] | StudyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutCreatedByInput | StudyCreateOrConnectWithoutCreatedByInput[]
    createMany?: StudyCreateManyCreatedByInputEnvelope
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
  }

  export type StudyAssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<StudyAssignmentCreateWithoutUserInput, StudyAssignmentUncheckedCreateWithoutUserInput> | StudyAssignmentCreateWithoutUserInput[] | StudyAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyAssignmentCreateOrConnectWithoutUserInput | StudyAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: StudyAssignmentCreateManyUserInputEnvelope
    connect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
  }

  export type TreatmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput> | TreatmentCreateWithoutCreatedByInput[] | TreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCreatedByInput | TreatmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: TreatmentCreateManyCreatedByInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type ObservationCreateNestedManyWithoutRecordedByInput = {
    create?: XOR<ObservationCreateWithoutRecordedByInput, ObservationUncheckedCreateWithoutRecordedByInput> | ObservationCreateWithoutRecordedByInput[] | ObservationUncheckedCreateWithoutRecordedByInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutRecordedByInput | ObservationCreateOrConnectWithoutRecordedByInput[]
    createMany?: ObservationCreateManyRecordedByInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StudyUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<StudyCreateWithoutCreatedByInput, StudyUncheckedCreateWithoutCreatedByInput> | StudyCreateWithoutCreatedByInput[] | StudyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutCreatedByInput | StudyCreateOrConnectWithoutCreatedByInput[]
    createMany?: StudyCreateManyCreatedByInputEnvelope
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
  }

  export type StudyAssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StudyAssignmentCreateWithoutUserInput, StudyAssignmentUncheckedCreateWithoutUserInput> | StudyAssignmentCreateWithoutUserInput[] | StudyAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyAssignmentCreateOrConnectWithoutUserInput | StudyAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: StudyAssignmentCreateManyUserInputEnvelope
    connect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
  }

  export type TreatmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput> | TreatmentCreateWithoutCreatedByInput[] | TreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCreatedByInput | TreatmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: TreatmentCreateManyCreatedByInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type ObservationUncheckedCreateNestedManyWithoutRecordedByInput = {
    create?: XOR<ObservationCreateWithoutRecordedByInput, ObservationUncheckedCreateWithoutRecordedByInput> | ObservationCreateWithoutRecordedByInput[] | ObservationUncheckedCreateWithoutRecordedByInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutRecordedByInput | ObservationCreateOrConnectWithoutRecordedByInput[]
    createMany?: ObservationCreateManyRecordedByInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PracticeUpdateOneWithoutUsersNestedInput = {
    create?: XOR<PracticeCreateWithoutUsersInput, PracticeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutUsersInput
    upsert?: PracticeUpsertWithoutUsersInput
    disconnect?: PracticeWhereInput | boolean
    delete?: PracticeWhereInput | boolean
    connect?: PracticeWhereUniqueInput
    update?: XOR<XOR<PracticeUpdateToOneWithWhereWithoutUsersInput, PracticeUpdateWithoutUsersInput>, PracticeUncheckedUpdateWithoutUsersInput>
  }

  export type StudyUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<StudyCreateWithoutCreatedByInput, StudyUncheckedCreateWithoutCreatedByInput> | StudyCreateWithoutCreatedByInput[] | StudyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutCreatedByInput | StudyCreateOrConnectWithoutCreatedByInput[]
    upsert?: StudyUpsertWithWhereUniqueWithoutCreatedByInput | StudyUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: StudyCreateManyCreatedByInputEnvelope
    set?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    disconnect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    delete?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    update?: StudyUpdateWithWhereUniqueWithoutCreatedByInput | StudyUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: StudyUpdateManyWithWhereWithoutCreatedByInput | StudyUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: StudyScalarWhereInput | StudyScalarWhereInput[]
  }

  export type StudyAssignmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudyAssignmentCreateWithoutUserInput, StudyAssignmentUncheckedCreateWithoutUserInput> | StudyAssignmentCreateWithoutUserInput[] | StudyAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyAssignmentCreateOrConnectWithoutUserInput | StudyAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: StudyAssignmentUpsertWithWhereUniqueWithoutUserInput | StudyAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudyAssignmentCreateManyUserInputEnvelope
    set?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    disconnect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    delete?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    connect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    update?: StudyAssignmentUpdateWithWhereUniqueWithoutUserInput | StudyAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudyAssignmentUpdateManyWithWhereWithoutUserInput | StudyAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudyAssignmentScalarWhereInput | StudyAssignmentScalarWhereInput[]
  }

  export type TreatmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput> | TreatmentCreateWithoutCreatedByInput[] | TreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCreatedByInput | TreatmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutCreatedByInput | TreatmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TreatmentCreateManyCreatedByInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutCreatedByInput | TreatmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutCreatedByInput | TreatmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type ObservationUpdateManyWithoutRecordedByNestedInput = {
    create?: XOR<ObservationCreateWithoutRecordedByInput, ObservationUncheckedCreateWithoutRecordedByInput> | ObservationCreateWithoutRecordedByInput[] | ObservationUncheckedCreateWithoutRecordedByInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutRecordedByInput | ObservationCreateOrConnectWithoutRecordedByInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutRecordedByInput | ObservationUpsertWithWhereUniqueWithoutRecordedByInput[]
    createMany?: ObservationCreateManyRecordedByInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutRecordedByInput | ObservationUpdateWithWhereUniqueWithoutRecordedByInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutRecordedByInput | ObservationUpdateManyWithWhereWithoutRecordedByInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutCreatedByInput | PatientUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutCreatedByInput | PatientUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutCreatedByInput | PatientUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type StudyUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<StudyCreateWithoutCreatedByInput, StudyUncheckedCreateWithoutCreatedByInput> | StudyCreateWithoutCreatedByInput[] | StudyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutCreatedByInput | StudyCreateOrConnectWithoutCreatedByInput[]
    upsert?: StudyUpsertWithWhereUniqueWithoutCreatedByInput | StudyUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: StudyCreateManyCreatedByInputEnvelope
    set?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    disconnect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    delete?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    update?: StudyUpdateWithWhereUniqueWithoutCreatedByInput | StudyUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: StudyUpdateManyWithWhereWithoutCreatedByInput | StudyUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: StudyScalarWhereInput | StudyScalarWhereInput[]
  }

  export type StudyAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudyAssignmentCreateWithoutUserInput, StudyAssignmentUncheckedCreateWithoutUserInput> | StudyAssignmentCreateWithoutUserInput[] | StudyAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyAssignmentCreateOrConnectWithoutUserInput | StudyAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: StudyAssignmentUpsertWithWhereUniqueWithoutUserInput | StudyAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudyAssignmentCreateManyUserInputEnvelope
    set?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    disconnect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    delete?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    connect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    update?: StudyAssignmentUpdateWithWhereUniqueWithoutUserInput | StudyAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudyAssignmentUpdateManyWithWhereWithoutUserInput | StudyAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudyAssignmentScalarWhereInput | StudyAssignmentScalarWhereInput[]
  }

  export type TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput> | TreatmentCreateWithoutCreatedByInput[] | TreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCreatedByInput | TreatmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutCreatedByInput | TreatmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TreatmentCreateManyCreatedByInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutCreatedByInput | TreatmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutCreatedByInput | TreatmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type ObservationUncheckedUpdateManyWithoutRecordedByNestedInput = {
    create?: XOR<ObservationCreateWithoutRecordedByInput, ObservationUncheckedCreateWithoutRecordedByInput> | ObservationCreateWithoutRecordedByInput[] | ObservationUncheckedCreateWithoutRecordedByInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutRecordedByInput | ObservationCreateOrConnectWithoutRecordedByInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutRecordedByInput | ObservationUpsertWithWhereUniqueWithoutRecordedByInput[]
    createMany?: ObservationCreateManyRecordedByInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutRecordedByInput | ObservationUpdateWithWhereUniqueWithoutRecordedByInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutRecordedByInput | ObservationUpdateManyWithWhereWithoutRecordedByInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutCreatedByInput | PatientUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutCreatedByInput | PatientUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutCreatedByInput | PatientUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutPracticeInput = {
    create?: XOR<UserCreateWithoutPracticeInput, UserUncheckedCreateWithoutPracticeInput> | UserCreateWithoutPracticeInput[] | UserUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPracticeInput | UserCreateOrConnectWithoutPracticeInput[]
    createMany?: UserCreateManyPracticeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutPracticeInput = {
    create?: XOR<PatientCreateWithoutPracticeInput, PatientUncheckedCreateWithoutPracticeInput> | PatientCreateWithoutPracticeInput[] | PatientUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutPracticeInput | PatientCreateOrConnectWithoutPracticeInput[]
    createMany?: PatientCreateManyPracticeInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type StudyCreateNestedManyWithoutPracticeInput = {
    create?: XOR<StudyCreateWithoutPracticeInput, StudyUncheckedCreateWithoutPracticeInput> | StudyCreateWithoutPracticeInput[] | StudyUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutPracticeInput | StudyCreateOrConnectWithoutPracticeInput[]
    createMany?: StudyCreateManyPracticeInputEnvelope
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
  }

  export type SubscriptionHistoryCreateNestedManyWithoutPracticeInput = {
    create?: XOR<SubscriptionHistoryCreateWithoutPracticeInput, SubscriptionHistoryUncheckedCreateWithoutPracticeInput> | SubscriptionHistoryCreateWithoutPracticeInput[] | SubscriptionHistoryUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: SubscriptionHistoryCreateOrConnectWithoutPracticeInput | SubscriptionHistoryCreateOrConnectWithoutPracticeInput[]
    createMany?: SubscriptionHistoryCreateManyPracticeInputEnvelope
    connect?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPracticeInput = {
    create?: XOR<UserCreateWithoutPracticeInput, UserUncheckedCreateWithoutPracticeInput> | UserCreateWithoutPracticeInput[] | UserUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPracticeInput | UserCreateOrConnectWithoutPracticeInput[]
    createMany?: UserCreateManyPracticeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutPracticeInput = {
    create?: XOR<PatientCreateWithoutPracticeInput, PatientUncheckedCreateWithoutPracticeInput> | PatientCreateWithoutPracticeInput[] | PatientUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutPracticeInput | PatientCreateOrConnectWithoutPracticeInput[]
    createMany?: PatientCreateManyPracticeInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type StudyUncheckedCreateNestedManyWithoutPracticeInput = {
    create?: XOR<StudyCreateWithoutPracticeInput, StudyUncheckedCreateWithoutPracticeInput> | StudyCreateWithoutPracticeInput[] | StudyUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutPracticeInput | StudyCreateOrConnectWithoutPracticeInput[]
    createMany?: StudyCreateManyPracticeInputEnvelope
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
  }

  export type SubscriptionHistoryUncheckedCreateNestedManyWithoutPracticeInput = {
    create?: XOR<SubscriptionHistoryCreateWithoutPracticeInput, SubscriptionHistoryUncheckedCreateWithoutPracticeInput> | SubscriptionHistoryCreateWithoutPracticeInput[] | SubscriptionHistoryUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: SubscriptionHistoryCreateOrConnectWithoutPracticeInput | SubscriptionHistoryCreateOrConnectWithoutPracticeInput[]
    createMany?: SubscriptionHistoryCreateManyPracticeInputEnvelope
    connect?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
  }

  export type EnumSubscriptionTierFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionTier
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<UserCreateWithoutPracticeInput, UserUncheckedCreateWithoutPracticeInput> | UserCreateWithoutPracticeInput[] | UserUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPracticeInput | UserCreateOrConnectWithoutPracticeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPracticeInput | UserUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: UserCreateManyPracticeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPracticeInput | UserUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPracticeInput | UserUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<PatientCreateWithoutPracticeInput, PatientUncheckedCreateWithoutPracticeInput> | PatientCreateWithoutPracticeInput[] | PatientUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutPracticeInput | PatientCreateOrConnectWithoutPracticeInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutPracticeInput | PatientUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: PatientCreateManyPracticeInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutPracticeInput | PatientUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutPracticeInput | PatientUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type StudyUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<StudyCreateWithoutPracticeInput, StudyUncheckedCreateWithoutPracticeInput> | StudyCreateWithoutPracticeInput[] | StudyUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutPracticeInput | StudyCreateOrConnectWithoutPracticeInput[]
    upsert?: StudyUpsertWithWhereUniqueWithoutPracticeInput | StudyUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: StudyCreateManyPracticeInputEnvelope
    set?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    disconnect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    delete?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    update?: StudyUpdateWithWhereUniqueWithoutPracticeInput | StudyUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: StudyUpdateManyWithWhereWithoutPracticeInput | StudyUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: StudyScalarWhereInput | StudyScalarWhereInput[]
  }

  export type SubscriptionHistoryUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<SubscriptionHistoryCreateWithoutPracticeInput, SubscriptionHistoryUncheckedCreateWithoutPracticeInput> | SubscriptionHistoryCreateWithoutPracticeInput[] | SubscriptionHistoryUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: SubscriptionHistoryCreateOrConnectWithoutPracticeInput | SubscriptionHistoryCreateOrConnectWithoutPracticeInput[]
    upsert?: SubscriptionHistoryUpsertWithWhereUniqueWithoutPracticeInput | SubscriptionHistoryUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: SubscriptionHistoryCreateManyPracticeInputEnvelope
    set?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
    disconnect?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
    delete?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
    connect?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
    update?: SubscriptionHistoryUpdateWithWhereUniqueWithoutPracticeInput | SubscriptionHistoryUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: SubscriptionHistoryUpdateManyWithWhereWithoutPracticeInput | SubscriptionHistoryUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: SubscriptionHistoryScalarWhereInput | SubscriptionHistoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<UserCreateWithoutPracticeInput, UserUncheckedCreateWithoutPracticeInput> | UserCreateWithoutPracticeInput[] | UserUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPracticeInput | UserCreateOrConnectWithoutPracticeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPracticeInput | UserUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: UserCreateManyPracticeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPracticeInput | UserUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPracticeInput | UserUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<PatientCreateWithoutPracticeInput, PatientUncheckedCreateWithoutPracticeInput> | PatientCreateWithoutPracticeInput[] | PatientUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutPracticeInput | PatientCreateOrConnectWithoutPracticeInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutPracticeInput | PatientUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: PatientCreateManyPracticeInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutPracticeInput | PatientUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutPracticeInput | PatientUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type StudyUncheckedUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<StudyCreateWithoutPracticeInput, StudyUncheckedCreateWithoutPracticeInput> | StudyCreateWithoutPracticeInput[] | StudyUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutPracticeInput | StudyCreateOrConnectWithoutPracticeInput[]
    upsert?: StudyUpsertWithWhereUniqueWithoutPracticeInput | StudyUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: StudyCreateManyPracticeInputEnvelope
    set?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    disconnect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    delete?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    update?: StudyUpdateWithWhereUniqueWithoutPracticeInput | StudyUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: StudyUpdateManyWithWhereWithoutPracticeInput | StudyUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: StudyScalarWhereInput | StudyScalarWhereInput[]
  }

  export type SubscriptionHistoryUncheckedUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<SubscriptionHistoryCreateWithoutPracticeInput, SubscriptionHistoryUncheckedCreateWithoutPracticeInput> | SubscriptionHistoryCreateWithoutPracticeInput[] | SubscriptionHistoryUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: SubscriptionHistoryCreateOrConnectWithoutPracticeInput | SubscriptionHistoryCreateOrConnectWithoutPracticeInput[]
    upsert?: SubscriptionHistoryUpsertWithWhereUniqueWithoutPracticeInput | SubscriptionHistoryUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: SubscriptionHistoryCreateManyPracticeInputEnvelope
    set?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
    disconnect?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
    delete?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
    connect?: SubscriptionHistoryWhereUniqueInput | SubscriptionHistoryWhereUniqueInput[]
    update?: SubscriptionHistoryUpdateWithWhereUniqueWithoutPracticeInput | SubscriptionHistoryUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: SubscriptionHistoryUpdateManyWithWhereWithoutPracticeInput | SubscriptionHistoryUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: SubscriptionHistoryScalarWhereInput | SubscriptionHistoryScalarWhereInput[]
  }

  export type PracticeCreateNestedOneWithoutSubscriptionHistoryInput = {
    create?: XOR<PracticeCreateWithoutSubscriptionHistoryInput, PracticeUncheckedCreateWithoutSubscriptionHistoryInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutSubscriptionHistoryInput
    connect?: PracticeWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PracticeUpdateOneRequiredWithoutSubscriptionHistoryNestedInput = {
    create?: XOR<PracticeCreateWithoutSubscriptionHistoryInput, PracticeUncheckedCreateWithoutSubscriptionHistoryInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutSubscriptionHistoryInput
    upsert?: PracticeUpsertWithoutSubscriptionHistoryInput
    connect?: PracticeWhereUniqueInput
    update?: XOR<XOR<PracticeUpdateToOneWithWhereWithoutSubscriptionHistoryInput, PracticeUpdateWithoutSubscriptionHistoryInput>, PracticeUncheckedUpdateWithoutSubscriptionHistoryInput>
  }

  export type PracticeCreateNestedOneWithoutPatientsInput = {
    create?: XOR<PracticeCreateWithoutPatientsInput, PracticeUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutPatientsInput
    connect?: PracticeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedPatientsInput = {
    create?: XOR<UserCreateWithoutCreatedPatientsInput, UserUncheckedCreateWithoutCreatedPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPatientsInput
    connect?: UserWhereUniqueInput
  }

  export type StudyPatientCreateNestedManyWithoutPatientInput = {
    create?: XOR<StudyPatientCreateWithoutPatientInput, StudyPatientUncheckedCreateWithoutPatientInput> | StudyPatientCreateWithoutPatientInput[] | StudyPatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: StudyPatientCreateOrConnectWithoutPatientInput | StudyPatientCreateOrConnectWithoutPatientInput[]
    createMany?: StudyPatientCreateManyPatientInputEnvelope
    connect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
  }

  export type ObservationCreateNestedManyWithoutPatientInput = {
    create?: XOR<ObservationCreateWithoutPatientInput, ObservationUncheckedCreateWithoutPatientInput> | ObservationCreateWithoutPatientInput[] | ObservationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutPatientInput | ObservationCreateOrConnectWithoutPatientInput[]
    createMany?: ObservationCreateManyPatientInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type TreatmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<TreatmentCreateWithoutPatientInput, TreatmentUncheckedCreateWithoutPatientInput> | TreatmentCreateWithoutPatientInput[] | TreatmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientInput | TreatmentCreateOrConnectWithoutPatientInput[]
    createMany?: TreatmentCreateManyPatientInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutPatientInput = {
    create?: XOR<FileCreateWithoutPatientInput, FileUncheckedCreateWithoutPatientInput> | FileCreateWithoutPatientInput[] | FileUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: FileCreateOrConnectWithoutPatientInput | FileCreateOrConnectWithoutPatientInput[]
    createMany?: FileCreateManyPatientInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type StudyPatientUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<StudyPatientCreateWithoutPatientInput, StudyPatientUncheckedCreateWithoutPatientInput> | StudyPatientCreateWithoutPatientInput[] | StudyPatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: StudyPatientCreateOrConnectWithoutPatientInput | StudyPatientCreateOrConnectWithoutPatientInput[]
    createMany?: StudyPatientCreateManyPatientInputEnvelope
    connect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
  }

  export type ObservationUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ObservationCreateWithoutPatientInput, ObservationUncheckedCreateWithoutPatientInput> | ObservationCreateWithoutPatientInput[] | ObservationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutPatientInput | ObservationCreateOrConnectWithoutPatientInput[]
    createMany?: ObservationCreateManyPatientInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type TreatmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<TreatmentCreateWithoutPatientInput, TreatmentUncheckedCreateWithoutPatientInput> | TreatmentCreateWithoutPatientInput[] | TreatmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientInput | TreatmentCreateOrConnectWithoutPatientInput[]
    createMany?: TreatmentCreateManyPatientInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<FileCreateWithoutPatientInput, FileUncheckedCreateWithoutPatientInput> | FileCreateWithoutPatientInput[] | FileUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: FileCreateOrConnectWithoutPatientInput | FileCreateOrConnectWithoutPatientInput[]
    createMany?: FileCreateManyPatientInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumSexFieldUpdateOperationsInput = {
    set?: $Enums.Sex | null
  }

  export type PracticeUpdateOneRequiredWithoutPatientsNestedInput = {
    create?: XOR<PracticeCreateWithoutPatientsInput, PracticeUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutPatientsInput
    upsert?: PracticeUpsertWithoutPatientsInput
    connect?: PracticeWhereUniqueInput
    update?: XOR<XOR<PracticeUpdateToOneWithWhereWithoutPatientsInput, PracticeUpdateWithoutPatientsInput>, PracticeUncheckedUpdateWithoutPatientsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedPatientsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPatientsInput, UserUncheckedCreateWithoutCreatedPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPatientsInput
    upsert?: UserUpsertWithoutCreatedPatientsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPatientsInput, UserUpdateWithoutCreatedPatientsInput>, UserUncheckedUpdateWithoutCreatedPatientsInput>
  }

  export type StudyPatientUpdateManyWithoutPatientNestedInput = {
    create?: XOR<StudyPatientCreateWithoutPatientInput, StudyPatientUncheckedCreateWithoutPatientInput> | StudyPatientCreateWithoutPatientInput[] | StudyPatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: StudyPatientCreateOrConnectWithoutPatientInput | StudyPatientCreateOrConnectWithoutPatientInput[]
    upsert?: StudyPatientUpsertWithWhereUniqueWithoutPatientInput | StudyPatientUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: StudyPatientCreateManyPatientInputEnvelope
    set?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    disconnect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    delete?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    connect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    update?: StudyPatientUpdateWithWhereUniqueWithoutPatientInput | StudyPatientUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: StudyPatientUpdateManyWithWhereWithoutPatientInput | StudyPatientUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: StudyPatientScalarWhereInput | StudyPatientScalarWhereInput[]
  }

  export type ObservationUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ObservationCreateWithoutPatientInput, ObservationUncheckedCreateWithoutPatientInput> | ObservationCreateWithoutPatientInput[] | ObservationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutPatientInput | ObservationCreateOrConnectWithoutPatientInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutPatientInput | ObservationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ObservationCreateManyPatientInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutPatientInput | ObservationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutPatientInput | ObservationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type TreatmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<TreatmentCreateWithoutPatientInput, TreatmentUncheckedCreateWithoutPatientInput> | TreatmentCreateWithoutPatientInput[] | TreatmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientInput | TreatmentCreateOrConnectWithoutPatientInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutPatientInput | TreatmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: TreatmentCreateManyPatientInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutPatientInput | TreatmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutPatientInput | TreatmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type FileUpdateManyWithoutPatientNestedInput = {
    create?: XOR<FileCreateWithoutPatientInput, FileUncheckedCreateWithoutPatientInput> | FileCreateWithoutPatientInput[] | FileUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: FileCreateOrConnectWithoutPatientInput | FileCreateOrConnectWithoutPatientInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutPatientInput | FileUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: FileCreateManyPatientInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutPatientInput | FileUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: FileUpdateManyWithWhereWithoutPatientInput | FileUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type StudyPatientUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<StudyPatientCreateWithoutPatientInput, StudyPatientUncheckedCreateWithoutPatientInput> | StudyPatientCreateWithoutPatientInput[] | StudyPatientUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: StudyPatientCreateOrConnectWithoutPatientInput | StudyPatientCreateOrConnectWithoutPatientInput[]
    upsert?: StudyPatientUpsertWithWhereUniqueWithoutPatientInput | StudyPatientUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: StudyPatientCreateManyPatientInputEnvelope
    set?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    disconnect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    delete?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    connect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    update?: StudyPatientUpdateWithWhereUniqueWithoutPatientInput | StudyPatientUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: StudyPatientUpdateManyWithWhereWithoutPatientInput | StudyPatientUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: StudyPatientScalarWhereInput | StudyPatientScalarWhereInput[]
  }

  export type ObservationUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ObservationCreateWithoutPatientInput, ObservationUncheckedCreateWithoutPatientInput> | ObservationCreateWithoutPatientInput[] | ObservationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutPatientInput | ObservationCreateOrConnectWithoutPatientInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutPatientInput | ObservationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ObservationCreateManyPatientInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutPatientInput | ObservationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutPatientInput | ObservationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type TreatmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<TreatmentCreateWithoutPatientInput, TreatmentUncheckedCreateWithoutPatientInput> | TreatmentCreateWithoutPatientInput[] | TreatmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientInput | TreatmentCreateOrConnectWithoutPatientInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutPatientInput | TreatmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: TreatmentCreateManyPatientInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutPatientInput | TreatmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutPatientInput | TreatmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<FileCreateWithoutPatientInput, FileUncheckedCreateWithoutPatientInput> | FileCreateWithoutPatientInput[] | FileUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: FileCreateOrConnectWithoutPatientInput | FileCreateOrConnectWithoutPatientInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutPatientInput | FileUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: FileCreateManyPatientInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutPatientInput | FileUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: FileUpdateManyWithWhereWithoutPatientInput | FileUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type PracticeCreateNestedOneWithoutStudiesInput = {
    create?: XOR<PracticeCreateWithoutStudiesInput, PracticeUncheckedCreateWithoutStudiesInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutStudiesInput
    connect?: PracticeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedStudiesInput = {
    create?: XOR<UserCreateWithoutCreatedStudiesInput, UserUncheckedCreateWithoutCreatedStudiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedStudiesInput
    connect?: UserWhereUniqueInput
  }

  export type StudyPatientCreateNestedManyWithoutStudyInput = {
    create?: XOR<StudyPatientCreateWithoutStudyInput, StudyPatientUncheckedCreateWithoutStudyInput> | StudyPatientCreateWithoutStudyInput[] | StudyPatientUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyPatientCreateOrConnectWithoutStudyInput | StudyPatientCreateOrConnectWithoutStudyInput[]
    createMany?: StudyPatientCreateManyStudyInputEnvelope
    connect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
  }

  export type StudyAssignmentCreateNestedManyWithoutStudyInput = {
    create?: XOR<StudyAssignmentCreateWithoutStudyInput, StudyAssignmentUncheckedCreateWithoutStudyInput> | StudyAssignmentCreateWithoutStudyInput[] | StudyAssignmentUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyAssignmentCreateOrConnectWithoutStudyInput | StudyAssignmentCreateOrConnectWithoutStudyInput[]
    createMany?: StudyAssignmentCreateManyStudyInputEnvelope
    connect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
  }

  export type SymptomTemplateCreateNestedManyWithoutStudyInput = {
    create?: XOR<SymptomTemplateCreateWithoutStudyInput, SymptomTemplateUncheckedCreateWithoutStudyInput> | SymptomTemplateCreateWithoutStudyInput[] | SymptomTemplateUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: SymptomTemplateCreateOrConnectWithoutStudyInput | SymptomTemplateCreateOrConnectWithoutStudyInput[]
    createMany?: SymptomTemplateCreateManyStudyInputEnvelope
    connect?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
  }

  export type TreatmentTemplateCreateNestedManyWithoutStudyInput = {
    create?: XOR<TreatmentTemplateCreateWithoutStudyInput, TreatmentTemplateUncheckedCreateWithoutStudyInput> | TreatmentTemplateCreateWithoutStudyInput[] | TreatmentTemplateUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: TreatmentTemplateCreateOrConnectWithoutStudyInput | TreatmentTemplateCreateOrConnectWithoutStudyInput[]
    createMany?: TreatmentTemplateCreateManyStudyInputEnvelope
    connect?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
  }

  export type StudyNoteCreateNestedManyWithoutStudyInput = {
    create?: XOR<StudyNoteCreateWithoutStudyInput, StudyNoteUncheckedCreateWithoutStudyInput> | StudyNoteCreateWithoutStudyInput[] | StudyNoteUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyNoteCreateOrConnectWithoutStudyInput | StudyNoteCreateOrConnectWithoutStudyInput[]
    createMany?: StudyNoteCreateManyStudyInputEnvelope
    connect?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
  }

  export type StudyPatientUncheckedCreateNestedManyWithoutStudyInput = {
    create?: XOR<StudyPatientCreateWithoutStudyInput, StudyPatientUncheckedCreateWithoutStudyInput> | StudyPatientCreateWithoutStudyInput[] | StudyPatientUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyPatientCreateOrConnectWithoutStudyInput | StudyPatientCreateOrConnectWithoutStudyInput[]
    createMany?: StudyPatientCreateManyStudyInputEnvelope
    connect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
  }

  export type StudyAssignmentUncheckedCreateNestedManyWithoutStudyInput = {
    create?: XOR<StudyAssignmentCreateWithoutStudyInput, StudyAssignmentUncheckedCreateWithoutStudyInput> | StudyAssignmentCreateWithoutStudyInput[] | StudyAssignmentUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyAssignmentCreateOrConnectWithoutStudyInput | StudyAssignmentCreateOrConnectWithoutStudyInput[]
    createMany?: StudyAssignmentCreateManyStudyInputEnvelope
    connect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
  }

  export type SymptomTemplateUncheckedCreateNestedManyWithoutStudyInput = {
    create?: XOR<SymptomTemplateCreateWithoutStudyInput, SymptomTemplateUncheckedCreateWithoutStudyInput> | SymptomTemplateCreateWithoutStudyInput[] | SymptomTemplateUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: SymptomTemplateCreateOrConnectWithoutStudyInput | SymptomTemplateCreateOrConnectWithoutStudyInput[]
    createMany?: SymptomTemplateCreateManyStudyInputEnvelope
    connect?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
  }

  export type TreatmentTemplateUncheckedCreateNestedManyWithoutStudyInput = {
    create?: XOR<TreatmentTemplateCreateWithoutStudyInput, TreatmentTemplateUncheckedCreateWithoutStudyInput> | TreatmentTemplateCreateWithoutStudyInput[] | TreatmentTemplateUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: TreatmentTemplateCreateOrConnectWithoutStudyInput | TreatmentTemplateCreateOrConnectWithoutStudyInput[]
    createMany?: TreatmentTemplateCreateManyStudyInputEnvelope
    connect?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
  }

  export type StudyNoteUncheckedCreateNestedManyWithoutStudyInput = {
    create?: XOR<StudyNoteCreateWithoutStudyInput, StudyNoteUncheckedCreateWithoutStudyInput> | StudyNoteCreateWithoutStudyInput[] | StudyNoteUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyNoteCreateOrConnectWithoutStudyInput | StudyNoteCreateOrConnectWithoutStudyInput[]
    createMany?: StudyNoteCreateManyStudyInputEnvelope
    connect?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
  }

  export type EnumStudyStatusFieldUpdateOperationsInput = {
    set?: $Enums.StudyStatus
  }

  export type PracticeUpdateOneRequiredWithoutStudiesNestedInput = {
    create?: XOR<PracticeCreateWithoutStudiesInput, PracticeUncheckedCreateWithoutStudiesInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutStudiesInput
    upsert?: PracticeUpsertWithoutStudiesInput
    connect?: PracticeWhereUniqueInput
    update?: XOR<XOR<PracticeUpdateToOneWithWhereWithoutStudiesInput, PracticeUpdateWithoutStudiesInput>, PracticeUncheckedUpdateWithoutStudiesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedStudiesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedStudiesInput, UserUncheckedCreateWithoutCreatedStudiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedStudiesInput
    upsert?: UserUpsertWithoutCreatedStudiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedStudiesInput, UserUpdateWithoutCreatedStudiesInput>, UserUncheckedUpdateWithoutCreatedStudiesInput>
  }

  export type StudyPatientUpdateManyWithoutStudyNestedInput = {
    create?: XOR<StudyPatientCreateWithoutStudyInput, StudyPatientUncheckedCreateWithoutStudyInput> | StudyPatientCreateWithoutStudyInput[] | StudyPatientUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyPatientCreateOrConnectWithoutStudyInput | StudyPatientCreateOrConnectWithoutStudyInput[]
    upsert?: StudyPatientUpsertWithWhereUniqueWithoutStudyInput | StudyPatientUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: StudyPatientCreateManyStudyInputEnvelope
    set?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    disconnect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    delete?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    connect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    update?: StudyPatientUpdateWithWhereUniqueWithoutStudyInput | StudyPatientUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: StudyPatientUpdateManyWithWhereWithoutStudyInput | StudyPatientUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: StudyPatientScalarWhereInput | StudyPatientScalarWhereInput[]
  }

  export type StudyAssignmentUpdateManyWithoutStudyNestedInput = {
    create?: XOR<StudyAssignmentCreateWithoutStudyInput, StudyAssignmentUncheckedCreateWithoutStudyInput> | StudyAssignmentCreateWithoutStudyInput[] | StudyAssignmentUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyAssignmentCreateOrConnectWithoutStudyInput | StudyAssignmentCreateOrConnectWithoutStudyInput[]
    upsert?: StudyAssignmentUpsertWithWhereUniqueWithoutStudyInput | StudyAssignmentUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: StudyAssignmentCreateManyStudyInputEnvelope
    set?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    disconnect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    delete?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    connect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    update?: StudyAssignmentUpdateWithWhereUniqueWithoutStudyInput | StudyAssignmentUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: StudyAssignmentUpdateManyWithWhereWithoutStudyInput | StudyAssignmentUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: StudyAssignmentScalarWhereInput | StudyAssignmentScalarWhereInput[]
  }

  export type SymptomTemplateUpdateManyWithoutStudyNestedInput = {
    create?: XOR<SymptomTemplateCreateWithoutStudyInput, SymptomTemplateUncheckedCreateWithoutStudyInput> | SymptomTemplateCreateWithoutStudyInput[] | SymptomTemplateUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: SymptomTemplateCreateOrConnectWithoutStudyInput | SymptomTemplateCreateOrConnectWithoutStudyInput[]
    upsert?: SymptomTemplateUpsertWithWhereUniqueWithoutStudyInput | SymptomTemplateUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: SymptomTemplateCreateManyStudyInputEnvelope
    set?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
    disconnect?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
    delete?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
    connect?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
    update?: SymptomTemplateUpdateWithWhereUniqueWithoutStudyInput | SymptomTemplateUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: SymptomTemplateUpdateManyWithWhereWithoutStudyInput | SymptomTemplateUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: SymptomTemplateScalarWhereInput | SymptomTemplateScalarWhereInput[]
  }

  export type TreatmentTemplateUpdateManyWithoutStudyNestedInput = {
    create?: XOR<TreatmentTemplateCreateWithoutStudyInput, TreatmentTemplateUncheckedCreateWithoutStudyInput> | TreatmentTemplateCreateWithoutStudyInput[] | TreatmentTemplateUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: TreatmentTemplateCreateOrConnectWithoutStudyInput | TreatmentTemplateCreateOrConnectWithoutStudyInput[]
    upsert?: TreatmentTemplateUpsertWithWhereUniqueWithoutStudyInput | TreatmentTemplateUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: TreatmentTemplateCreateManyStudyInputEnvelope
    set?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
    disconnect?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
    delete?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
    connect?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
    update?: TreatmentTemplateUpdateWithWhereUniqueWithoutStudyInput | TreatmentTemplateUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: TreatmentTemplateUpdateManyWithWhereWithoutStudyInput | TreatmentTemplateUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: TreatmentTemplateScalarWhereInput | TreatmentTemplateScalarWhereInput[]
  }

  export type StudyNoteUpdateManyWithoutStudyNestedInput = {
    create?: XOR<StudyNoteCreateWithoutStudyInput, StudyNoteUncheckedCreateWithoutStudyInput> | StudyNoteCreateWithoutStudyInput[] | StudyNoteUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyNoteCreateOrConnectWithoutStudyInput | StudyNoteCreateOrConnectWithoutStudyInput[]
    upsert?: StudyNoteUpsertWithWhereUniqueWithoutStudyInput | StudyNoteUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: StudyNoteCreateManyStudyInputEnvelope
    set?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
    disconnect?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
    delete?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
    connect?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
    update?: StudyNoteUpdateWithWhereUniqueWithoutStudyInput | StudyNoteUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: StudyNoteUpdateManyWithWhereWithoutStudyInput | StudyNoteUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: StudyNoteScalarWhereInput | StudyNoteScalarWhereInput[]
  }

  export type StudyPatientUncheckedUpdateManyWithoutStudyNestedInput = {
    create?: XOR<StudyPatientCreateWithoutStudyInput, StudyPatientUncheckedCreateWithoutStudyInput> | StudyPatientCreateWithoutStudyInput[] | StudyPatientUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyPatientCreateOrConnectWithoutStudyInput | StudyPatientCreateOrConnectWithoutStudyInput[]
    upsert?: StudyPatientUpsertWithWhereUniqueWithoutStudyInput | StudyPatientUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: StudyPatientCreateManyStudyInputEnvelope
    set?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    disconnect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    delete?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    connect?: StudyPatientWhereUniqueInput | StudyPatientWhereUniqueInput[]
    update?: StudyPatientUpdateWithWhereUniqueWithoutStudyInput | StudyPatientUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: StudyPatientUpdateManyWithWhereWithoutStudyInput | StudyPatientUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: StudyPatientScalarWhereInput | StudyPatientScalarWhereInput[]
  }

  export type StudyAssignmentUncheckedUpdateManyWithoutStudyNestedInput = {
    create?: XOR<StudyAssignmentCreateWithoutStudyInput, StudyAssignmentUncheckedCreateWithoutStudyInput> | StudyAssignmentCreateWithoutStudyInput[] | StudyAssignmentUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyAssignmentCreateOrConnectWithoutStudyInput | StudyAssignmentCreateOrConnectWithoutStudyInput[]
    upsert?: StudyAssignmentUpsertWithWhereUniqueWithoutStudyInput | StudyAssignmentUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: StudyAssignmentCreateManyStudyInputEnvelope
    set?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    disconnect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    delete?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    connect?: StudyAssignmentWhereUniqueInput | StudyAssignmentWhereUniqueInput[]
    update?: StudyAssignmentUpdateWithWhereUniqueWithoutStudyInput | StudyAssignmentUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: StudyAssignmentUpdateManyWithWhereWithoutStudyInput | StudyAssignmentUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: StudyAssignmentScalarWhereInput | StudyAssignmentScalarWhereInput[]
  }

  export type SymptomTemplateUncheckedUpdateManyWithoutStudyNestedInput = {
    create?: XOR<SymptomTemplateCreateWithoutStudyInput, SymptomTemplateUncheckedCreateWithoutStudyInput> | SymptomTemplateCreateWithoutStudyInput[] | SymptomTemplateUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: SymptomTemplateCreateOrConnectWithoutStudyInput | SymptomTemplateCreateOrConnectWithoutStudyInput[]
    upsert?: SymptomTemplateUpsertWithWhereUniqueWithoutStudyInput | SymptomTemplateUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: SymptomTemplateCreateManyStudyInputEnvelope
    set?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
    disconnect?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
    delete?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
    connect?: SymptomTemplateWhereUniqueInput | SymptomTemplateWhereUniqueInput[]
    update?: SymptomTemplateUpdateWithWhereUniqueWithoutStudyInput | SymptomTemplateUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: SymptomTemplateUpdateManyWithWhereWithoutStudyInput | SymptomTemplateUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: SymptomTemplateScalarWhereInput | SymptomTemplateScalarWhereInput[]
  }

  export type TreatmentTemplateUncheckedUpdateManyWithoutStudyNestedInput = {
    create?: XOR<TreatmentTemplateCreateWithoutStudyInput, TreatmentTemplateUncheckedCreateWithoutStudyInput> | TreatmentTemplateCreateWithoutStudyInput[] | TreatmentTemplateUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: TreatmentTemplateCreateOrConnectWithoutStudyInput | TreatmentTemplateCreateOrConnectWithoutStudyInput[]
    upsert?: TreatmentTemplateUpsertWithWhereUniqueWithoutStudyInput | TreatmentTemplateUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: TreatmentTemplateCreateManyStudyInputEnvelope
    set?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
    disconnect?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
    delete?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
    connect?: TreatmentTemplateWhereUniqueInput | TreatmentTemplateWhereUniqueInput[]
    update?: TreatmentTemplateUpdateWithWhereUniqueWithoutStudyInput | TreatmentTemplateUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: TreatmentTemplateUpdateManyWithWhereWithoutStudyInput | TreatmentTemplateUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: TreatmentTemplateScalarWhereInput | TreatmentTemplateScalarWhereInput[]
  }

  export type StudyNoteUncheckedUpdateManyWithoutStudyNestedInput = {
    create?: XOR<StudyNoteCreateWithoutStudyInput, StudyNoteUncheckedCreateWithoutStudyInput> | StudyNoteCreateWithoutStudyInput[] | StudyNoteUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: StudyNoteCreateOrConnectWithoutStudyInput | StudyNoteCreateOrConnectWithoutStudyInput[]
    upsert?: StudyNoteUpsertWithWhereUniqueWithoutStudyInput | StudyNoteUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: StudyNoteCreateManyStudyInputEnvelope
    set?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
    disconnect?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
    delete?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
    connect?: StudyNoteWhereUniqueInput | StudyNoteWhereUniqueInput[]
    update?: StudyNoteUpdateWithWhereUniqueWithoutStudyInput | StudyNoteUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: StudyNoteUpdateManyWithWhereWithoutStudyInput | StudyNoteUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: StudyNoteScalarWhereInput | StudyNoteScalarWhereInput[]
  }

  export type StudyCreateNestedOneWithoutPatientsInput = {
    create?: XOR<StudyCreateWithoutPatientsInput, StudyUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: StudyCreateOrConnectWithoutPatientsInput
    connect?: StudyWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutStudiesInput = {
    create?: XOR<PatientCreateWithoutStudiesInput, PatientUncheckedCreateWithoutStudiesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutStudiesInput
    connect?: PatientWhereUniqueInput
  }

  export type ObservationCreateNestedManyWithoutStudyPatientInput = {
    create?: XOR<ObservationCreateWithoutStudyPatientInput, ObservationUncheckedCreateWithoutStudyPatientInput> | ObservationCreateWithoutStudyPatientInput[] | ObservationUncheckedCreateWithoutStudyPatientInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutStudyPatientInput | ObservationCreateOrConnectWithoutStudyPatientInput[]
    createMany?: ObservationCreateManyStudyPatientInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type TreatmentCreateNestedManyWithoutStudyPatientInput = {
    create?: XOR<TreatmentCreateWithoutStudyPatientInput, TreatmentUncheckedCreateWithoutStudyPatientInput> | TreatmentCreateWithoutStudyPatientInput[] | TreatmentUncheckedCreateWithoutStudyPatientInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutStudyPatientInput | TreatmentCreateOrConnectWithoutStudyPatientInput[]
    createMany?: TreatmentCreateManyStudyPatientInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type ObservationUncheckedCreateNestedManyWithoutStudyPatientInput = {
    create?: XOR<ObservationCreateWithoutStudyPatientInput, ObservationUncheckedCreateWithoutStudyPatientInput> | ObservationCreateWithoutStudyPatientInput[] | ObservationUncheckedCreateWithoutStudyPatientInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutStudyPatientInput | ObservationCreateOrConnectWithoutStudyPatientInput[]
    createMany?: ObservationCreateManyStudyPatientInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type TreatmentUncheckedCreateNestedManyWithoutStudyPatientInput = {
    create?: XOR<TreatmentCreateWithoutStudyPatientInput, TreatmentUncheckedCreateWithoutStudyPatientInput> | TreatmentCreateWithoutStudyPatientInput[] | TreatmentUncheckedCreateWithoutStudyPatientInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutStudyPatientInput | TreatmentCreateOrConnectWithoutStudyPatientInput[]
    createMany?: TreatmentCreateManyStudyPatientInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type StudyUpdateOneRequiredWithoutPatientsNestedInput = {
    create?: XOR<StudyCreateWithoutPatientsInput, StudyUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: StudyCreateOrConnectWithoutPatientsInput
    upsert?: StudyUpsertWithoutPatientsInput
    connect?: StudyWhereUniqueInput
    update?: XOR<XOR<StudyUpdateToOneWithWhereWithoutPatientsInput, StudyUpdateWithoutPatientsInput>, StudyUncheckedUpdateWithoutPatientsInput>
  }

  export type PatientUpdateOneRequiredWithoutStudiesNestedInput = {
    create?: XOR<PatientCreateWithoutStudiesInput, PatientUncheckedCreateWithoutStudiesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutStudiesInput
    upsert?: PatientUpsertWithoutStudiesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutStudiesInput, PatientUpdateWithoutStudiesInput>, PatientUncheckedUpdateWithoutStudiesInput>
  }

  export type ObservationUpdateManyWithoutStudyPatientNestedInput = {
    create?: XOR<ObservationCreateWithoutStudyPatientInput, ObservationUncheckedCreateWithoutStudyPatientInput> | ObservationCreateWithoutStudyPatientInput[] | ObservationUncheckedCreateWithoutStudyPatientInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutStudyPatientInput | ObservationCreateOrConnectWithoutStudyPatientInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutStudyPatientInput | ObservationUpsertWithWhereUniqueWithoutStudyPatientInput[]
    createMany?: ObservationCreateManyStudyPatientInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutStudyPatientInput | ObservationUpdateWithWhereUniqueWithoutStudyPatientInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutStudyPatientInput | ObservationUpdateManyWithWhereWithoutStudyPatientInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type TreatmentUpdateManyWithoutStudyPatientNestedInput = {
    create?: XOR<TreatmentCreateWithoutStudyPatientInput, TreatmentUncheckedCreateWithoutStudyPatientInput> | TreatmentCreateWithoutStudyPatientInput[] | TreatmentUncheckedCreateWithoutStudyPatientInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutStudyPatientInput | TreatmentCreateOrConnectWithoutStudyPatientInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutStudyPatientInput | TreatmentUpsertWithWhereUniqueWithoutStudyPatientInput[]
    createMany?: TreatmentCreateManyStudyPatientInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutStudyPatientInput | TreatmentUpdateWithWhereUniqueWithoutStudyPatientInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutStudyPatientInput | TreatmentUpdateManyWithWhereWithoutStudyPatientInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type ObservationUncheckedUpdateManyWithoutStudyPatientNestedInput = {
    create?: XOR<ObservationCreateWithoutStudyPatientInput, ObservationUncheckedCreateWithoutStudyPatientInput> | ObservationCreateWithoutStudyPatientInput[] | ObservationUncheckedCreateWithoutStudyPatientInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutStudyPatientInput | ObservationCreateOrConnectWithoutStudyPatientInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutStudyPatientInput | ObservationUpsertWithWhereUniqueWithoutStudyPatientInput[]
    createMany?: ObservationCreateManyStudyPatientInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutStudyPatientInput | ObservationUpdateWithWhereUniqueWithoutStudyPatientInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutStudyPatientInput | ObservationUpdateManyWithWhereWithoutStudyPatientInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type TreatmentUncheckedUpdateManyWithoutStudyPatientNestedInput = {
    create?: XOR<TreatmentCreateWithoutStudyPatientInput, TreatmentUncheckedCreateWithoutStudyPatientInput> | TreatmentCreateWithoutStudyPatientInput[] | TreatmentUncheckedCreateWithoutStudyPatientInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutStudyPatientInput | TreatmentCreateOrConnectWithoutStudyPatientInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutStudyPatientInput | TreatmentUpsertWithWhereUniqueWithoutStudyPatientInput[]
    createMany?: TreatmentCreateManyStudyPatientInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutStudyPatientInput | TreatmentUpdateWithWhereUniqueWithoutStudyPatientInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutStudyPatientInput | TreatmentUpdateManyWithWhereWithoutStudyPatientInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type StudyCreateNestedOneWithoutAssignedUsersInput = {
    create?: XOR<StudyCreateWithoutAssignedUsersInput, StudyUncheckedCreateWithoutAssignedUsersInput>
    connectOrCreate?: StudyCreateOrConnectWithoutAssignedUsersInput
    connect?: StudyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedStudiesInput = {
    create?: XOR<UserCreateWithoutAssignedStudiesInput, UserUncheckedCreateWithoutAssignedStudiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedStudiesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStudyRoleFieldUpdateOperationsInput = {
    set?: $Enums.StudyRole
  }

  export type StudyUpdateOneRequiredWithoutAssignedUsersNestedInput = {
    create?: XOR<StudyCreateWithoutAssignedUsersInput, StudyUncheckedCreateWithoutAssignedUsersInput>
    connectOrCreate?: StudyCreateOrConnectWithoutAssignedUsersInput
    upsert?: StudyUpsertWithoutAssignedUsersInput
    connect?: StudyWhereUniqueInput
    update?: XOR<XOR<StudyUpdateToOneWithWhereWithoutAssignedUsersInput, StudyUpdateWithoutAssignedUsersInput>, StudyUncheckedUpdateWithoutAssignedUsersInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedStudiesNestedInput = {
    create?: XOR<UserCreateWithoutAssignedStudiesInput, UserUncheckedCreateWithoutAssignedStudiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedStudiesInput
    upsert?: UserUpsertWithoutAssignedStudiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedStudiesInput, UserUpdateWithoutAssignedStudiesInput>, UserUncheckedUpdateWithoutAssignedStudiesInput>
  }

  export type StudyCreateNestedOneWithoutNotesInput = {
    create?: XOR<StudyCreateWithoutNotesInput, StudyUncheckedCreateWithoutNotesInput>
    connectOrCreate?: StudyCreateOrConnectWithoutNotesInput
    connect?: StudyWhereUniqueInput
  }

  export type StudyUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<StudyCreateWithoutNotesInput, StudyUncheckedCreateWithoutNotesInput>
    connectOrCreate?: StudyCreateOrConnectWithoutNotesInput
    upsert?: StudyUpsertWithoutNotesInput
    connect?: StudyWhereUniqueInput
    update?: XOR<XOR<StudyUpdateToOneWithWhereWithoutNotesInput, StudyUpdateWithoutNotesInput>, StudyUncheckedUpdateWithoutNotesInput>
  }

  export type StudyCreateNestedOneWithoutSymptomTemplatesInput = {
    create?: XOR<StudyCreateWithoutSymptomTemplatesInput, StudyUncheckedCreateWithoutSymptomTemplatesInput>
    connectOrCreate?: StudyCreateOrConnectWithoutSymptomTemplatesInput
    connect?: StudyWhereUniqueInput
  }

  export type ObservationCreateNestedManyWithoutSymptomTemplateInput = {
    create?: XOR<ObservationCreateWithoutSymptomTemplateInput, ObservationUncheckedCreateWithoutSymptomTemplateInput> | ObservationCreateWithoutSymptomTemplateInput[] | ObservationUncheckedCreateWithoutSymptomTemplateInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutSymptomTemplateInput | ObservationCreateOrConnectWithoutSymptomTemplateInput[]
    createMany?: ObservationCreateManySymptomTemplateInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type AlertThresholdCreateNestedManyWithoutSymptomTemplateInput = {
    create?: XOR<AlertThresholdCreateWithoutSymptomTemplateInput, AlertThresholdUncheckedCreateWithoutSymptomTemplateInput> | AlertThresholdCreateWithoutSymptomTemplateInput[] | AlertThresholdUncheckedCreateWithoutSymptomTemplateInput[]
    connectOrCreate?: AlertThresholdCreateOrConnectWithoutSymptomTemplateInput | AlertThresholdCreateOrConnectWithoutSymptomTemplateInput[]
    createMany?: AlertThresholdCreateManySymptomTemplateInputEnvelope
    connect?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
  }

  export type ObservationUncheckedCreateNestedManyWithoutSymptomTemplateInput = {
    create?: XOR<ObservationCreateWithoutSymptomTemplateInput, ObservationUncheckedCreateWithoutSymptomTemplateInput> | ObservationCreateWithoutSymptomTemplateInput[] | ObservationUncheckedCreateWithoutSymptomTemplateInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutSymptomTemplateInput | ObservationCreateOrConnectWithoutSymptomTemplateInput[]
    createMany?: ObservationCreateManySymptomTemplateInputEnvelope
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
  }

  export type AlertThresholdUncheckedCreateNestedManyWithoutSymptomTemplateInput = {
    create?: XOR<AlertThresholdCreateWithoutSymptomTemplateInput, AlertThresholdUncheckedCreateWithoutSymptomTemplateInput> | AlertThresholdCreateWithoutSymptomTemplateInput[] | AlertThresholdUncheckedCreateWithoutSymptomTemplateInput[]
    connectOrCreate?: AlertThresholdCreateOrConnectWithoutSymptomTemplateInput | AlertThresholdCreateOrConnectWithoutSymptomTemplateInput[]
    createMany?: AlertThresholdCreateManySymptomTemplateInputEnvelope
    connect?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
  }

  export type EnumSymptomDataTypeFieldUpdateOperationsInput = {
    set?: $Enums.SymptomDataType
  }

  export type StudyUpdateOneRequiredWithoutSymptomTemplatesNestedInput = {
    create?: XOR<StudyCreateWithoutSymptomTemplatesInput, StudyUncheckedCreateWithoutSymptomTemplatesInput>
    connectOrCreate?: StudyCreateOrConnectWithoutSymptomTemplatesInput
    upsert?: StudyUpsertWithoutSymptomTemplatesInput
    connect?: StudyWhereUniqueInput
    update?: XOR<XOR<StudyUpdateToOneWithWhereWithoutSymptomTemplatesInput, StudyUpdateWithoutSymptomTemplatesInput>, StudyUncheckedUpdateWithoutSymptomTemplatesInput>
  }

  export type ObservationUpdateManyWithoutSymptomTemplateNestedInput = {
    create?: XOR<ObservationCreateWithoutSymptomTemplateInput, ObservationUncheckedCreateWithoutSymptomTemplateInput> | ObservationCreateWithoutSymptomTemplateInput[] | ObservationUncheckedCreateWithoutSymptomTemplateInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutSymptomTemplateInput | ObservationCreateOrConnectWithoutSymptomTemplateInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutSymptomTemplateInput | ObservationUpsertWithWhereUniqueWithoutSymptomTemplateInput[]
    createMany?: ObservationCreateManySymptomTemplateInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutSymptomTemplateInput | ObservationUpdateWithWhereUniqueWithoutSymptomTemplateInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutSymptomTemplateInput | ObservationUpdateManyWithWhereWithoutSymptomTemplateInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type AlertThresholdUpdateManyWithoutSymptomTemplateNestedInput = {
    create?: XOR<AlertThresholdCreateWithoutSymptomTemplateInput, AlertThresholdUncheckedCreateWithoutSymptomTemplateInput> | AlertThresholdCreateWithoutSymptomTemplateInput[] | AlertThresholdUncheckedCreateWithoutSymptomTemplateInput[]
    connectOrCreate?: AlertThresholdCreateOrConnectWithoutSymptomTemplateInput | AlertThresholdCreateOrConnectWithoutSymptomTemplateInput[]
    upsert?: AlertThresholdUpsertWithWhereUniqueWithoutSymptomTemplateInput | AlertThresholdUpsertWithWhereUniqueWithoutSymptomTemplateInput[]
    createMany?: AlertThresholdCreateManySymptomTemplateInputEnvelope
    set?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
    disconnect?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
    delete?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
    connect?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
    update?: AlertThresholdUpdateWithWhereUniqueWithoutSymptomTemplateInput | AlertThresholdUpdateWithWhereUniqueWithoutSymptomTemplateInput[]
    updateMany?: AlertThresholdUpdateManyWithWhereWithoutSymptomTemplateInput | AlertThresholdUpdateManyWithWhereWithoutSymptomTemplateInput[]
    deleteMany?: AlertThresholdScalarWhereInput | AlertThresholdScalarWhereInput[]
  }

  export type ObservationUncheckedUpdateManyWithoutSymptomTemplateNestedInput = {
    create?: XOR<ObservationCreateWithoutSymptomTemplateInput, ObservationUncheckedCreateWithoutSymptomTemplateInput> | ObservationCreateWithoutSymptomTemplateInput[] | ObservationUncheckedCreateWithoutSymptomTemplateInput[]
    connectOrCreate?: ObservationCreateOrConnectWithoutSymptomTemplateInput | ObservationCreateOrConnectWithoutSymptomTemplateInput[]
    upsert?: ObservationUpsertWithWhereUniqueWithoutSymptomTemplateInput | ObservationUpsertWithWhereUniqueWithoutSymptomTemplateInput[]
    createMany?: ObservationCreateManySymptomTemplateInputEnvelope
    set?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    disconnect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    delete?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    connect?: ObservationWhereUniqueInput | ObservationWhereUniqueInput[]
    update?: ObservationUpdateWithWhereUniqueWithoutSymptomTemplateInput | ObservationUpdateWithWhereUniqueWithoutSymptomTemplateInput[]
    updateMany?: ObservationUpdateManyWithWhereWithoutSymptomTemplateInput | ObservationUpdateManyWithWhereWithoutSymptomTemplateInput[]
    deleteMany?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
  }

  export type AlertThresholdUncheckedUpdateManyWithoutSymptomTemplateNestedInput = {
    create?: XOR<AlertThresholdCreateWithoutSymptomTemplateInput, AlertThresholdUncheckedCreateWithoutSymptomTemplateInput> | AlertThresholdCreateWithoutSymptomTemplateInput[] | AlertThresholdUncheckedCreateWithoutSymptomTemplateInput[]
    connectOrCreate?: AlertThresholdCreateOrConnectWithoutSymptomTemplateInput | AlertThresholdCreateOrConnectWithoutSymptomTemplateInput[]
    upsert?: AlertThresholdUpsertWithWhereUniqueWithoutSymptomTemplateInput | AlertThresholdUpsertWithWhereUniqueWithoutSymptomTemplateInput[]
    createMany?: AlertThresholdCreateManySymptomTemplateInputEnvelope
    set?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
    disconnect?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
    delete?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
    connect?: AlertThresholdWhereUniqueInput | AlertThresholdWhereUniqueInput[]
    update?: AlertThresholdUpdateWithWhereUniqueWithoutSymptomTemplateInput | AlertThresholdUpdateWithWhereUniqueWithoutSymptomTemplateInput[]
    updateMany?: AlertThresholdUpdateManyWithWhereWithoutSymptomTemplateInput | AlertThresholdUpdateManyWithWhereWithoutSymptomTemplateInput[]
    deleteMany?: AlertThresholdScalarWhereInput | AlertThresholdScalarWhereInput[]
  }

  export type SymptomTemplateCreateNestedOneWithoutObservationsInput = {
    create?: XOR<SymptomTemplateCreateWithoutObservationsInput, SymptomTemplateUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: SymptomTemplateCreateOrConnectWithoutObservationsInput
    connect?: SymptomTemplateWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutObservationsInput = {
    create?: XOR<PatientCreateWithoutObservationsInput, PatientUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutObservationsInput
    connect?: PatientWhereUniqueInput
  }

  export type StudyPatientCreateNestedOneWithoutObservationsInput = {
    create?: XOR<StudyPatientCreateWithoutObservationsInput, StudyPatientUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: StudyPatientCreateOrConnectWithoutObservationsInput
    connect?: StudyPatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutObservationsInput = {
    create?: XOR<UserCreateWithoutObservationsInput, UserUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutObservationsInput
    connect?: UserWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutObservationInput = {
    create?: XOR<FileCreateWithoutObservationInput, FileUncheckedCreateWithoutObservationInput> | FileCreateWithoutObservationInput[] | FileUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: FileCreateOrConnectWithoutObservationInput | FileCreateOrConnectWithoutObservationInput[]
    createMany?: FileCreateManyObservationInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type AlertCreateNestedManyWithoutObservationInput = {
    create?: XOR<AlertCreateWithoutObservationInput, AlertUncheckedCreateWithoutObservationInput> | AlertCreateWithoutObservationInput[] | AlertUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutObservationInput | AlertCreateOrConnectWithoutObservationInput[]
    createMany?: AlertCreateManyObservationInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutObservationInput = {
    create?: XOR<FileCreateWithoutObservationInput, FileUncheckedCreateWithoutObservationInput> | FileCreateWithoutObservationInput[] | FileUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: FileCreateOrConnectWithoutObservationInput | FileCreateOrConnectWithoutObservationInput[]
    createMany?: FileCreateManyObservationInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type AlertUncheckedCreateNestedManyWithoutObservationInput = {
    create?: XOR<AlertCreateWithoutObservationInput, AlertUncheckedCreateWithoutObservationInput> | AlertCreateWithoutObservationInput[] | AlertUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutObservationInput | AlertCreateOrConnectWithoutObservationInput[]
    createMany?: AlertCreateManyObservationInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type SymptomTemplateUpdateOneRequiredWithoutObservationsNestedInput = {
    create?: XOR<SymptomTemplateCreateWithoutObservationsInput, SymptomTemplateUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: SymptomTemplateCreateOrConnectWithoutObservationsInput
    upsert?: SymptomTemplateUpsertWithoutObservationsInput
    connect?: SymptomTemplateWhereUniqueInput
    update?: XOR<XOR<SymptomTemplateUpdateToOneWithWhereWithoutObservationsInput, SymptomTemplateUpdateWithoutObservationsInput>, SymptomTemplateUncheckedUpdateWithoutObservationsInput>
  }

  export type PatientUpdateOneRequiredWithoutObservationsNestedInput = {
    create?: XOR<PatientCreateWithoutObservationsInput, PatientUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutObservationsInput
    upsert?: PatientUpsertWithoutObservationsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutObservationsInput, PatientUpdateWithoutObservationsInput>, PatientUncheckedUpdateWithoutObservationsInput>
  }

  export type StudyPatientUpdateOneRequiredWithoutObservationsNestedInput = {
    create?: XOR<StudyPatientCreateWithoutObservationsInput, StudyPatientUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: StudyPatientCreateOrConnectWithoutObservationsInput
    upsert?: StudyPatientUpsertWithoutObservationsInput
    connect?: StudyPatientWhereUniqueInput
    update?: XOR<XOR<StudyPatientUpdateToOneWithWhereWithoutObservationsInput, StudyPatientUpdateWithoutObservationsInput>, StudyPatientUncheckedUpdateWithoutObservationsInput>
  }

  export type UserUpdateOneRequiredWithoutObservationsNestedInput = {
    create?: XOR<UserCreateWithoutObservationsInput, UserUncheckedCreateWithoutObservationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutObservationsInput
    upsert?: UserUpsertWithoutObservationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutObservationsInput, UserUpdateWithoutObservationsInput>, UserUncheckedUpdateWithoutObservationsInput>
  }

  export type FileUpdateManyWithoutObservationNestedInput = {
    create?: XOR<FileCreateWithoutObservationInput, FileUncheckedCreateWithoutObservationInput> | FileCreateWithoutObservationInput[] | FileUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: FileCreateOrConnectWithoutObservationInput | FileCreateOrConnectWithoutObservationInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutObservationInput | FileUpsertWithWhereUniqueWithoutObservationInput[]
    createMany?: FileCreateManyObservationInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutObservationInput | FileUpdateWithWhereUniqueWithoutObservationInput[]
    updateMany?: FileUpdateManyWithWhereWithoutObservationInput | FileUpdateManyWithWhereWithoutObservationInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type AlertUpdateManyWithoutObservationNestedInput = {
    create?: XOR<AlertCreateWithoutObservationInput, AlertUncheckedCreateWithoutObservationInput> | AlertCreateWithoutObservationInput[] | AlertUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutObservationInput | AlertCreateOrConnectWithoutObservationInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutObservationInput | AlertUpsertWithWhereUniqueWithoutObservationInput[]
    createMany?: AlertCreateManyObservationInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutObservationInput | AlertUpdateWithWhereUniqueWithoutObservationInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutObservationInput | AlertUpdateManyWithWhereWithoutObservationInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutObservationNestedInput = {
    create?: XOR<FileCreateWithoutObservationInput, FileUncheckedCreateWithoutObservationInput> | FileCreateWithoutObservationInput[] | FileUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: FileCreateOrConnectWithoutObservationInput | FileCreateOrConnectWithoutObservationInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutObservationInput | FileUpsertWithWhereUniqueWithoutObservationInput[]
    createMany?: FileCreateManyObservationInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutObservationInput | FileUpdateWithWhereUniqueWithoutObservationInput[]
    updateMany?: FileUpdateManyWithWhereWithoutObservationInput | FileUpdateManyWithWhereWithoutObservationInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type AlertUncheckedUpdateManyWithoutObservationNestedInput = {
    create?: XOR<AlertCreateWithoutObservationInput, AlertUncheckedCreateWithoutObservationInput> | AlertCreateWithoutObservationInput[] | AlertUncheckedCreateWithoutObservationInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutObservationInput | AlertCreateOrConnectWithoutObservationInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutObservationInput | AlertUpsertWithWhereUniqueWithoutObservationInput[]
    createMany?: AlertCreateManyObservationInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutObservationInput | AlertUpdateWithWhereUniqueWithoutObservationInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutObservationInput | AlertUpdateManyWithWhereWithoutObservationInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type StudyCreateNestedOneWithoutTreatmentTemplatesInput = {
    create?: XOR<StudyCreateWithoutTreatmentTemplatesInput, StudyUncheckedCreateWithoutTreatmentTemplatesInput>
    connectOrCreate?: StudyCreateOrConnectWithoutTreatmentTemplatesInput
    connect?: StudyWhereUniqueInput
  }

  export type TreatmentCreateNestedManyWithoutTemplateInput = {
    create?: XOR<TreatmentCreateWithoutTemplateInput, TreatmentUncheckedCreateWithoutTemplateInput> | TreatmentCreateWithoutTemplateInput[] | TreatmentUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutTemplateInput | TreatmentCreateOrConnectWithoutTemplateInput[]
    createMany?: TreatmentCreateManyTemplateInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type TreatmentUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<TreatmentCreateWithoutTemplateInput, TreatmentUncheckedCreateWithoutTemplateInput> | TreatmentCreateWithoutTemplateInput[] | TreatmentUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutTemplateInput | TreatmentCreateOrConnectWithoutTemplateInput[]
    createMany?: TreatmentCreateManyTemplateInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type StudyUpdateOneRequiredWithoutTreatmentTemplatesNestedInput = {
    create?: XOR<StudyCreateWithoutTreatmentTemplatesInput, StudyUncheckedCreateWithoutTreatmentTemplatesInput>
    connectOrCreate?: StudyCreateOrConnectWithoutTreatmentTemplatesInput
    upsert?: StudyUpsertWithoutTreatmentTemplatesInput
    connect?: StudyWhereUniqueInput
    update?: XOR<XOR<StudyUpdateToOneWithWhereWithoutTreatmentTemplatesInput, StudyUpdateWithoutTreatmentTemplatesInput>, StudyUncheckedUpdateWithoutTreatmentTemplatesInput>
  }

  export type TreatmentUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<TreatmentCreateWithoutTemplateInput, TreatmentUncheckedCreateWithoutTemplateInput> | TreatmentCreateWithoutTemplateInput[] | TreatmentUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutTemplateInput | TreatmentCreateOrConnectWithoutTemplateInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutTemplateInput | TreatmentUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: TreatmentCreateManyTemplateInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutTemplateInput | TreatmentUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutTemplateInput | TreatmentUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type TreatmentUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<TreatmentCreateWithoutTemplateInput, TreatmentUncheckedCreateWithoutTemplateInput> | TreatmentCreateWithoutTemplateInput[] | TreatmentUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutTemplateInput | TreatmentCreateOrConnectWithoutTemplateInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutTemplateInput | TreatmentUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: TreatmentCreateManyTemplateInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutTemplateInput | TreatmentUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutTemplateInput | TreatmentUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type TreatmentTemplateCreateNestedOneWithoutTreatmentsInput = {
    create?: XOR<TreatmentTemplateCreateWithoutTreatmentsInput, TreatmentTemplateUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: TreatmentTemplateCreateOrConnectWithoutTreatmentsInput
    connect?: TreatmentTemplateWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutTreatmentsInput = {
    create?: XOR<PatientCreateWithoutTreatmentsInput, PatientUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTreatmentsInput
    connect?: PatientWhereUniqueInput
  }

  export type StudyPatientCreateNestedOneWithoutTreatmentsInput = {
    create?: XOR<StudyPatientCreateWithoutTreatmentsInput, StudyPatientUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: StudyPatientCreateOrConnectWithoutTreatmentsInput
    connect?: StudyPatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedTreatmentsInput = {
    create?: XOR<UserCreateWithoutCreatedTreatmentsInput, UserUncheckedCreateWithoutCreatedTreatmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTreatmentsInput
    connect?: UserWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<FileCreateWithoutTreatmentInput, FileUncheckedCreateWithoutTreatmentInput> | FileCreateWithoutTreatmentInput[] | FileUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: FileCreateOrConnectWithoutTreatmentInput | FileCreateOrConnectWithoutTreatmentInput[]
    createMany?: FileCreateManyTreatmentInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<FileCreateWithoutTreatmentInput, FileUncheckedCreateWithoutTreatmentInput> | FileCreateWithoutTreatmentInput[] | FileUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: FileCreateOrConnectWithoutTreatmentInput | FileCreateOrConnectWithoutTreatmentInput[]
    createMany?: FileCreateManyTreatmentInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type TreatmentTemplateUpdateOneWithoutTreatmentsNestedInput = {
    create?: XOR<TreatmentTemplateCreateWithoutTreatmentsInput, TreatmentTemplateUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: TreatmentTemplateCreateOrConnectWithoutTreatmentsInput
    upsert?: TreatmentTemplateUpsertWithoutTreatmentsInput
    disconnect?: TreatmentTemplateWhereInput | boolean
    delete?: TreatmentTemplateWhereInput | boolean
    connect?: TreatmentTemplateWhereUniqueInput
    update?: XOR<XOR<TreatmentTemplateUpdateToOneWithWhereWithoutTreatmentsInput, TreatmentTemplateUpdateWithoutTreatmentsInput>, TreatmentTemplateUncheckedUpdateWithoutTreatmentsInput>
  }

  export type PatientUpdateOneRequiredWithoutTreatmentsNestedInput = {
    create?: XOR<PatientCreateWithoutTreatmentsInput, PatientUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTreatmentsInput
    upsert?: PatientUpsertWithoutTreatmentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutTreatmentsInput, PatientUpdateWithoutTreatmentsInput>, PatientUncheckedUpdateWithoutTreatmentsInput>
  }

  export type StudyPatientUpdateOneRequiredWithoutTreatmentsNestedInput = {
    create?: XOR<StudyPatientCreateWithoutTreatmentsInput, StudyPatientUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: StudyPatientCreateOrConnectWithoutTreatmentsInput
    upsert?: StudyPatientUpsertWithoutTreatmentsInput
    connect?: StudyPatientWhereUniqueInput
    update?: XOR<XOR<StudyPatientUpdateToOneWithWhereWithoutTreatmentsInput, StudyPatientUpdateWithoutTreatmentsInput>, StudyPatientUncheckedUpdateWithoutTreatmentsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedTreatmentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTreatmentsInput, UserUncheckedCreateWithoutCreatedTreatmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTreatmentsInput
    upsert?: UserUpsertWithoutCreatedTreatmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTreatmentsInput, UserUpdateWithoutCreatedTreatmentsInput>, UserUncheckedUpdateWithoutCreatedTreatmentsInput>
  }

  export type FileUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<FileCreateWithoutTreatmentInput, FileUncheckedCreateWithoutTreatmentInput> | FileCreateWithoutTreatmentInput[] | FileUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: FileCreateOrConnectWithoutTreatmentInput | FileCreateOrConnectWithoutTreatmentInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutTreatmentInput | FileUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: FileCreateManyTreatmentInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutTreatmentInput | FileUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: FileUpdateManyWithWhereWithoutTreatmentInput | FileUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<FileCreateWithoutTreatmentInput, FileUncheckedCreateWithoutTreatmentInput> | FileCreateWithoutTreatmentInput[] | FileUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: FileCreateOrConnectWithoutTreatmentInput | FileCreateOrConnectWithoutTreatmentInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutTreatmentInput | FileUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: FileCreateManyTreatmentInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutTreatmentInput | FileUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: FileUpdateManyWithWhereWithoutTreatmentInput | FileUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type SymptomTemplateCreateNestedOneWithoutAlertThresholdsInput = {
    create?: XOR<SymptomTemplateCreateWithoutAlertThresholdsInput, SymptomTemplateUncheckedCreateWithoutAlertThresholdsInput>
    connectOrCreate?: SymptomTemplateCreateOrConnectWithoutAlertThresholdsInput
    connect?: SymptomTemplateWhereUniqueInput
  }

  export type AlertCreateNestedManyWithoutThresholdInput = {
    create?: XOR<AlertCreateWithoutThresholdInput, AlertUncheckedCreateWithoutThresholdInput> | AlertCreateWithoutThresholdInput[] | AlertUncheckedCreateWithoutThresholdInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutThresholdInput | AlertCreateOrConnectWithoutThresholdInput[]
    createMany?: AlertCreateManyThresholdInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type AlertUncheckedCreateNestedManyWithoutThresholdInput = {
    create?: XOR<AlertCreateWithoutThresholdInput, AlertUncheckedCreateWithoutThresholdInput> | AlertCreateWithoutThresholdInput[] | AlertUncheckedCreateWithoutThresholdInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutThresholdInput | AlertCreateOrConnectWithoutThresholdInput[]
    createMany?: AlertCreateManyThresholdInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type EnumAlertSeverityFieldUpdateOperationsInput = {
    set?: $Enums.AlertSeverity
  }

  export type SymptomTemplateUpdateOneRequiredWithoutAlertThresholdsNestedInput = {
    create?: XOR<SymptomTemplateCreateWithoutAlertThresholdsInput, SymptomTemplateUncheckedCreateWithoutAlertThresholdsInput>
    connectOrCreate?: SymptomTemplateCreateOrConnectWithoutAlertThresholdsInput
    upsert?: SymptomTemplateUpsertWithoutAlertThresholdsInput
    connect?: SymptomTemplateWhereUniqueInput
    update?: XOR<XOR<SymptomTemplateUpdateToOneWithWhereWithoutAlertThresholdsInput, SymptomTemplateUpdateWithoutAlertThresholdsInput>, SymptomTemplateUncheckedUpdateWithoutAlertThresholdsInput>
  }

  export type AlertUpdateManyWithoutThresholdNestedInput = {
    create?: XOR<AlertCreateWithoutThresholdInput, AlertUncheckedCreateWithoutThresholdInput> | AlertCreateWithoutThresholdInput[] | AlertUncheckedCreateWithoutThresholdInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutThresholdInput | AlertCreateOrConnectWithoutThresholdInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutThresholdInput | AlertUpsertWithWhereUniqueWithoutThresholdInput[]
    createMany?: AlertCreateManyThresholdInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutThresholdInput | AlertUpdateWithWhereUniqueWithoutThresholdInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutThresholdInput | AlertUpdateManyWithWhereWithoutThresholdInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type AlertUncheckedUpdateManyWithoutThresholdNestedInput = {
    create?: XOR<AlertCreateWithoutThresholdInput, AlertUncheckedCreateWithoutThresholdInput> | AlertCreateWithoutThresholdInput[] | AlertUncheckedCreateWithoutThresholdInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutThresholdInput | AlertCreateOrConnectWithoutThresholdInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutThresholdInput | AlertUpsertWithWhereUniqueWithoutThresholdInput[]
    createMany?: AlertCreateManyThresholdInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutThresholdInput | AlertUpdateWithWhereUniqueWithoutThresholdInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutThresholdInput | AlertUpdateManyWithWhereWithoutThresholdInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type AlertThresholdCreateNestedOneWithoutAlertsInput = {
    create?: XOR<AlertThresholdCreateWithoutAlertsInput, AlertThresholdUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: AlertThresholdCreateOrConnectWithoutAlertsInput
    connect?: AlertThresholdWhereUniqueInput
  }

  export type ObservationCreateNestedOneWithoutAlertsInput = {
    create?: XOR<ObservationCreateWithoutAlertsInput, ObservationUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: ObservationCreateOrConnectWithoutAlertsInput
    connect?: ObservationWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutAlertInput = {
    create?: XOR<NotificationCreateWithoutAlertInput, NotificationUncheckedCreateWithoutAlertInput> | NotificationCreateWithoutAlertInput[] | NotificationUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutAlertInput | NotificationCreateOrConnectWithoutAlertInput[]
    createMany?: NotificationCreateManyAlertInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutAlertInput = {
    create?: XOR<NotificationCreateWithoutAlertInput, NotificationUncheckedCreateWithoutAlertInput> | NotificationCreateWithoutAlertInput[] | NotificationUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutAlertInput | NotificationCreateOrConnectWithoutAlertInput[]
    createMany?: NotificationCreateManyAlertInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AlertThresholdUpdateOneRequiredWithoutAlertsNestedInput = {
    create?: XOR<AlertThresholdCreateWithoutAlertsInput, AlertThresholdUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: AlertThresholdCreateOrConnectWithoutAlertsInput
    upsert?: AlertThresholdUpsertWithoutAlertsInput
    connect?: AlertThresholdWhereUniqueInput
    update?: XOR<XOR<AlertThresholdUpdateToOneWithWhereWithoutAlertsInput, AlertThresholdUpdateWithoutAlertsInput>, AlertThresholdUncheckedUpdateWithoutAlertsInput>
  }

  export type ObservationUpdateOneRequiredWithoutAlertsNestedInput = {
    create?: XOR<ObservationCreateWithoutAlertsInput, ObservationUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: ObservationCreateOrConnectWithoutAlertsInput
    upsert?: ObservationUpsertWithoutAlertsInput
    connect?: ObservationWhereUniqueInput
    update?: XOR<XOR<ObservationUpdateToOneWithWhereWithoutAlertsInput, ObservationUpdateWithoutAlertsInput>, ObservationUncheckedUpdateWithoutAlertsInput>
  }

  export type NotificationUpdateManyWithoutAlertNestedInput = {
    create?: XOR<NotificationCreateWithoutAlertInput, NotificationUncheckedCreateWithoutAlertInput> | NotificationCreateWithoutAlertInput[] | NotificationUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutAlertInput | NotificationCreateOrConnectWithoutAlertInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutAlertInput | NotificationUpsertWithWhereUniqueWithoutAlertInput[]
    createMany?: NotificationCreateManyAlertInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutAlertInput | NotificationUpdateWithWhereUniqueWithoutAlertInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutAlertInput | NotificationUpdateManyWithWhereWithoutAlertInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutAlertNestedInput = {
    create?: XOR<NotificationCreateWithoutAlertInput, NotificationUncheckedCreateWithoutAlertInput> | NotificationCreateWithoutAlertInput[] | NotificationUncheckedCreateWithoutAlertInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutAlertInput | NotificationCreateOrConnectWithoutAlertInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutAlertInput | NotificationUpsertWithWhereUniqueWithoutAlertInput[]
    createMany?: NotificationCreateManyAlertInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutAlertInput | NotificationUpdateWithWhereUniqueWithoutAlertInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutAlertInput | NotificationUpdateManyWithWhereWithoutAlertInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type AlertCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<AlertCreateWithoutNotificationsInput, AlertUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: AlertCreateOrConnectWithoutNotificationsInput
    connect?: AlertWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type AlertUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<AlertCreateWithoutNotificationsInput, AlertUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: AlertCreateOrConnectWithoutNotificationsInput
    upsert?: AlertUpsertWithoutNotificationsInput
    disconnect?: AlertWhereInput | boolean
    delete?: AlertWhereInput | boolean
    connect?: AlertWhereUniqueInput
    update?: XOR<XOR<AlertUpdateToOneWithWhereWithoutNotificationsInput, AlertUpdateWithoutNotificationsInput>, AlertUncheckedUpdateWithoutNotificationsInput>
  }

  export type PatientCreateNestedOneWithoutFilesInput = {
    create?: XOR<PatientCreateWithoutFilesInput, PatientUncheckedCreateWithoutFilesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutFilesInput
    connect?: PatientWhereUniqueInput
  }

  export type ObservationCreateNestedOneWithoutFilesInput = {
    create?: XOR<ObservationCreateWithoutFilesInput, ObservationUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ObservationCreateOrConnectWithoutFilesInput
    connect?: ObservationWhereUniqueInput
  }

  export type TreatmentCreateNestedOneWithoutFilesInput = {
    create?: XOR<TreatmentCreateWithoutFilesInput, TreatmentUncheckedCreateWithoutFilesInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutFilesInput
    connect?: TreatmentWhereUniqueInput
  }

  export type PatientUpdateOneWithoutFilesNestedInput = {
    create?: XOR<PatientCreateWithoutFilesInput, PatientUncheckedCreateWithoutFilesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutFilesInput
    upsert?: PatientUpsertWithoutFilesInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutFilesInput, PatientUpdateWithoutFilesInput>, PatientUncheckedUpdateWithoutFilesInput>
  }

  export type ObservationUpdateOneWithoutFilesNestedInput = {
    create?: XOR<ObservationCreateWithoutFilesInput, ObservationUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ObservationCreateOrConnectWithoutFilesInput
    upsert?: ObservationUpsertWithoutFilesInput
    disconnect?: ObservationWhereInput | boolean
    delete?: ObservationWhereInput | boolean
    connect?: ObservationWhereUniqueInput
    update?: XOR<XOR<ObservationUpdateToOneWithWhereWithoutFilesInput, ObservationUpdateWithoutFilesInput>, ObservationUncheckedUpdateWithoutFilesInput>
  }

  export type TreatmentUpdateOneWithoutFilesNestedInput = {
    create?: XOR<TreatmentCreateWithoutFilesInput, TreatmentUncheckedCreateWithoutFilesInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutFilesInput
    upsert?: TreatmentUpsertWithoutFilesInput
    disconnect?: TreatmentWhereInput | boolean
    delete?: TreatmentWhereInput | boolean
    connect?: TreatmentWhereUniqueInput
    update?: XOR<XOR<TreatmentUpdateToOneWithWhereWithoutFilesInput, TreatmentUpdateWithoutFilesInput>, TreatmentUncheckedUpdateWithoutFilesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionTierFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionTier | EnumSubscriptionTierFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionTier[] | ListEnumSubscriptionTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionTier[] | ListEnumSubscriptionTierFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionTierFilter<$PrismaModel> | $Enums.SubscriptionTier
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedEnumSubscriptionTierWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionTier | EnumSubscriptionTierFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionTier[] | ListEnumSubscriptionTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionTier[] | ListEnumSubscriptionTierFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionTierWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionTier
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionTierFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionTierFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumSexNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSexNullableFilter<$PrismaModel> | $Enums.Sex | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumSexNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSexNullableWithAggregatesFilter<$PrismaModel> | $Enums.Sex | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSexNullableFilter<$PrismaModel>
    _max?: NestedEnumSexNullableFilter<$PrismaModel>
  }

  export type NestedEnumStudyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StudyStatus | EnumStudyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StudyStatus[] | ListEnumStudyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StudyStatus[] | ListEnumStudyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStudyStatusFilter<$PrismaModel> | $Enums.StudyStatus
  }

  export type NestedEnumStudyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudyStatus | EnumStudyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StudyStatus[] | ListEnumStudyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StudyStatus[] | ListEnumStudyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStudyStatusWithAggregatesFilter<$PrismaModel> | $Enums.StudyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStudyStatusFilter<$PrismaModel>
    _max?: NestedEnumStudyStatusFilter<$PrismaModel>
  }

  export type NestedEnumStudyRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.StudyRole | EnumStudyRoleFieldRefInput<$PrismaModel>
    in?: $Enums.StudyRole[] | ListEnumStudyRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StudyRole[] | ListEnumStudyRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumStudyRoleFilter<$PrismaModel> | $Enums.StudyRole
  }

  export type NestedEnumStudyRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudyRole | EnumStudyRoleFieldRefInput<$PrismaModel>
    in?: $Enums.StudyRole[] | ListEnumStudyRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StudyRole[] | ListEnumStudyRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumStudyRoleWithAggregatesFilter<$PrismaModel> | $Enums.StudyRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStudyRoleFilter<$PrismaModel>
    _max?: NestedEnumStudyRoleFilter<$PrismaModel>
  }

  export type NestedEnumSymptomDataTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SymptomDataType | EnumSymptomDataTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SymptomDataType[] | ListEnumSymptomDataTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SymptomDataType[] | ListEnumSymptomDataTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSymptomDataTypeFilter<$PrismaModel> | $Enums.SymptomDataType
  }

  export type NestedEnumSymptomDataTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SymptomDataType | EnumSymptomDataTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SymptomDataType[] | ListEnumSymptomDataTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SymptomDataType[] | ListEnumSymptomDataTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSymptomDataTypeWithAggregatesFilter<$PrismaModel> | $Enums.SymptomDataType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSymptomDataTypeFilter<$PrismaModel>
    _max?: NestedEnumSymptomDataTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumAlertSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityFilter<$PrismaModel> | $Enums.AlertSeverity
  }

  export type NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel> | $Enums.AlertSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertSeverityFilter<$PrismaModel>
    _max?: NestedEnumAlertSeverityFilter<$PrismaModel>
  }

  export type PracticeCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    patients?: PatientCreateNestedManyWithoutPracticeInput
    studies?: StudyCreateNestedManyWithoutPracticeInput
    subscriptionHistory?: SubscriptionHistoryCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    patients?: PatientUncheckedCreateNestedManyWithoutPracticeInput
    studies?: StudyUncheckedCreateNestedManyWithoutPracticeInput
    subscriptionHistory?: SubscriptionHistoryUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutUsersInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutUsersInput, PracticeUncheckedCreateWithoutUsersInput>
  }

  export type StudyCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    practice: PracticeCreateNestedOneWithoutStudiesInput
    patients?: StudyPatientCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateCreateNestedManyWithoutStudyInput
    notes?: StudyNoteCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    patients?: StudyPatientUncheckedCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentUncheckedCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateUncheckedCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateUncheckedCreateNestedManyWithoutStudyInput
    notes?: StudyNoteUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutCreatedByInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutCreatedByInput, StudyUncheckedCreateWithoutCreatedByInput>
  }

  export type StudyCreateManyCreatedByInputEnvelope = {
    data: StudyCreateManyCreatedByInput | StudyCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type StudyAssignmentCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
    study: StudyCreateNestedOneWithoutAssignedUsersInput
  }

  export type StudyAssignmentUncheckedCreateWithoutUserInput = {
    id?: string
    studyId: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
  }

  export type StudyAssignmentCreateOrConnectWithoutUserInput = {
    where: StudyAssignmentWhereUniqueInput
    create: XOR<StudyAssignmentCreateWithoutUserInput, StudyAssignmentUncheckedCreateWithoutUserInput>
  }

  export type StudyAssignmentCreateManyUserInputEnvelope = {
    data: StudyAssignmentCreateManyUserInput | StudyAssignmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    template?: TreatmentTemplateCreateNestedOneWithoutTreatmentsInput
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    studyPatient: StudyPatientCreateNestedOneWithoutTreatmentsInput
    files?: FileCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    templateId?: string | null
    patientId: string
    studyPatientId: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutCreatedByInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput>
  }

  export type TreatmentCreateManyCreatedByInputEnvelope = {
    data: TreatmentCreateManyCreatedByInput | TreatmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ObservationCreateWithoutRecordedByInput = {
    id?: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    symptomTemplate: SymptomTemplateCreateNestedOneWithoutObservationsInput
    patient: PatientCreateNestedOneWithoutObservationsInput
    studyPatient: StudyPatientCreateNestedOneWithoutObservationsInput
    files?: FileCreateNestedManyWithoutObservationInput
    alerts?: AlertCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutRecordedByInput = {
    id?: string
    symptomTemplateId: string
    patientId: string
    studyPatientId: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutObservationInput
    alerts?: AlertUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutRecordedByInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutRecordedByInput, ObservationUncheckedCreateWithoutRecordedByInput>
  }

  export type ObservationCreateManyRecordedByInputEnvelope = {
    data: ObservationCreateManyRecordedByInput | ObservationCreateManyRecordedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutCreatedByInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice: PracticeCreateNestedOneWithoutPatientsInput
    studies?: StudyPatientCreateNestedManyWithoutPatientInput
    observations?: ObservationCreateNestedManyWithoutPatientInput
    treatments?: TreatmentCreateNestedManyWithoutPatientInput
    files?: FileCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    practiceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedCreateNestedManyWithoutPatientInput
    observations?: ObservationUncheckedCreateNestedManyWithoutPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutPatientInput
    files?: FileUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientCreateManyCreatedByInputEnvelope = {
    data: PatientCreateManyCreatedByInput | PatientCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
    alert?: AlertCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    alertId?: string | null
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PracticeUpsertWithoutUsersInput = {
    update: XOR<PracticeUpdateWithoutUsersInput, PracticeUncheckedUpdateWithoutUsersInput>
    create: XOR<PracticeCreateWithoutUsersInput, PracticeUncheckedCreateWithoutUsersInput>
    where?: PracticeWhereInput
  }

  export type PracticeUpdateToOneWithWhereWithoutUsersInput = {
    where?: PracticeWhereInput
    data: XOR<PracticeUpdateWithoutUsersInput, PracticeUncheckedUpdateWithoutUsersInput>
  }

  export type PracticeUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    patients?: PatientUpdateManyWithoutPracticeNestedInput
    studies?: StudyUpdateManyWithoutPracticeNestedInput
    subscriptionHistory?: SubscriptionHistoryUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    patients?: PatientUncheckedUpdateManyWithoutPracticeNestedInput
    studies?: StudyUncheckedUpdateManyWithoutPracticeNestedInput
    subscriptionHistory?: SubscriptionHistoryUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type StudyUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: StudyWhereUniqueInput
    update: XOR<StudyUpdateWithoutCreatedByInput, StudyUncheckedUpdateWithoutCreatedByInput>
    create: XOR<StudyCreateWithoutCreatedByInput, StudyUncheckedCreateWithoutCreatedByInput>
  }

  export type StudyUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: StudyWhereUniqueInput
    data: XOR<StudyUpdateWithoutCreatedByInput, StudyUncheckedUpdateWithoutCreatedByInput>
  }

  export type StudyUpdateManyWithWhereWithoutCreatedByInput = {
    where: StudyScalarWhereInput
    data: XOR<StudyUpdateManyMutationInput, StudyUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type StudyScalarWhereInput = {
    AND?: StudyScalarWhereInput | StudyScalarWhereInput[]
    OR?: StudyScalarWhereInput[]
    NOT?: StudyScalarWhereInput | StudyScalarWhereInput[]
    id?: StringFilter<"Study"> | string
    title?: StringFilter<"Study"> | string
    description?: StringNullableFilter<"Study"> | string | null
    protocol?: JsonNullableFilter<"Study">
    practiceId?: StringFilter<"Study"> | string
    createdById?: StringFilter<"Study"> | string
    createdAt?: DateTimeFilter<"Study"> | Date | string
    updatedAt?: DateTimeFilter<"Study"> | Date | string
    startDate?: DateTimeNullableFilter<"Study"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Study"> | Date | string | null
    status?: EnumStudyStatusFilter<"Study"> | $Enums.StudyStatus
    isTemplate?: BoolFilter<"Study"> | boolean
  }

  export type StudyAssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: StudyAssignmentWhereUniqueInput
    update: XOR<StudyAssignmentUpdateWithoutUserInput, StudyAssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<StudyAssignmentCreateWithoutUserInput, StudyAssignmentUncheckedCreateWithoutUserInput>
  }

  export type StudyAssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: StudyAssignmentWhereUniqueInput
    data: XOR<StudyAssignmentUpdateWithoutUserInput, StudyAssignmentUncheckedUpdateWithoutUserInput>
  }

  export type StudyAssignmentUpdateManyWithWhereWithoutUserInput = {
    where: StudyAssignmentScalarWhereInput
    data: XOR<StudyAssignmentUpdateManyMutationInput, StudyAssignmentUncheckedUpdateManyWithoutUserInput>
  }

  export type StudyAssignmentScalarWhereInput = {
    AND?: StudyAssignmentScalarWhereInput | StudyAssignmentScalarWhereInput[]
    OR?: StudyAssignmentScalarWhereInput[]
    NOT?: StudyAssignmentScalarWhereInput | StudyAssignmentScalarWhereInput[]
    id?: StringFilter<"StudyAssignment"> | string
    studyId?: StringFilter<"StudyAssignment"> | string
    userId?: StringFilter<"StudyAssignment"> | string
    assignedAt?: DateTimeFilter<"StudyAssignment"> | Date | string
    role?: EnumStudyRoleFilter<"StudyAssignment"> | $Enums.StudyRole
  }

  export type TreatmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TreatmentWhereUniqueInput
    update: XOR<TreatmentUpdateWithoutCreatedByInput, TreatmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput>
  }

  export type TreatmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TreatmentWhereUniqueInput
    data: XOR<TreatmentUpdateWithoutCreatedByInput, TreatmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type TreatmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: TreatmentScalarWhereInput
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type TreatmentScalarWhereInput = {
    AND?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
    OR?: TreatmentScalarWhereInput[]
    NOT?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
    id?: StringFilter<"Treatment"> | string
    templateId?: StringNullableFilter<"Treatment"> | string | null
    patientId?: StringFilter<"Treatment"> | string
    studyPatientId?: StringFilter<"Treatment"> | string
    createdById?: StringFilter<"Treatment"> | string
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    administeredAt?: DateTimeFilter<"Treatment"> | Date | string
    name?: StringFilter<"Treatment"> | string
    description?: StringNullableFilter<"Treatment"> | string | null
    dosage?: StringNullableFilter<"Treatment"> | string | null
    notes?: StringNullableFilter<"Treatment"> | string | null
  }

  export type ObservationUpsertWithWhereUniqueWithoutRecordedByInput = {
    where: ObservationWhereUniqueInput
    update: XOR<ObservationUpdateWithoutRecordedByInput, ObservationUncheckedUpdateWithoutRecordedByInput>
    create: XOR<ObservationCreateWithoutRecordedByInput, ObservationUncheckedCreateWithoutRecordedByInput>
  }

  export type ObservationUpdateWithWhereUniqueWithoutRecordedByInput = {
    where: ObservationWhereUniqueInput
    data: XOR<ObservationUpdateWithoutRecordedByInput, ObservationUncheckedUpdateWithoutRecordedByInput>
  }

  export type ObservationUpdateManyWithWhereWithoutRecordedByInput = {
    where: ObservationScalarWhereInput
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyWithoutRecordedByInput>
  }

  export type ObservationScalarWhereInput = {
    AND?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
    OR?: ObservationScalarWhereInput[]
    NOT?: ObservationScalarWhereInput | ObservationScalarWhereInput[]
    id?: StringFilter<"Observation"> | string
    symptomTemplateId?: StringFilter<"Observation"> | string
    patientId?: StringFilter<"Observation"> | string
    studyPatientId?: StringFilter<"Observation"> | string
    recordedById?: StringFilter<"Observation"> | string
    recordedAt?: DateTimeFilter<"Observation"> | Date | string
    value?: JsonFilter<"Observation">
    notes?: StringNullableFilter<"Observation"> | string | null
  }

  export type PatientUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutCreatedByInput, PatientUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutCreatedByInput, PatientUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    id?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    species?: StringFilter<"Patient"> | string
    breed?: StringNullableFilter<"Patient"> | string | null
    age?: IntNullableFilter<"Patient"> | number | null
    weight?: FloatNullableFilter<"Patient"> | number | null
    sex?: EnumSexNullableFilter<"Patient"> | $Enums.Sex | null
    practiceId?: StringFilter<"Patient"> | string
    createdById?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    isActive?: BoolFilter<"Patient"> | boolean
    ownerId?: StringNullableFilter<"Patient"> | string | null
    ownerName?: StringNullableFilter<"Patient"> | string | null
    ownerEmail?: StringNullableFilter<"Patient"> | string | null
    ownerPhone?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: JsonNullableFilter<"Patient">
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    alertId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    isRead?: BoolFilter<"Notification"> | boolean
  }

  export type UserCreateWithoutPracticeInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdStudies?: StudyCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    observations?: ObservationCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPracticeInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdStudies?: StudyUncheckedCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentUncheckedCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    observations?: ObservationUncheckedCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPracticeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPracticeInput, UserUncheckedCreateWithoutPracticeInput>
  }

  export type UserCreateManyPracticeInputEnvelope = {
    data: UserCreateManyPracticeInput | UserCreateManyPracticeInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutPracticeInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    studies?: StudyPatientCreateNestedManyWithoutPatientInput
    observations?: ObservationCreateNestedManyWithoutPatientInput
    treatments?: TreatmentCreateNestedManyWithoutPatientInput
    files?: FileCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPracticeInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedCreateNestedManyWithoutPatientInput
    observations?: ObservationUncheckedCreateNestedManyWithoutPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutPatientInput
    files?: FileUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPracticeInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPracticeInput, PatientUncheckedCreateWithoutPracticeInput>
  }

  export type PatientCreateManyPracticeInputEnvelope = {
    data: PatientCreateManyPracticeInput | PatientCreateManyPracticeInput[]
    skipDuplicates?: boolean
  }

  export type StudyCreateWithoutPracticeInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedStudiesInput
    patients?: StudyPatientCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateCreateNestedManyWithoutStudyInput
    notes?: StudyNoteCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutPracticeInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    patients?: StudyPatientUncheckedCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentUncheckedCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateUncheckedCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateUncheckedCreateNestedManyWithoutStudyInput
    notes?: StudyNoteUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutPracticeInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutPracticeInput, StudyUncheckedCreateWithoutPracticeInput>
  }

  export type StudyCreateManyPracticeInputEnvelope = {
    data: StudyCreateManyPracticeInput | StudyCreateManyPracticeInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionHistoryCreateWithoutPracticeInput = {
    id?: string
    tier: $Enums.SubscriptionTier
    startDate: Date | string
    endDate?: Date | string | null
    amount?: number | null
    paymentId?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionHistoryUncheckedCreateWithoutPracticeInput = {
    id?: string
    tier: $Enums.SubscriptionTier
    startDate: Date | string
    endDate?: Date | string | null
    amount?: number | null
    paymentId?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionHistoryCreateOrConnectWithoutPracticeInput = {
    where: SubscriptionHistoryWhereUniqueInput
    create: XOR<SubscriptionHistoryCreateWithoutPracticeInput, SubscriptionHistoryUncheckedCreateWithoutPracticeInput>
  }

  export type SubscriptionHistoryCreateManyPracticeInputEnvelope = {
    data: SubscriptionHistoryCreateManyPracticeInput | SubscriptionHistoryCreateManyPracticeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutPracticeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPracticeInput, UserUncheckedUpdateWithoutPracticeInput>
    create: XOR<UserCreateWithoutPracticeInput, UserUncheckedCreateWithoutPracticeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPracticeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPracticeInput, UserUncheckedUpdateWithoutPracticeInput>
  }

  export type UserUpdateManyWithWhereWithoutPracticeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPracticeInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    practiceId?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type PatientUpsertWithWhereUniqueWithoutPracticeInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutPracticeInput, PatientUncheckedUpdateWithoutPracticeInput>
    create: XOR<PatientCreateWithoutPracticeInput, PatientUncheckedCreateWithoutPracticeInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutPracticeInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutPracticeInput, PatientUncheckedUpdateWithoutPracticeInput>
  }

  export type PatientUpdateManyWithWhereWithoutPracticeInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutPracticeInput>
  }

  export type StudyUpsertWithWhereUniqueWithoutPracticeInput = {
    where: StudyWhereUniqueInput
    update: XOR<StudyUpdateWithoutPracticeInput, StudyUncheckedUpdateWithoutPracticeInput>
    create: XOR<StudyCreateWithoutPracticeInput, StudyUncheckedCreateWithoutPracticeInput>
  }

  export type StudyUpdateWithWhereUniqueWithoutPracticeInput = {
    where: StudyWhereUniqueInput
    data: XOR<StudyUpdateWithoutPracticeInput, StudyUncheckedUpdateWithoutPracticeInput>
  }

  export type StudyUpdateManyWithWhereWithoutPracticeInput = {
    where: StudyScalarWhereInput
    data: XOR<StudyUpdateManyMutationInput, StudyUncheckedUpdateManyWithoutPracticeInput>
  }

  export type SubscriptionHistoryUpsertWithWhereUniqueWithoutPracticeInput = {
    where: SubscriptionHistoryWhereUniqueInput
    update: XOR<SubscriptionHistoryUpdateWithoutPracticeInput, SubscriptionHistoryUncheckedUpdateWithoutPracticeInput>
    create: XOR<SubscriptionHistoryCreateWithoutPracticeInput, SubscriptionHistoryUncheckedCreateWithoutPracticeInput>
  }

  export type SubscriptionHistoryUpdateWithWhereUniqueWithoutPracticeInput = {
    where: SubscriptionHistoryWhereUniqueInput
    data: XOR<SubscriptionHistoryUpdateWithoutPracticeInput, SubscriptionHistoryUncheckedUpdateWithoutPracticeInput>
  }

  export type SubscriptionHistoryUpdateManyWithWhereWithoutPracticeInput = {
    where: SubscriptionHistoryScalarWhereInput
    data: XOR<SubscriptionHistoryUpdateManyMutationInput, SubscriptionHistoryUncheckedUpdateManyWithoutPracticeInput>
  }

  export type SubscriptionHistoryScalarWhereInput = {
    AND?: SubscriptionHistoryScalarWhereInput | SubscriptionHistoryScalarWhereInput[]
    OR?: SubscriptionHistoryScalarWhereInput[]
    NOT?: SubscriptionHistoryScalarWhereInput | SubscriptionHistoryScalarWhereInput[]
    id?: StringFilter<"SubscriptionHistory"> | string
    practiceId?: StringFilter<"SubscriptionHistory"> | string
    tier?: EnumSubscriptionTierFilter<"SubscriptionHistory"> | $Enums.SubscriptionTier
    startDate?: DateTimeFilter<"SubscriptionHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"SubscriptionHistory"> | Date | string | null
    amount?: FloatNullableFilter<"SubscriptionHistory"> | number | null
    paymentId?: StringNullableFilter<"SubscriptionHistory"> | string | null
    createdAt?: DateTimeFilter<"SubscriptionHistory"> | Date | string
  }

  export type PracticeCreateWithoutSubscriptionHistoryInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    users?: UserCreateNestedManyWithoutPracticeInput
    patients?: PatientCreateNestedManyWithoutPracticeInput
    studies?: StudyCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutSubscriptionHistoryInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    users?: UserUncheckedCreateNestedManyWithoutPracticeInput
    patients?: PatientUncheckedCreateNestedManyWithoutPracticeInput
    studies?: StudyUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutSubscriptionHistoryInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutSubscriptionHistoryInput, PracticeUncheckedCreateWithoutSubscriptionHistoryInput>
  }

  export type PracticeUpsertWithoutSubscriptionHistoryInput = {
    update: XOR<PracticeUpdateWithoutSubscriptionHistoryInput, PracticeUncheckedUpdateWithoutSubscriptionHistoryInput>
    create: XOR<PracticeCreateWithoutSubscriptionHistoryInput, PracticeUncheckedCreateWithoutSubscriptionHistoryInput>
    where?: PracticeWhereInput
  }

  export type PracticeUpdateToOneWithWhereWithoutSubscriptionHistoryInput = {
    where?: PracticeWhereInput
    data: XOR<PracticeUpdateWithoutSubscriptionHistoryInput, PracticeUncheckedUpdateWithoutSubscriptionHistoryInput>
  }

  export type PracticeUpdateWithoutSubscriptionHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutPracticeNestedInput
    patients?: PatientUpdateManyWithoutPracticeNestedInput
    studies?: StudyUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutSubscriptionHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutPracticeNestedInput
    patients?: PatientUncheckedUpdateManyWithoutPracticeNestedInput
    studies?: StudyUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeCreateWithoutPatientsInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    users?: UserCreateNestedManyWithoutPracticeInput
    studies?: StudyCreateNestedManyWithoutPracticeInput
    subscriptionHistory?: SubscriptionHistoryCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutPatientsInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    users?: UserUncheckedCreateNestedManyWithoutPracticeInput
    studies?: StudyUncheckedCreateNestedManyWithoutPracticeInput
    subscriptionHistory?: SubscriptionHistoryUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutPatientsInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutPatientsInput, PracticeUncheckedCreateWithoutPatientsInput>
  }

  export type UserCreateWithoutCreatedPatientsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    practice?: PracticeCreateNestedOneWithoutUsersInput
    createdStudies?: StudyCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    observations?: ObservationCreateNestedManyWithoutRecordedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedPatientsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    practiceId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdStudies?: StudyUncheckedCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentUncheckedCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    observations?: ObservationUncheckedCreateNestedManyWithoutRecordedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedPatientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPatientsInput, UserUncheckedCreateWithoutCreatedPatientsInput>
  }

  export type StudyPatientCreateWithoutPatientInput = {
    id?: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    study: StudyCreateNestedOneWithoutPatientsInput
    observations?: ObservationCreateNestedManyWithoutStudyPatientInput
    treatments?: TreatmentCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientUncheckedCreateWithoutPatientInput = {
    id?: string
    studyId: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    observations?: ObservationUncheckedCreateNestedManyWithoutStudyPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientCreateOrConnectWithoutPatientInput = {
    where: StudyPatientWhereUniqueInput
    create: XOR<StudyPatientCreateWithoutPatientInput, StudyPatientUncheckedCreateWithoutPatientInput>
  }

  export type StudyPatientCreateManyPatientInputEnvelope = {
    data: StudyPatientCreateManyPatientInput | StudyPatientCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ObservationCreateWithoutPatientInput = {
    id?: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    symptomTemplate: SymptomTemplateCreateNestedOneWithoutObservationsInput
    studyPatient: StudyPatientCreateNestedOneWithoutObservationsInput
    recordedBy: UserCreateNestedOneWithoutObservationsInput
    files?: FileCreateNestedManyWithoutObservationInput
    alerts?: AlertCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutPatientInput = {
    id?: string
    symptomTemplateId: string
    studyPatientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutObservationInput
    alerts?: AlertUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutPatientInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutPatientInput, ObservationUncheckedCreateWithoutPatientInput>
  }

  export type ObservationCreateManyPatientInputEnvelope = {
    data: ObservationCreateManyPatientInput | ObservationCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentCreateWithoutPatientInput = {
    id?: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    template?: TreatmentTemplateCreateNestedOneWithoutTreatmentsInput
    studyPatient: StudyPatientCreateNestedOneWithoutTreatmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedTreatmentsInput
    files?: FileCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutPatientInput = {
    id?: string
    templateId?: string | null
    studyPatientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutPatientInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutPatientInput, TreatmentUncheckedCreateWithoutPatientInput>
  }

  export type TreatmentCreateManyPatientInputEnvelope = {
    data: TreatmentCreateManyPatientInput | TreatmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutPatientInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    observation?: ObservationCreateNestedOneWithoutFilesInput
    treatment?: TreatmentCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutPatientInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    observationId?: string | null
    treatmentId?: string | null
  }

  export type FileCreateOrConnectWithoutPatientInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutPatientInput, FileUncheckedCreateWithoutPatientInput>
  }

  export type FileCreateManyPatientInputEnvelope = {
    data: FileCreateManyPatientInput | FileCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PracticeUpsertWithoutPatientsInput = {
    update: XOR<PracticeUpdateWithoutPatientsInput, PracticeUncheckedUpdateWithoutPatientsInput>
    create: XOR<PracticeCreateWithoutPatientsInput, PracticeUncheckedCreateWithoutPatientsInput>
    where?: PracticeWhereInput
  }

  export type PracticeUpdateToOneWithWhereWithoutPatientsInput = {
    where?: PracticeWhereInput
    data: XOR<PracticeUpdateWithoutPatientsInput, PracticeUncheckedUpdateWithoutPatientsInput>
  }

  export type PracticeUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutPracticeNestedInput
    studies?: StudyUpdateManyWithoutPracticeNestedInput
    subscriptionHistory?: SubscriptionHistoryUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutPracticeNestedInput
    studies?: StudyUncheckedUpdateManyWithoutPracticeNestedInput
    subscriptionHistory?: SubscriptionHistoryUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type UserUpsertWithoutCreatedPatientsInput = {
    update: XOR<UserUpdateWithoutCreatedPatientsInput, UserUncheckedUpdateWithoutCreatedPatientsInput>
    create: XOR<UserCreateWithoutCreatedPatientsInput, UserUncheckedCreateWithoutCreatedPatientsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPatientsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPatientsInput, UserUncheckedUpdateWithoutCreatedPatientsInput>
  }

  export type UserUpdateWithoutCreatedPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practice?: PracticeUpdateOneWithoutUsersNestedInput
    createdStudies?: StudyUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUpdateManyWithoutRecordedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    practiceId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdStudies?: StudyUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUncheckedUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutRecordedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StudyPatientUpsertWithWhereUniqueWithoutPatientInput = {
    where: StudyPatientWhereUniqueInput
    update: XOR<StudyPatientUpdateWithoutPatientInput, StudyPatientUncheckedUpdateWithoutPatientInput>
    create: XOR<StudyPatientCreateWithoutPatientInput, StudyPatientUncheckedCreateWithoutPatientInput>
  }

  export type StudyPatientUpdateWithWhereUniqueWithoutPatientInput = {
    where: StudyPatientWhereUniqueInput
    data: XOR<StudyPatientUpdateWithoutPatientInput, StudyPatientUncheckedUpdateWithoutPatientInput>
  }

  export type StudyPatientUpdateManyWithWhereWithoutPatientInput = {
    where: StudyPatientScalarWhereInput
    data: XOR<StudyPatientUpdateManyMutationInput, StudyPatientUncheckedUpdateManyWithoutPatientInput>
  }

  export type StudyPatientScalarWhereInput = {
    AND?: StudyPatientScalarWhereInput | StudyPatientScalarWhereInput[]
    OR?: StudyPatientScalarWhereInput[]
    NOT?: StudyPatientScalarWhereInput | StudyPatientScalarWhereInput[]
    id?: StringFilter<"StudyPatient"> | string
    studyId?: StringFilter<"StudyPatient"> | string
    patientId?: StringFilter<"StudyPatient"> | string
    enrollmentDate?: DateTimeFilter<"StudyPatient"> | Date | string
    exitDate?: DateTimeNullableFilter<"StudyPatient"> | Date | string | null
    isActive?: BoolFilter<"StudyPatient"> | boolean
  }

  export type ObservationUpsertWithWhereUniqueWithoutPatientInput = {
    where: ObservationWhereUniqueInput
    update: XOR<ObservationUpdateWithoutPatientInput, ObservationUncheckedUpdateWithoutPatientInput>
    create: XOR<ObservationCreateWithoutPatientInput, ObservationUncheckedCreateWithoutPatientInput>
  }

  export type ObservationUpdateWithWhereUniqueWithoutPatientInput = {
    where: ObservationWhereUniqueInput
    data: XOR<ObservationUpdateWithoutPatientInput, ObservationUncheckedUpdateWithoutPatientInput>
  }

  export type ObservationUpdateManyWithWhereWithoutPatientInput = {
    where: ObservationScalarWhereInput
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyWithoutPatientInput>
  }

  export type TreatmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: TreatmentWhereUniqueInput
    update: XOR<TreatmentUpdateWithoutPatientInput, TreatmentUncheckedUpdateWithoutPatientInput>
    create: XOR<TreatmentCreateWithoutPatientInput, TreatmentUncheckedCreateWithoutPatientInput>
  }

  export type TreatmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: TreatmentWhereUniqueInput
    data: XOR<TreatmentUpdateWithoutPatientInput, TreatmentUncheckedUpdateWithoutPatientInput>
  }

  export type TreatmentUpdateManyWithWhereWithoutPatientInput = {
    where: TreatmentScalarWhereInput
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type FileUpsertWithWhereUniqueWithoutPatientInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutPatientInput, FileUncheckedUpdateWithoutPatientInput>
    create: XOR<FileCreateWithoutPatientInput, FileUncheckedCreateWithoutPatientInput>
  }

  export type FileUpdateWithWhereUniqueWithoutPatientInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutPatientInput, FileUncheckedUpdateWithoutPatientInput>
  }

  export type FileUpdateManyWithWhereWithoutPatientInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutPatientInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    filename?: StringFilter<"File"> | string
    filepath?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    createdAt?: DateTimeFilter<"File"> | Date | string
    patientId?: StringNullableFilter<"File"> | string | null
    observationId?: StringNullableFilter<"File"> | string | null
    treatmentId?: StringNullableFilter<"File"> | string | null
  }

  export type PracticeCreateWithoutStudiesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    users?: UserCreateNestedManyWithoutPracticeInput
    patients?: PatientCreateNestedManyWithoutPracticeInput
    subscriptionHistory?: SubscriptionHistoryCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutStudiesInput = {
    id?: string
    name: string
    address?: string | null
    phone?: string | null
    email?: string | null
    logo?: string | null
    subscriptionTier?: $Enums.SubscriptionTier
    subscriptionStatus?: $Enums.SubscriptionStatus
    subscriptionStartDate?: Date | string | null
    subscriptionEndDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: number
    currentStorage?: number
    users?: UserUncheckedCreateNestedManyWithoutPracticeInput
    patients?: PatientUncheckedCreateNestedManyWithoutPracticeInput
    subscriptionHistory?: SubscriptionHistoryUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutStudiesInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutStudiesInput, PracticeUncheckedCreateWithoutStudiesInput>
  }

  export type UserCreateWithoutCreatedStudiesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    practice?: PracticeCreateNestedOneWithoutUsersInput
    assignedStudies?: StudyAssignmentCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    observations?: ObservationCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedStudiesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    practiceId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    assignedStudies?: StudyAssignmentUncheckedCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    observations?: ObservationUncheckedCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedStudiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedStudiesInput, UserUncheckedCreateWithoutCreatedStudiesInput>
  }

  export type StudyPatientCreateWithoutStudyInput = {
    id?: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    patient: PatientCreateNestedOneWithoutStudiesInput
    observations?: ObservationCreateNestedManyWithoutStudyPatientInput
    treatments?: TreatmentCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientUncheckedCreateWithoutStudyInput = {
    id?: string
    patientId: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    observations?: ObservationUncheckedCreateNestedManyWithoutStudyPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientCreateOrConnectWithoutStudyInput = {
    where: StudyPatientWhereUniqueInput
    create: XOR<StudyPatientCreateWithoutStudyInput, StudyPatientUncheckedCreateWithoutStudyInput>
  }

  export type StudyPatientCreateManyStudyInputEnvelope = {
    data: StudyPatientCreateManyStudyInput | StudyPatientCreateManyStudyInput[]
    skipDuplicates?: boolean
  }

  export type StudyAssignmentCreateWithoutStudyInput = {
    id?: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
    user: UserCreateNestedOneWithoutAssignedStudiesInput
  }

  export type StudyAssignmentUncheckedCreateWithoutStudyInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
  }

  export type StudyAssignmentCreateOrConnectWithoutStudyInput = {
    where: StudyAssignmentWhereUniqueInput
    create: XOR<StudyAssignmentCreateWithoutStudyInput, StudyAssignmentUncheckedCreateWithoutStudyInput>
  }

  export type StudyAssignmentCreateManyStudyInputEnvelope = {
    data: StudyAssignmentCreateManyStudyInput | StudyAssignmentCreateManyStudyInput[]
    skipDuplicates?: boolean
  }

  export type SymptomTemplateCreateWithoutStudyInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    observations?: ObservationCreateNestedManyWithoutSymptomTemplateInput
    alertThresholds?: AlertThresholdCreateNestedManyWithoutSymptomTemplateInput
  }

  export type SymptomTemplateUncheckedCreateWithoutStudyInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    observations?: ObservationUncheckedCreateNestedManyWithoutSymptomTemplateInput
    alertThresholds?: AlertThresholdUncheckedCreateNestedManyWithoutSymptomTemplateInput
  }

  export type SymptomTemplateCreateOrConnectWithoutStudyInput = {
    where: SymptomTemplateWhereUniqueInput
    create: XOR<SymptomTemplateCreateWithoutStudyInput, SymptomTemplateUncheckedCreateWithoutStudyInput>
  }

  export type SymptomTemplateCreateManyStudyInputEnvelope = {
    data: SymptomTemplateCreateManyStudyInput | SymptomTemplateCreateManyStudyInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentTemplateCreateWithoutStudyInput = {
    id?: string
    name: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    treatments?: TreatmentCreateNestedManyWithoutTemplateInput
  }

  export type TreatmentTemplateUncheckedCreateWithoutStudyInput = {
    id?: string
    name: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    treatments?: TreatmentUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TreatmentTemplateCreateOrConnectWithoutStudyInput = {
    where: TreatmentTemplateWhereUniqueInput
    create: XOR<TreatmentTemplateCreateWithoutStudyInput, TreatmentTemplateUncheckedCreateWithoutStudyInput>
  }

  export type TreatmentTemplateCreateManyStudyInputEnvelope = {
    data: TreatmentTemplateCreateManyStudyInput | TreatmentTemplateCreateManyStudyInput[]
    skipDuplicates?: boolean
  }

  export type StudyNoteCreateWithoutStudyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudyNoteUncheckedCreateWithoutStudyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudyNoteCreateOrConnectWithoutStudyInput = {
    where: StudyNoteWhereUniqueInput
    create: XOR<StudyNoteCreateWithoutStudyInput, StudyNoteUncheckedCreateWithoutStudyInput>
  }

  export type StudyNoteCreateManyStudyInputEnvelope = {
    data: StudyNoteCreateManyStudyInput | StudyNoteCreateManyStudyInput[]
    skipDuplicates?: boolean
  }

  export type PracticeUpsertWithoutStudiesInput = {
    update: XOR<PracticeUpdateWithoutStudiesInput, PracticeUncheckedUpdateWithoutStudiesInput>
    create: XOR<PracticeCreateWithoutStudiesInput, PracticeUncheckedCreateWithoutStudiesInput>
    where?: PracticeWhereInput
  }

  export type PracticeUpdateToOneWithWhereWithoutStudiesInput = {
    where?: PracticeWhereInput
    data: XOR<PracticeUpdateWithoutStudiesInput, PracticeUncheckedUpdateWithoutStudiesInput>
  }

  export type PracticeUpdateWithoutStudiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutPracticeNestedInput
    patients?: PatientUpdateManyWithoutPracticeNestedInput
    subscriptionHistory?: SubscriptionHistoryUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutStudiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    subscriptionStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    customBranding?: NullableJsonNullValueInput | InputJsonValue
    maxStorage?: IntFieldUpdateOperationsInput | number
    currentStorage?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutPracticeNestedInput
    patients?: PatientUncheckedUpdateManyWithoutPracticeNestedInput
    subscriptionHistory?: SubscriptionHistoryUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type UserUpsertWithoutCreatedStudiesInput = {
    update: XOR<UserUpdateWithoutCreatedStudiesInput, UserUncheckedUpdateWithoutCreatedStudiesInput>
    create: XOR<UserCreateWithoutCreatedStudiesInput, UserUncheckedCreateWithoutCreatedStudiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedStudiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedStudiesInput, UserUncheckedUpdateWithoutCreatedStudiesInput>
  }

  export type UserUpdateWithoutCreatedStudiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practice?: PracticeUpdateOneWithoutUsersNestedInput
    assignedStudies?: StudyAssignmentUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedStudiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    practiceId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedStudies?: StudyAssignmentUncheckedUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StudyPatientUpsertWithWhereUniqueWithoutStudyInput = {
    where: StudyPatientWhereUniqueInput
    update: XOR<StudyPatientUpdateWithoutStudyInput, StudyPatientUncheckedUpdateWithoutStudyInput>
    create: XOR<StudyPatientCreateWithoutStudyInput, StudyPatientUncheckedCreateWithoutStudyInput>
  }

  export type StudyPatientUpdateWithWhereUniqueWithoutStudyInput = {
    where: StudyPatientWhereUniqueInput
    data: XOR<StudyPatientUpdateWithoutStudyInput, StudyPatientUncheckedUpdateWithoutStudyInput>
  }

  export type StudyPatientUpdateManyWithWhereWithoutStudyInput = {
    where: StudyPatientScalarWhereInput
    data: XOR<StudyPatientUpdateManyMutationInput, StudyPatientUncheckedUpdateManyWithoutStudyInput>
  }

  export type StudyAssignmentUpsertWithWhereUniqueWithoutStudyInput = {
    where: StudyAssignmentWhereUniqueInput
    update: XOR<StudyAssignmentUpdateWithoutStudyInput, StudyAssignmentUncheckedUpdateWithoutStudyInput>
    create: XOR<StudyAssignmentCreateWithoutStudyInput, StudyAssignmentUncheckedCreateWithoutStudyInput>
  }

  export type StudyAssignmentUpdateWithWhereUniqueWithoutStudyInput = {
    where: StudyAssignmentWhereUniqueInput
    data: XOR<StudyAssignmentUpdateWithoutStudyInput, StudyAssignmentUncheckedUpdateWithoutStudyInput>
  }

  export type StudyAssignmentUpdateManyWithWhereWithoutStudyInput = {
    where: StudyAssignmentScalarWhereInput
    data: XOR<StudyAssignmentUpdateManyMutationInput, StudyAssignmentUncheckedUpdateManyWithoutStudyInput>
  }

  export type SymptomTemplateUpsertWithWhereUniqueWithoutStudyInput = {
    where: SymptomTemplateWhereUniqueInput
    update: XOR<SymptomTemplateUpdateWithoutStudyInput, SymptomTemplateUncheckedUpdateWithoutStudyInput>
    create: XOR<SymptomTemplateCreateWithoutStudyInput, SymptomTemplateUncheckedCreateWithoutStudyInput>
  }

  export type SymptomTemplateUpdateWithWhereUniqueWithoutStudyInput = {
    where: SymptomTemplateWhereUniqueInput
    data: XOR<SymptomTemplateUpdateWithoutStudyInput, SymptomTemplateUncheckedUpdateWithoutStudyInput>
  }

  export type SymptomTemplateUpdateManyWithWhereWithoutStudyInput = {
    where: SymptomTemplateScalarWhereInput
    data: XOR<SymptomTemplateUpdateManyMutationInput, SymptomTemplateUncheckedUpdateManyWithoutStudyInput>
  }

  export type SymptomTemplateScalarWhereInput = {
    AND?: SymptomTemplateScalarWhereInput | SymptomTemplateScalarWhereInput[]
    OR?: SymptomTemplateScalarWhereInput[]
    NOT?: SymptomTemplateScalarWhereInput | SymptomTemplateScalarWhereInput[]
    id?: StringFilter<"SymptomTemplate"> | string
    name?: StringFilter<"SymptomTemplate"> | string
    description?: StringNullableFilter<"SymptomTemplate"> | string | null
    category?: StringNullableFilter<"SymptomTemplate"> | string | null
    dataType?: EnumSymptomDataTypeFilter<"SymptomTemplate"> | $Enums.SymptomDataType
    units?: StringNullableFilter<"SymptomTemplate"> | string | null
    minValue?: FloatNullableFilter<"SymptomTemplate"> | number | null
    maxValue?: FloatNullableFilter<"SymptomTemplate"> | number | null
    options?: JsonNullableFilter<"SymptomTemplate">
    studyId?: StringFilter<"SymptomTemplate"> | string
    createdAt?: DateTimeFilter<"SymptomTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"SymptomTemplate"> | Date | string
  }

  export type TreatmentTemplateUpsertWithWhereUniqueWithoutStudyInput = {
    where: TreatmentTemplateWhereUniqueInput
    update: XOR<TreatmentTemplateUpdateWithoutStudyInput, TreatmentTemplateUncheckedUpdateWithoutStudyInput>
    create: XOR<TreatmentTemplateCreateWithoutStudyInput, TreatmentTemplateUncheckedCreateWithoutStudyInput>
  }

  export type TreatmentTemplateUpdateWithWhereUniqueWithoutStudyInput = {
    where: TreatmentTemplateWhereUniqueInput
    data: XOR<TreatmentTemplateUpdateWithoutStudyInput, TreatmentTemplateUncheckedUpdateWithoutStudyInput>
  }

  export type TreatmentTemplateUpdateManyWithWhereWithoutStudyInput = {
    where: TreatmentTemplateScalarWhereInput
    data: XOR<TreatmentTemplateUpdateManyMutationInput, TreatmentTemplateUncheckedUpdateManyWithoutStudyInput>
  }

  export type TreatmentTemplateScalarWhereInput = {
    AND?: TreatmentTemplateScalarWhereInput | TreatmentTemplateScalarWhereInput[]
    OR?: TreatmentTemplateScalarWhereInput[]
    NOT?: TreatmentTemplateScalarWhereInput | TreatmentTemplateScalarWhereInput[]
    id?: StringFilter<"TreatmentTemplate"> | string
    name?: StringFilter<"TreatmentTemplate"> | string
    description?: StringNullableFilter<"TreatmentTemplate"> | string | null
    protocol?: JsonNullableFilter<"TreatmentTemplate">
    studyId?: StringFilter<"TreatmentTemplate"> | string
    createdAt?: DateTimeFilter<"TreatmentTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentTemplate"> | Date | string
  }

  export type StudyNoteUpsertWithWhereUniqueWithoutStudyInput = {
    where: StudyNoteWhereUniqueInput
    update: XOR<StudyNoteUpdateWithoutStudyInput, StudyNoteUncheckedUpdateWithoutStudyInput>
    create: XOR<StudyNoteCreateWithoutStudyInput, StudyNoteUncheckedCreateWithoutStudyInput>
  }

  export type StudyNoteUpdateWithWhereUniqueWithoutStudyInput = {
    where: StudyNoteWhereUniqueInput
    data: XOR<StudyNoteUpdateWithoutStudyInput, StudyNoteUncheckedUpdateWithoutStudyInput>
  }

  export type StudyNoteUpdateManyWithWhereWithoutStudyInput = {
    where: StudyNoteScalarWhereInput
    data: XOR<StudyNoteUpdateManyMutationInput, StudyNoteUncheckedUpdateManyWithoutStudyInput>
  }

  export type StudyNoteScalarWhereInput = {
    AND?: StudyNoteScalarWhereInput | StudyNoteScalarWhereInput[]
    OR?: StudyNoteScalarWhereInput[]
    NOT?: StudyNoteScalarWhereInput | StudyNoteScalarWhereInput[]
    id?: StringFilter<"StudyNote"> | string
    studyId?: StringFilter<"StudyNote"> | string
    content?: StringFilter<"StudyNote"> | string
    createdAt?: DateTimeFilter<"StudyNote"> | Date | string
    updatedAt?: DateTimeFilter<"StudyNote"> | Date | string
  }

  export type StudyCreateWithoutPatientsInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    practice: PracticeCreateNestedOneWithoutStudiesInput
    createdBy: UserCreateNestedOneWithoutCreatedStudiesInput
    assignedUsers?: StudyAssignmentCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateCreateNestedManyWithoutStudyInput
    notes?: StudyNoteCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutPatientsInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    assignedUsers?: StudyAssignmentUncheckedCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateUncheckedCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateUncheckedCreateNestedManyWithoutStudyInput
    notes?: StudyNoteUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutPatientsInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutPatientsInput, StudyUncheckedCreateWithoutPatientsInput>
  }

  export type PatientCreateWithoutStudiesInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice: PracticeCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    observations?: ObservationCreateNestedManyWithoutPatientInput
    treatments?: TreatmentCreateNestedManyWithoutPatientInput
    files?: FileCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutStudiesInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    observations?: ObservationUncheckedCreateNestedManyWithoutPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutPatientInput
    files?: FileUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutStudiesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutStudiesInput, PatientUncheckedCreateWithoutStudiesInput>
  }

  export type ObservationCreateWithoutStudyPatientInput = {
    id?: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    symptomTemplate: SymptomTemplateCreateNestedOneWithoutObservationsInput
    patient: PatientCreateNestedOneWithoutObservationsInput
    recordedBy: UserCreateNestedOneWithoutObservationsInput
    files?: FileCreateNestedManyWithoutObservationInput
    alerts?: AlertCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutStudyPatientInput = {
    id?: string
    symptomTemplateId: string
    patientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutObservationInput
    alerts?: AlertUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutStudyPatientInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutStudyPatientInput, ObservationUncheckedCreateWithoutStudyPatientInput>
  }

  export type ObservationCreateManyStudyPatientInputEnvelope = {
    data: ObservationCreateManyStudyPatientInput | ObservationCreateManyStudyPatientInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentCreateWithoutStudyPatientInput = {
    id?: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    template?: TreatmentTemplateCreateNestedOneWithoutTreatmentsInput
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedTreatmentsInput
    files?: FileCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutStudyPatientInput = {
    id?: string
    templateId?: string | null
    patientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutStudyPatientInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutStudyPatientInput, TreatmentUncheckedCreateWithoutStudyPatientInput>
  }

  export type TreatmentCreateManyStudyPatientInputEnvelope = {
    data: TreatmentCreateManyStudyPatientInput | TreatmentCreateManyStudyPatientInput[]
    skipDuplicates?: boolean
  }

  export type StudyUpsertWithoutPatientsInput = {
    update: XOR<StudyUpdateWithoutPatientsInput, StudyUncheckedUpdateWithoutPatientsInput>
    create: XOR<StudyCreateWithoutPatientsInput, StudyUncheckedCreateWithoutPatientsInput>
    where?: StudyWhereInput
  }

  export type StudyUpdateToOneWithWhereWithoutPatientsInput = {
    where?: StudyWhereInput
    data: XOR<StudyUpdateWithoutPatientsInput, StudyUncheckedUpdateWithoutPatientsInput>
  }

  export type StudyUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    practice?: PracticeUpdateOneRequiredWithoutStudiesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedStudiesNestedInput
    assignedUsers?: StudyAssignmentUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    assignedUsers?: StudyAssignmentUncheckedUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUncheckedUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUncheckedUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type PatientUpsertWithoutStudiesInput = {
    update: XOR<PatientUpdateWithoutStudiesInput, PatientUncheckedUpdateWithoutStudiesInput>
    create: XOR<PatientCreateWithoutStudiesInput, PatientUncheckedCreateWithoutStudiesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutStudiesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutStudiesInput, PatientUncheckedUpdateWithoutStudiesInput>
  }

  export type PatientUpdateWithoutStudiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice?: PracticeUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    observations?: ObservationUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutPatientNestedInput
    files?: FileUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutStudiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    observations?: ObservationUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutPatientNestedInput
    files?: FileUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type ObservationUpsertWithWhereUniqueWithoutStudyPatientInput = {
    where: ObservationWhereUniqueInput
    update: XOR<ObservationUpdateWithoutStudyPatientInput, ObservationUncheckedUpdateWithoutStudyPatientInput>
    create: XOR<ObservationCreateWithoutStudyPatientInput, ObservationUncheckedCreateWithoutStudyPatientInput>
  }

  export type ObservationUpdateWithWhereUniqueWithoutStudyPatientInput = {
    where: ObservationWhereUniqueInput
    data: XOR<ObservationUpdateWithoutStudyPatientInput, ObservationUncheckedUpdateWithoutStudyPatientInput>
  }

  export type ObservationUpdateManyWithWhereWithoutStudyPatientInput = {
    where: ObservationScalarWhereInput
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyWithoutStudyPatientInput>
  }

  export type TreatmentUpsertWithWhereUniqueWithoutStudyPatientInput = {
    where: TreatmentWhereUniqueInput
    update: XOR<TreatmentUpdateWithoutStudyPatientInput, TreatmentUncheckedUpdateWithoutStudyPatientInput>
    create: XOR<TreatmentCreateWithoutStudyPatientInput, TreatmentUncheckedCreateWithoutStudyPatientInput>
  }

  export type TreatmentUpdateWithWhereUniqueWithoutStudyPatientInput = {
    where: TreatmentWhereUniqueInput
    data: XOR<TreatmentUpdateWithoutStudyPatientInput, TreatmentUncheckedUpdateWithoutStudyPatientInput>
  }

  export type TreatmentUpdateManyWithWhereWithoutStudyPatientInput = {
    where: TreatmentScalarWhereInput
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyWithoutStudyPatientInput>
  }

  export type StudyCreateWithoutAssignedUsersInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    practice: PracticeCreateNestedOneWithoutStudiesInput
    createdBy: UserCreateNestedOneWithoutCreatedStudiesInput
    patients?: StudyPatientCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateCreateNestedManyWithoutStudyInput
    notes?: StudyNoteCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutAssignedUsersInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    patients?: StudyPatientUncheckedCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateUncheckedCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateUncheckedCreateNestedManyWithoutStudyInput
    notes?: StudyNoteUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutAssignedUsersInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutAssignedUsersInput, StudyUncheckedCreateWithoutAssignedUsersInput>
  }

  export type UserCreateWithoutAssignedStudiesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    practice?: PracticeCreateNestedOneWithoutUsersInput
    createdStudies?: StudyCreateNestedManyWithoutCreatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    observations?: ObservationCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedStudiesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    practiceId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdStudies?: StudyUncheckedCreateNestedManyWithoutCreatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    observations?: ObservationUncheckedCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedStudiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedStudiesInput, UserUncheckedCreateWithoutAssignedStudiesInput>
  }

  export type StudyUpsertWithoutAssignedUsersInput = {
    update: XOR<StudyUpdateWithoutAssignedUsersInput, StudyUncheckedUpdateWithoutAssignedUsersInput>
    create: XOR<StudyCreateWithoutAssignedUsersInput, StudyUncheckedCreateWithoutAssignedUsersInput>
    where?: StudyWhereInput
  }

  export type StudyUpdateToOneWithWhereWithoutAssignedUsersInput = {
    where?: StudyWhereInput
    data: XOR<StudyUpdateWithoutAssignedUsersInput, StudyUncheckedUpdateWithoutAssignedUsersInput>
  }

  export type StudyUpdateWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    practice?: PracticeUpdateOneRequiredWithoutStudiesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedStudiesNestedInput
    patients?: StudyPatientUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    patients?: StudyPatientUncheckedUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUncheckedUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUncheckedUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type UserUpsertWithoutAssignedStudiesInput = {
    update: XOR<UserUpdateWithoutAssignedStudiesInput, UserUncheckedUpdateWithoutAssignedStudiesInput>
    create: XOR<UserCreateWithoutAssignedStudiesInput, UserUncheckedCreateWithoutAssignedStudiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedStudiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedStudiesInput, UserUncheckedUpdateWithoutAssignedStudiesInput>
  }

  export type UserUpdateWithoutAssignedStudiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practice?: PracticeUpdateOneWithoutUsersNestedInput
    createdStudies?: StudyUpdateManyWithoutCreatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedStudiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    practiceId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdStudies?: StudyUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StudyCreateWithoutNotesInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    practice: PracticeCreateNestedOneWithoutStudiesInput
    createdBy: UserCreateNestedOneWithoutCreatedStudiesInput
    patients?: StudyPatientCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutNotesInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    patients?: StudyPatientUncheckedCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentUncheckedCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateUncheckedCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutNotesInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutNotesInput, StudyUncheckedCreateWithoutNotesInput>
  }

  export type StudyUpsertWithoutNotesInput = {
    update: XOR<StudyUpdateWithoutNotesInput, StudyUncheckedUpdateWithoutNotesInput>
    create: XOR<StudyCreateWithoutNotesInput, StudyUncheckedCreateWithoutNotesInput>
    where?: StudyWhereInput
  }

  export type StudyUpdateToOneWithWhereWithoutNotesInput = {
    where?: StudyWhereInput
    data: XOR<StudyUpdateWithoutNotesInput, StudyUncheckedUpdateWithoutNotesInput>
  }

  export type StudyUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    practice?: PracticeUpdateOneRequiredWithoutStudiesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedStudiesNestedInput
    patients?: StudyPatientUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    patients?: StudyPatientUncheckedUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUncheckedUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUncheckedUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type StudyCreateWithoutSymptomTemplatesInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    practice: PracticeCreateNestedOneWithoutStudiesInput
    createdBy: UserCreateNestedOneWithoutCreatedStudiesInput
    patients?: StudyPatientCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateCreateNestedManyWithoutStudyInput
    notes?: StudyNoteCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutSymptomTemplatesInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    patients?: StudyPatientUncheckedCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentUncheckedCreateNestedManyWithoutStudyInput
    treatmentTemplates?: TreatmentTemplateUncheckedCreateNestedManyWithoutStudyInput
    notes?: StudyNoteUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutSymptomTemplatesInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutSymptomTemplatesInput, StudyUncheckedCreateWithoutSymptomTemplatesInput>
  }

  export type ObservationCreateWithoutSymptomTemplateInput = {
    id?: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    patient: PatientCreateNestedOneWithoutObservationsInput
    studyPatient: StudyPatientCreateNestedOneWithoutObservationsInput
    recordedBy: UserCreateNestedOneWithoutObservationsInput
    files?: FileCreateNestedManyWithoutObservationInput
    alerts?: AlertCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutSymptomTemplateInput = {
    id?: string
    patientId: string
    studyPatientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutObservationInput
    alerts?: AlertUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutSymptomTemplateInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutSymptomTemplateInput, ObservationUncheckedCreateWithoutSymptomTemplateInput>
  }

  export type ObservationCreateManySymptomTemplateInputEnvelope = {
    data: ObservationCreateManySymptomTemplateInput | ObservationCreateManySymptomTemplateInput[]
    skipDuplicates?: boolean
  }

  export type AlertThresholdCreateWithoutSymptomTemplateInput = {
    id?: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alerts?: AlertCreateNestedManyWithoutThresholdInput
  }

  export type AlertThresholdUncheckedCreateWithoutSymptomTemplateInput = {
    id?: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alerts?: AlertUncheckedCreateNestedManyWithoutThresholdInput
  }

  export type AlertThresholdCreateOrConnectWithoutSymptomTemplateInput = {
    where: AlertThresholdWhereUniqueInput
    create: XOR<AlertThresholdCreateWithoutSymptomTemplateInput, AlertThresholdUncheckedCreateWithoutSymptomTemplateInput>
  }

  export type AlertThresholdCreateManySymptomTemplateInputEnvelope = {
    data: AlertThresholdCreateManySymptomTemplateInput | AlertThresholdCreateManySymptomTemplateInput[]
    skipDuplicates?: boolean
  }

  export type StudyUpsertWithoutSymptomTemplatesInput = {
    update: XOR<StudyUpdateWithoutSymptomTemplatesInput, StudyUncheckedUpdateWithoutSymptomTemplatesInput>
    create: XOR<StudyCreateWithoutSymptomTemplatesInput, StudyUncheckedCreateWithoutSymptomTemplatesInput>
    where?: StudyWhereInput
  }

  export type StudyUpdateToOneWithWhereWithoutSymptomTemplatesInput = {
    where?: StudyWhereInput
    data: XOR<StudyUpdateWithoutSymptomTemplatesInput, StudyUncheckedUpdateWithoutSymptomTemplatesInput>
  }

  export type StudyUpdateWithoutSymptomTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    practice?: PracticeUpdateOneRequiredWithoutStudiesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedStudiesNestedInput
    patients?: StudyPatientUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutSymptomTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    patients?: StudyPatientUncheckedUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUncheckedUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUncheckedUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type ObservationUpsertWithWhereUniqueWithoutSymptomTemplateInput = {
    where: ObservationWhereUniqueInput
    update: XOR<ObservationUpdateWithoutSymptomTemplateInput, ObservationUncheckedUpdateWithoutSymptomTemplateInput>
    create: XOR<ObservationCreateWithoutSymptomTemplateInput, ObservationUncheckedCreateWithoutSymptomTemplateInput>
  }

  export type ObservationUpdateWithWhereUniqueWithoutSymptomTemplateInput = {
    where: ObservationWhereUniqueInput
    data: XOR<ObservationUpdateWithoutSymptomTemplateInput, ObservationUncheckedUpdateWithoutSymptomTemplateInput>
  }

  export type ObservationUpdateManyWithWhereWithoutSymptomTemplateInput = {
    where: ObservationScalarWhereInput
    data: XOR<ObservationUpdateManyMutationInput, ObservationUncheckedUpdateManyWithoutSymptomTemplateInput>
  }

  export type AlertThresholdUpsertWithWhereUniqueWithoutSymptomTemplateInput = {
    where: AlertThresholdWhereUniqueInput
    update: XOR<AlertThresholdUpdateWithoutSymptomTemplateInput, AlertThresholdUncheckedUpdateWithoutSymptomTemplateInput>
    create: XOR<AlertThresholdCreateWithoutSymptomTemplateInput, AlertThresholdUncheckedCreateWithoutSymptomTemplateInput>
  }

  export type AlertThresholdUpdateWithWhereUniqueWithoutSymptomTemplateInput = {
    where: AlertThresholdWhereUniqueInput
    data: XOR<AlertThresholdUpdateWithoutSymptomTemplateInput, AlertThresholdUncheckedUpdateWithoutSymptomTemplateInput>
  }

  export type AlertThresholdUpdateManyWithWhereWithoutSymptomTemplateInput = {
    where: AlertThresholdScalarWhereInput
    data: XOR<AlertThresholdUpdateManyMutationInput, AlertThresholdUncheckedUpdateManyWithoutSymptomTemplateInput>
  }

  export type AlertThresholdScalarWhereInput = {
    AND?: AlertThresholdScalarWhereInput | AlertThresholdScalarWhereInput[]
    OR?: AlertThresholdScalarWhereInput[]
    NOT?: AlertThresholdScalarWhereInput | AlertThresholdScalarWhereInput[]
    id?: StringFilter<"AlertThreshold"> | string
    symptomTemplateId?: StringFilter<"AlertThreshold"> | string
    condition?: StringFilter<"AlertThreshold"> | string
    severity?: EnumAlertSeverityFilter<"AlertThreshold"> | $Enums.AlertSeverity
    message?: StringFilter<"AlertThreshold"> | string
    createdAt?: DateTimeFilter<"AlertThreshold"> | Date | string
    updatedAt?: DateTimeFilter<"AlertThreshold"> | Date | string
  }

  export type SymptomTemplateCreateWithoutObservationsInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    study: StudyCreateNestedOneWithoutSymptomTemplatesInput
    alertThresholds?: AlertThresholdCreateNestedManyWithoutSymptomTemplateInput
  }

  export type SymptomTemplateUncheckedCreateWithoutObservationsInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    studyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    alertThresholds?: AlertThresholdUncheckedCreateNestedManyWithoutSymptomTemplateInput
  }

  export type SymptomTemplateCreateOrConnectWithoutObservationsInput = {
    where: SymptomTemplateWhereUniqueInput
    create: XOR<SymptomTemplateCreateWithoutObservationsInput, SymptomTemplateUncheckedCreateWithoutObservationsInput>
  }

  export type PatientCreateWithoutObservationsInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice: PracticeCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    studies?: StudyPatientCreateNestedManyWithoutPatientInput
    treatments?: TreatmentCreateNestedManyWithoutPatientInput
    files?: FileCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutObservationsInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedCreateNestedManyWithoutPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutPatientInput
    files?: FileUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutObservationsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutObservationsInput, PatientUncheckedCreateWithoutObservationsInput>
  }

  export type StudyPatientCreateWithoutObservationsInput = {
    id?: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    study: StudyCreateNestedOneWithoutPatientsInput
    patient: PatientCreateNestedOneWithoutStudiesInput
    treatments?: TreatmentCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientUncheckedCreateWithoutObservationsInput = {
    id?: string
    studyId: string
    patientId: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    treatments?: TreatmentUncheckedCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientCreateOrConnectWithoutObservationsInput = {
    where: StudyPatientWhereUniqueInput
    create: XOR<StudyPatientCreateWithoutObservationsInput, StudyPatientUncheckedCreateWithoutObservationsInput>
  }

  export type UserCreateWithoutObservationsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    practice?: PracticeCreateNestedOneWithoutUsersInput
    createdStudies?: StudyCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutObservationsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    practiceId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdStudies?: StudyUncheckedCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentUncheckedCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutObservationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutObservationsInput, UserUncheckedCreateWithoutObservationsInput>
  }

  export type FileCreateWithoutObservationInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patient?: PatientCreateNestedOneWithoutFilesInput
    treatment?: TreatmentCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutObservationInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patientId?: string | null
    treatmentId?: string | null
  }

  export type FileCreateOrConnectWithoutObservationInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutObservationInput, FileUncheckedCreateWithoutObservationInput>
  }

  export type FileCreateManyObservationInputEnvelope = {
    data: FileCreateManyObservationInput | FileCreateManyObservationInput[]
    skipDuplicates?: boolean
  }

  export type AlertCreateWithoutObservationInput = {
    id?: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
    threshold: AlertThresholdCreateNestedOneWithoutAlertsInput
    notifications?: NotificationCreateNestedManyWithoutAlertInput
  }

  export type AlertUncheckedCreateWithoutObservationInput = {
    id?: string
    thresholdId: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
    notifications?: NotificationUncheckedCreateNestedManyWithoutAlertInput
  }

  export type AlertCreateOrConnectWithoutObservationInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutObservationInput, AlertUncheckedCreateWithoutObservationInput>
  }

  export type AlertCreateManyObservationInputEnvelope = {
    data: AlertCreateManyObservationInput | AlertCreateManyObservationInput[]
    skipDuplicates?: boolean
  }

  export type SymptomTemplateUpsertWithoutObservationsInput = {
    update: XOR<SymptomTemplateUpdateWithoutObservationsInput, SymptomTemplateUncheckedUpdateWithoutObservationsInput>
    create: XOR<SymptomTemplateCreateWithoutObservationsInput, SymptomTemplateUncheckedCreateWithoutObservationsInput>
    where?: SymptomTemplateWhereInput
  }

  export type SymptomTemplateUpdateToOneWithWhereWithoutObservationsInput = {
    where?: SymptomTemplateWhereInput
    data: XOR<SymptomTemplateUpdateWithoutObservationsInput, SymptomTemplateUncheckedUpdateWithoutObservationsInput>
  }

  export type SymptomTemplateUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    study?: StudyUpdateOneRequiredWithoutSymptomTemplatesNestedInput
    alertThresholds?: AlertThresholdUpdateManyWithoutSymptomTemplateNestedInput
  }

  export type SymptomTemplateUncheckedUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    studyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alertThresholds?: AlertThresholdUncheckedUpdateManyWithoutSymptomTemplateNestedInput
  }

  export type PatientUpsertWithoutObservationsInput = {
    update: XOR<PatientUpdateWithoutObservationsInput, PatientUncheckedUpdateWithoutObservationsInput>
    create: XOR<PatientCreateWithoutObservationsInput, PatientUncheckedCreateWithoutObservationsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutObservationsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutObservationsInput, PatientUncheckedUpdateWithoutObservationsInput>
  }

  export type PatientUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice?: PracticeUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    studies?: StudyPatientUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutPatientNestedInput
    files?: FileUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutPatientNestedInput
    files?: FileUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type StudyPatientUpsertWithoutObservationsInput = {
    update: XOR<StudyPatientUpdateWithoutObservationsInput, StudyPatientUncheckedUpdateWithoutObservationsInput>
    create: XOR<StudyPatientCreateWithoutObservationsInput, StudyPatientUncheckedCreateWithoutObservationsInput>
    where?: StudyPatientWhereInput
  }

  export type StudyPatientUpdateToOneWithWhereWithoutObservationsInput = {
    where?: StudyPatientWhereInput
    data: XOR<StudyPatientUpdateWithoutObservationsInput, StudyPatientUncheckedUpdateWithoutObservationsInput>
  }

  export type StudyPatientUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    study?: StudyUpdateOneRequiredWithoutPatientsNestedInput
    patient?: PatientUpdateOneRequiredWithoutStudiesNestedInput
    treatments?: TreatmentUpdateManyWithoutStudyPatientNestedInput
  }

  export type StudyPatientUncheckedUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    treatments?: TreatmentUncheckedUpdateManyWithoutStudyPatientNestedInput
  }

  export type UserUpsertWithoutObservationsInput = {
    update: XOR<UserUpdateWithoutObservationsInput, UserUncheckedUpdateWithoutObservationsInput>
    create: XOR<UserCreateWithoutObservationsInput, UserUncheckedCreateWithoutObservationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutObservationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutObservationsInput, UserUncheckedUpdateWithoutObservationsInput>
  }

  export type UserUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practice?: PracticeUpdateOneWithoutUsersNestedInput
    createdStudies?: StudyUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutObservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    practiceId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdStudies?: StudyUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUncheckedUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutObservationInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutObservationInput, FileUncheckedUpdateWithoutObservationInput>
    create: XOR<FileCreateWithoutObservationInput, FileUncheckedCreateWithoutObservationInput>
  }

  export type FileUpdateWithWhereUniqueWithoutObservationInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutObservationInput, FileUncheckedUpdateWithoutObservationInput>
  }

  export type FileUpdateManyWithWhereWithoutObservationInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutObservationInput>
  }

  export type AlertUpsertWithWhereUniqueWithoutObservationInput = {
    where: AlertWhereUniqueInput
    update: XOR<AlertUpdateWithoutObservationInput, AlertUncheckedUpdateWithoutObservationInput>
    create: XOR<AlertCreateWithoutObservationInput, AlertUncheckedCreateWithoutObservationInput>
  }

  export type AlertUpdateWithWhereUniqueWithoutObservationInput = {
    where: AlertWhereUniqueInput
    data: XOR<AlertUpdateWithoutObservationInput, AlertUncheckedUpdateWithoutObservationInput>
  }

  export type AlertUpdateManyWithWhereWithoutObservationInput = {
    where: AlertScalarWhereInput
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyWithoutObservationInput>
  }

  export type AlertScalarWhereInput = {
    AND?: AlertScalarWhereInput | AlertScalarWhereInput[]
    OR?: AlertScalarWhereInput[]
    NOT?: AlertScalarWhereInput | AlertScalarWhereInput[]
    id?: StringFilter<"Alert"> | string
    thresholdId?: StringFilter<"Alert"> | string
    observationId?: StringFilter<"Alert"> | string
    triggeredAt?: DateTimeFilter<"Alert"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
  }

  export type StudyCreateWithoutTreatmentTemplatesInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    practice: PracticeCreateNestedOneWithoutStudiesInput
    createdBy: UserCreateNestedOneWithoutCreatedStudiesInput
    patients?: StudyPatientCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateCreateNestedManyWithoutStudyInput
    notes?: StudyNoteCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutTreatmentTemplatesInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
    patients?: StudyPatientUncheckedCreateNestedManyWithoutStudyInput
    assignedUsers?: StudyAssignmentUncheckedCreateNestedManyWithoutStudyInput
    symptomTemplates?: SymptomTemplateUncheckedCreateNestedManyWithoutStudyInput
    notes?: StudyNoteUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutTreatmentTemplatesInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutTreatmentTemplatesInput, StudyUncheckedCreateWithoutTreatmentTemplatesInput>
  }

  export type TreatmentCreateWithoutTemplateInput = {
    id?: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    studyPatient: StudyPatientCreateNestedOneWithoutTreatmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedTreatmentsInput
    files?: FileCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutTemplateInput = {
    id?: string
    patientId: string
    studyPatientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutTemplateInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutTemplateInput, TreatmentUncheckedCreateWithoutTemplateInput>
  }

  export type TreatmentCreateManyTemplateInputEnvelope = {
    data: TreatmentCreateManyTemplateInput | TreatmentCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type StudyUpsertWithoutTreatmentTemplatesInput = {
    update: XOR<StudyUpdateWithoutTreatmentTemplatesInput, StudyUncheckedUpdateWithoutTreatmentTemplatesInput>
    create: XOR<StudyCreateWithoutTreatmentTemplatesInput, StudyUncheckedCreateWithoutTreatmentTemplatesInput>
    where?: StudyWhereInput
  }

  export type StudyUpdateToOneWithWhereWithoutTreatmentTemplatesInput = {
    where?: StudyWhereInput
    data: XOR<StudyUpdateWithoutTreatmentTemplatesInput, StudyUncheckedUpdateWithoutTreatmentTemplatesInput>
  }

  export type StudyUpdateWithoutTreatmentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    practice?: PracticeUpdateOneRequiredWithoutStudiesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedStudiesNestedInput
    patients?: StudyPatientUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutTreatmentTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    patients?: StudyPatientUncheckedUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUncheckedUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUncheckedUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type TreatmentUpsertWithWhereUniqueWithoutTemplateInput = {
    where: TreatmentWhereUniqueInput
    update: XOR<TreatmentUpdateWithoutTemplateInput, TreatmentUncheckedUpdateWithoutTemplateInput>
    create: XOR<TreatmentCreateWithoutTemplateInput, TreatmentUncheckedCreateWithoutTemplateInput>
  }

  export type TreatmentUpdateWithWhereUniqueWithoutTemplateInput = {
    where: TreatmentWhereUniqueInput
    data: XOR<TreatmentUpdateWithoutTemplateInput, TreatmentUncheckedUpdateWithoutTemplateInput>
  }

  export type TreatmentUpdateManyWithWhereWithoutTemplateInput = {
    where: TreatmentScalarWhereInput
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyWithoutTemplateInput>
  }

  export type TreatmentTemplateCreateWithoutTreatmentsInput = {
    id?: string
    name: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    study: StudyCreateNestedOneWithoutTreatmentTemplatesInput
  }

  export type TreatmentTemplateUncheckedCreateWithoutTreatmentsInput = {
    id?: string
    name: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    studyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentTemplateCreateOrConnectWithoutTreatmentsInput = {
    where: TreatmentTemplateWhereUniqueInput
    create: XOR<TreatmentTemplateCreateWithoutTreatmentsInput, TreatmentTemplateUncheckedCreateWithoutTreatmentsInput>
  }

  export type PatientCreateWithoutTreatmentsInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice: PracticeCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    studies?: StudyPatientCreateNestedManyWithoutPatientInput
    observations?: ObservationCreateNestedManyWithoutPatientInput
    files?: FileCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutTreatmentsInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedCreateNestedManyWithoutPatientInput
    observations?: ObservationUncheckedCreateNestedManyWithoutPatientInput
    files?: FileUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutTreatmentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutTreatmentsInput, PatientUncheckedCreateWithoutTreatmentsInput>
  }

  export type StudyPatientCreateWithoutTreatmentsInput = {
    id?: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    study: StudyCreateNestedOneWithoutPatientsInput
    patient: PatientCreateNestedOneWithoutStudiesInput
    observations?: ObservationCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientUncheckedCreateWithoutTreatmentsInput = {
    id?: string
    studyId: string
    patientId: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
    observations?: ObservationUncheckedCreateNestedManyWithoutStudyPatientInput
  }

  export type StudyPatientCreateOrConnectWithoutTreatmentsInput = {
    where: StudyPatientWhereUniqueInput
    create: XOR<StudyPatientCreateWithoutTreatmentsInput, StudyPatientUncheckedCreateWithoutTreatmentsInput>
  }

  export type UserCreateWithoutCreatedTreatmentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    practice?: PracticeCreateNestedOneWithoutUsersInput
    createdStudies?: StudyCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentCreateNestedManyWithoutUserInput
    observations?: ObservationCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTreatmentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    practiceId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdStudies?: StudyUncheckedCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentUncheckedCreateNestedManyWithoutUserInput
    observations?: ObservationUncheckedCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTreatmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTreatmentsInput, UserUncheckedCreateWithoutCreatedTreatmentsInput>
  }

  export type FileCreateWithoutTreatmentInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patient?: PatientCreateNestedOneWithoutFilesInput
    observation?: ObservationCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutTreatmentInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patientId?: string | null
    observationId?: string | null
  }

  export type FileCreateOrConnectWithoutTreatmentInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutTreatmentInput, FileUncheckedCreateWithoutTreatmentInput>
  }

  export type FileCreateManyTreatmentInputEnvelope = {
    data: FileCreateManyTreatmentInput | FileCreateManyTreatmentInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentTemplateUpsertWithoutTreatmentsInput = {
    update: XOR<TreatmentTemplateUpdateWithoutTreatmentsInput, TreatmentTemplateUncheckedUpdateWithoutTreatmentsInput>
    create: XOR<TreatmentTemplateCreateWithoutTreatmentsInput, TreatmentTemplateUncheckedCreateWithoutTreatmentsInput>
    where?: TreatmentTemplateWhereInput
  }

  export type TreatmentTemplateUpdateToOneWithWhereWithoutTreatmentsInput = {
    where?: TreatmentTemplateWhereInput
    data: XOR<TreatmentTemplateUpdateWithoutTreatmentsInput, TreatmentTemplateUncheckedUpdateWithoutTreatmentsInput>
  }

  export type TreatmentTemplateUpdateWithoutTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    study?: StudyUpdateOneRequiredWithoutTreatmentTemplatesNestedInput
  }

  export type TreatmentTemplateUncheckedUpdateWithoutTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    studyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUpsertWithoutTreatmentsInput = {
    update: XOR<PatientUpdateWithoutTreatmentsInput, PatientUncheckedUpdateWithoutTreatmentsInput>
    create: XOR<PatientCreateWithoutTreatmentsInput, PatientUncheckedCreateWithoutTreatmentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutTreatmentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutTreatmentsInput, PatientUncheckedUpdateWithoutTreatmentsInput>
  }

  export type PatientUpdateWithoutTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice?: PracticeUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    studies?: StudyPatientUpdateManyWithoutPatientNestedInput
    observations?: ObservationUpdateManyWithoutPatientNestedInput
    files?: FileUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedUpdateManyWithoutPatientNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutPatientNestedInput
    files?: FileUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type StudyPatientUpsertWithoutTreatmentsInput = {
    update: XOR<StudyPatientUpdateWithoutTreatmentsInput, StudyPatientUncheckedUpdateWithoutTreatmentsInput>
    create: XOR<StudyPatientCreateWithoutTreatmentsInput, StudyPatientUncheckedCreateWithoutTreatmentsInput>
    where?: StudyPatientWhereInput
  }

  export type StudyPatientUpdateToOneWithWhereWithoutTreatmentsInput = {
    where?: StudyPatientWhereInput
    data: XOR<StudyPatientUpdateWithoutTreatmentsInput, StudyPatientUncheckedUpdateWithoutTreatmentsInput>
  }

  export type StudyPatientUpdateWithoutTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    study?: StudyUpdateOneRequiredWithoutPatientsNestedInput
    patient?: PatientUpdateOneRequiredWithoutStudiesNestedInput
    observations?: ObservationUpdateManyWithoutStudyPatientNestedInput
  }

  export type StudyPatientUncheckedUpdateWithoutTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    observations?: ObservationUncheckedUpdateManyWithoutStudyPatientNestedInput
  }

  export type UserUpsertWithoutCreatedTreatmentsInput = {
    update: XOR<UserUpdateWithoutCreatedTreatmentsInput, UserUncheckedUpdateWithoutCreatedTreatmentsInput>
    create: XOR<UserCreateWithoutCreatedTreatmentsInput, UserUncheckedCreateWithoutCreatedTreatmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTreatmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTreatmentsInput, UserUncheckedUpdateWithoutCreatedTreatmentsInput>
  }

  export type UserUpdateWithoutCreatedTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practice?: PracticeUpdateOneWithoutUsersNestedInput
    createdStudies?: StudyUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUpdateManyWithoutUserNestedInput
    observations?: ObservationUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTreatmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    practiceId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdStudies?: StudyUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUncheckedUpdateManyWithoutUserNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutTreatmentInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutTreatmentInput, FileUncheckedUpdateWithoutTreatmentInput>
    create: XOR<FileCreateWithoutTreatmentInput, FileUncheckedCreateWithoutTreatmentInput>
  }

  export type FileUpdateWithWhereUniqueWithoutTreatmentInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutTreatmentInput, FileUncheckedUpdateWithoutTreatmentInput>
  }

  export type FileUpdateManyWithWhereWithoutTreatmentInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutTreatmentInput>
  }

  export type SymptomTemplateCreateWithoutAlertThresholdsInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    study: StudyCreateNestedOneWithoutSymptomTemplatesInput
    observations?: ObservationCreateNestedManyWithoutSymptomTemplateInput
  }

  export type SymptomTemplateUncheckedCreateWithoutAlertThresholdsInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    studyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    observations?: ObservationUncheckedCreateNestedManyWithoutSymptomTemplateInput
  }

  export type SymptomTemplateCreateOrConnectWithoutAlertThresholdsInput = {
    where: SymptomTemplateWhereUniqueInput
    create: XOR<SymptomTemplateCreateWithoutAlertThresholdsInput, SymptomTemplateUncheckedCreateWithoutAlertThresholdsInput>
  }

  export type AlertCreateWithoutThresholdInput = {
    id?: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
    observation: ObservationCreateNestedOneWithoutAlertsInput
    notifications?: NotificationCreateNestedManyWithoutAlertInput
  }

  export type AlertUncheckedCreateWithoutThresholdInput = {
    id?: string
    observationId: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
    notifications?: NotificationUncheckedCreateNestedManyWithoutAlertInput
  }

  export type AlertCreateOrConnectWithoutThresholdInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutThresholdInput, AlertUncheckedCreateWithoutThresholdInput>
  }

  export type AlertCreateManyThresholdInputEnvelope = {
    data: AlertCreateManyThresholdInput | AlertCreateManyThresholdInput[]
    skipDuplicates?: boolean
  }

  export type SymptomTemplateUpsertWithoutAlertThresholdsInput = {
    update: XOR<SymptomTemplateUpdateWithoutAlertThresholdsInput, SymptomTemplateUncheckedUpdateWithoutAlertThresholdsInput>
    create: XOR<SymptomTemplateCreateWithoutAlertThresholdsInput, SymptomTemplateUncheckedCreateWithoutAlertThresholdsInput>
    where?: SymptomTemplateWhereInput
  }

  export type SymptomTemplateUpdateToOneWithWhereWithoutAlertThresholdsInput = {
    where?: SymptomTemplateWhereInput
    data: XOR<SymptomTemplateUpdateWithoutAlertThresholdsInput, SymptomTemplateUncheckedUpdateWithoutAlertThresholdsInput>
  }

  export type SymptomTemplateUpdateWithoutAlertThresholdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    study?: StudyUpdateOneRequiredWithoutSymptomTemplatesNestedInput
    observations?: ObservationUpdateManyWithoutSymptomTemplateNestedInput
  }

  export type SymptomTemplateUncheckedUpdateWithoutAlertThresholdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    studyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: ObservationUncheckedUpdateManyWithoutSymptomTemplateNestedInput
  }

  export type AlertUpsertWithWhereUniqueWithoutThresholdInput = {
    where: AlertWhereUniqueInput
    update: XOR<AlertUpdateWithoutThresholdInput, AlertUncheckedUpdateWithoutThresholdInput>
    create: XOR<AlertCreateWithoutThresholdInput, AlertUncheckedCreateWithoutThresholdInput>
  }

  export type AlertUpdateWithWhereUniqueWithoutThresholdInput = {
    where: AlertWhereUniqueInput
    data: XOR<AlertUpdateWithoutThresholdInput, AlertUncheckedUpdateWithoutThresholdInput>
  }

  export type AlertUpdateManyWithWhereWithoutThresholdInput = {
    where: AlertScalarWhereInput
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyWithoutThresholdInput>
  }

  export type AlertThresholdCreateWithoutAlertsInput = {
    id?: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    symptomTemplate: SymptomTemplateCreateNestedOneWithoutAlertThresholdsInput
  }

  export type AlertThresholdUncheckedCreateWithoutAlertsInput = {
    id?: string
    symptomTemplateId: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlertThresholdCreateOrConnectWithoutAlertsInput = {
    where: AlertThresholdWhereUniqueInput
    create: XOR<AlertThresholdCreateWithoutAlertsInput, AlertThresholdUncheckedCreateWithoutAlertsInput>
  }

  export type ObservationCreateWithoutAlertsInput = {
    id?: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    symptomTemplate: SymptomTemplateCreateNestedOneWithoutObservationsInput
    patient: PatientCreateNestedOneWithoutObservationsInput
    studyPatient: StudyPatientCreateNestedOneWithoutObservationsInput
    recordedBy: UserCreateNestedOneWithoutObservationsInput
    files?: FileCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutAlertsInput = {
    id?: string
    symptomTemplateId: string
    patientId: string
    studyPatientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    files?: FileUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutAlertsInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutAlertsInput, ObservationUncheckedCreateWithoutAlertsInput>
  }

  export type NotificationCreateWithoutAlertInput = {
    id?: string
    title: string
    message: string
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutAlertInput = {
    id?: string
    userId: string
    title: string
    message: string
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
  }

  export type NotificationCreateOrConnectWithoutAlertInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutAlertInput, NotificationUncheckedCreateWithoutAlertInput>
  }

  export type NotificationCreateManyAlertInputEnvelope = {
    data: NotificationCreateManyAlertInput | NotificationCreateManyAlertInput[]
    skipDuplicates?: boolean
  }

  export type AlertThresholdUpsertWithoutAlertsInput = {
    update: XOR<AlertThresholdUpdateWithoutAlertsInput, AlertThresholdUncheckedUpdateWithoutAlertsInput>
    create: XOR<AlertThresholdCreateWithoutAlertsInput, AlertThresholdUncheckedCreateWithoutAlertsInput>
    where?: AlertThresholdWhereInput
  }

  export type AlertThresholdUpdateToOneWithWhereWithoutAlertsInput = {
    where?: AlertThresholdWhereInput
    data: XOR<AlertThresholdUpdateWithoutAlertsInput, AlertThresholdUncheckedUpdateWithoutAlertsInput>
  }

  export type AlertThresholdUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    symptomTemplate?: SymptomTemplateUpdateOneRequiredWithoutAlertThresholdsNestedInput
  }

  export type AlertThresholdUncheckedUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ObservationUpsertWithoutAlertsInput = {
    update: XOR<ObservationUpdateWithoutAlertsInput, ObservationUncheckedUpdateWithoutAlertsInput>
    create: XOR<ObservationCreateWithoutAlertsInput, ObservationUncheckedCreateWithoutAlertsInput>
    where?: ObservationWhereInput
  }

  export type ObservationUpdateToOneWithWhereWithoutAlertsInput = {
    where?: ObservationWhereInput
    data: XOR<ObservationUpdateWithoutAlertsInput, ObservationUncheckedUpdateWithoutAlertsInput>
  }

  export type ObservationUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    symptomTemplate?: SymptomTemplateUpdateOneRequiredWithoutObservationsNestedInput
    patient?: PatientUpdateOneRequiredWithoutObservationsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutObservationsNestedInput
    recordedBy?: UserUpdateOneRequiredWithoutObservationsNestedInput
    files?: FileUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutAlertInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutAlertInput, NotificationUncheckedUpdateWithoutAlertInput>
    create: XOR<NotificationCreateWithoutAlertInput, NotificationUncheckedCreateWithoutAlertInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutAlertInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutAlertInput, NotificationUncheckedUpdateWithoutAlertInput>
  }

  export type NotificationUpdateManyWithWhereWithoutAlertInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutAlertInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    practice?: PracticeCreateNestedOneWithoutUsersInput
    createdStudies?: StudyCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    observations?: ObservationCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    practiceId?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    createdStudies?: StudyUncheckedCreateNestedManyWithoutCreatedByInput
    assignedStudies?: StudyAssignmentUncheckedCreateNestedManyWithoutUserInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    observations?: ObservationUncheckedCreateNestedManyWithoutRecordedByInput
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type AlertCreateWithoutNotificationsInput = {
    id?: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
    threshold: AlertThresholdCreateNestedOneWithoutAlertsInput
    observation: ObservationCreateNestedOneWithoutAlertsInput
  }

  export type AlertUncheckedCreateWithoutNotificationsInput = {
    id?: string
    thresholdId: string
    observationId: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type AlertCreateOrConnectWithoutNotificationsInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutNotificationsInput, AlertUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practice?: PracticeUpdateOneWithoutUsersNestedInput
    createdStudies?: StudyUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    practiceId?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdStudies?: StudyUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUncheckedUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type AlertUpsertWithoutNotificationsInput = {
    update: XOR<AlertUpdateWithoutNotificationsInput, AlertUncheckedUpdateWithoutNotificationsInput>
    create: XOR<AlertCreateWithoutNotificationsInput, AlertUncheckedCreateWithoutNotificationsInput>
    where?: AlertWhereInput
  }

  export type AlertUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: AlertWhereInput
    data: XOR<AlertUpdateWithoutNotificationsInput, AlertUncheckedUpdateWithoutNotificationsInput>
  }

  export type AlertUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threshold?: AlertThresholdUpdateOneRequiredWithoutAlertsNestedInput
    observation?: ObservationUpdateOneRequiredWithoutAlertsNestedInput
  }

  export type AlertUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    thresholdId?: StringFieldUpdateOperationsInput | string
    observationId?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientCreateWithoutFilesInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice: PracticeCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    studies?: StudyPatientCreateNestedManyWithoutPatientInput
    observations?: ObservationCreateNestedManyWithoutPatientInput
    treatments?: TreatmentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    practiceId: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedCreateNestedManyWithoutPatientInput
    observations?: ObservationUncheckedCreateNestedManyWithoutPatientInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutFilesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutFilesInput, PatientUncheckedCreateWithoutFilesInput>
  }

  export type ObservationCreateWithoutFilesInput = {
    id?: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    symptomTemplate: SymptomTemplateCreateNestedOneWithoutObservationsInput
    patient: PatientCreateNestedOneWithoutObservationsInput
    studyPatient: StudyPatientCreateNestedOneWithoutObservationsInput
    recordedBy: UserCreateNestedOneWithoutObservationsInput
    alerts?: AlertCreateNestedManyWithoutObservationInput
  }

  export type ObservationUncheckedCreateWithoutFilesInput = {
    id?: string
    symptomTemplateId: string
    patientId: string
    studyPatientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
    alerts?: AlertUncheckedCreateNestedManyWithoutObservationInput
  }

  export type ObservationCreateOrConnectWithoutFilesInput = {
    where: ObservationWhereUniqueInput
    create: XOR<ObservationCreateWithoutFilesInput, ObservationUncheckedCreateWithoutFilesInput>
  }

  export type TreatmentCreateWithoutFilesInput = {
    id?: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
    template?: TreatmentTemplateCreateNestedOneWithoutTreatmentsInput
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    studyPatient: StudyPatientCreateNestedOneWithoutTreatmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedTreatmentsInput
  }

  export type TreatmentUncheckedCreateWithoutFilesInput = {
    id?: string
    templateId?: string | null
    patientId: string
    studyPatientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
  }

  export type TreatmentCreateOrConnectWithoutFilesInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutFilesInput, TreatmentUncheckedCreateWithoutFilesInput>
  }

  export type PatientUpsertWithoutFilesInput = {
    update: XOR<PatientUpdateWithoutFilesInput, PatientUncheckedUpdateWithoutFilesInput>
    create: XOR<PatientCreateWithoutFilesInput, PatientUncheckedCreateWithoutFilesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutFilesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutFilesInput, PatientUncheckedUpdateWithoutFilesInput>
  }

  export type PatientUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice?: PracticeUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    studies?: StudyPatientUpdateManyWithoutPatientNestedInput
    observations?: ObservationUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    practiceId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedUpdateManyWithoutPatientNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type ObservationUpsertWithoutFilesInput = {
    update: XOR<ObservationUpdateWithoutFilesInput, ObservationUncheckedUpdateWithoutFilesInput>
    create: XOR<ObservationCreateWithoutFilesInput, ObservationUncheckedCreateWithoutFilesInput>
    where?: ObservationWhereInput
  }

  export type ObservationUpdateToOneWithWhereWithoutFilesInput = {
    where?: ObservationWhereInput
    data: XOR<ObservationUpdateWithoutFilesInput, ObservationUncheckedUpdateWithoutFilesInput>
  }

  export type ObservationUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    symptomTemplate?: SymptomTemplateUpdateOneRequiredWithoutObservationsNestedInput
    patient?: PatientUpdateOneRequiredWithoutObservationsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutObservationsNestedInput
    recordedBy?: UserUpdateOneRequiredWithoutObservationsNestedInput
    alerts?: AlertUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    alerts?: AlertUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type TreatmentUpsertWithoutFilesInput = {
    update: XOR<TreatmentUpdateWithoutFilesInput, TreatmentUncheckedUpdateWithoutFilesInput>
    create: XOR<TreatmentCreateWithoutFilesInput, TreatmentUncheckedCreateWithoutFilesInput>
    where?: TreatmentWhereInput
  }

  export type TreatmentUpdateToOneWithWhereWithoutFilesInput = {
    where?: TreatmentWhereInput
    data: XOR<TreatmentUpdateWithoutFilesInput, TreatmentUncheckedUpdateWithoutFilesInput>
  }

  export type TreatmentUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    template?: TreatmentTemplateUpdateOneWithoutTreatmentsNestedInput
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutTreatmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudyCreateManyCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
  }

  export type StudyAssignmentCreateManyUserInput = {
    id?: string
    studyId: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
  }

  export type TreatmentCreateManyCreatedByInput = {
    id?: string
    templateId?: string | null
    patientId: string
    studyPatientId: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
  }

  export type ObservationCreateManyRecordedByInput = {
    id?: string
    symptomTemplateId: string
    patientId: string
    studyPatientId: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type PatientCreateManyCreatedByInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    practiceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    alertId?: string | null
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
  }

  export type StudyUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    practice?: PracticeUpdateOneRequiredWithoutStudiesNestedInput
    patients?: StudyPatientUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    patients?: StudyPatientUncheckedUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUncheckedUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUncheckedUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUncheckedUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    practiceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudyAssignmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
    study?: StudyUpdateOneRequiredWithoutAssignedUsersNestedInput
  }

  export type StudyAssignmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
  }

  export type StudyAssignmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
  }

  export type TreatmentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    template?: TreatmentTemplateUpdateOneWithoutTreatmentsNestedInput
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutTreatmentsNestedInput
    files?: FileUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ObservationUpdateWithoutRecordedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    symptomTemplate?: SymptomTemplateUpdateOneRequiredWithoutObservationsNestedInput
    patient?: PatientUpdateOneRequiredWithoutObservationsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutObservationsNestedInput
    files?: FileUpdateManyWithoutObservationNestedInput
    alerts?: AlertUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutRecordedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutObservationNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateManyWithoutRecordedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    practice?: PracticeUpdateOneRequiredWithoutPatientsNestedInput
    studies?: StudyPatientUpdateManyWithoutPatientNestedInput
    observations?: ObservationUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutPatientNestedInput
    files?: FileUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    practiceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedUpdateManyWithoutPatientNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutPatientNestedInput
    files?: FileUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    practiceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    alert?: AlertUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    alertId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    alertId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateManyPracticeInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
  }

  export type PatientCreateManyPracticeInput = {
    id?: string
    name: string
    species: string
    breed?: string | null
    age?: number | null
    weight?: number | null
    sex?: $Enums.Sex | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    ownerId?: string | null
    ownerName?: string | null
    ownerEmail?: string | null
    ownerPhone?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StudyCreateManyPracticeInput = {
    id?: string
    title: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: $Enums.StudyStatus
    isTemplate?: boolean
  }

  export type SubscriptionHistoryCreateManyPracticeInput = {
    id?: string
    tier: $Enums.SubscriptionTier
    startDate: Date | string
    endDate?: Date | string | null
    amount?: number | null
    paymentId?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdStudies?: StudyUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdStudies?: StudyUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedStudies?: StudyAssignmentUncheckedUpdateManyWithoutUserNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutRecordedByNestedInput
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    studies?: StudyPatientUpdateManyWithoutPatientNestedInput
    observations?: ObservationUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutPatientNestedInput
    files?: FileUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    studies?: StudyPatientUncheckedUpdateManyWithoutPatientNestedInput
    observations?: ObservationUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutPatientNestedInput
    files?: FileUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    breed?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    ownerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StudyUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedStudiesNestedInput
    patients?: StudyPatientUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    patients?: StudyPatientUncheckedUpdateManyWithoutStudyNestedInput
    assignedUsers?: StudyAssignmentUncheckedUpdateManyWithoutStudyNestedInput
    symptomTemplates?: SymptomTemplateUncheckedUpdateManyWithoutStudyNestedInput
    treatmentTemplates?: TreatmentTemplateUncheckedUpdateManyWithoutStudyNestedInput
    notes?: StudyNoteUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateManyWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumStudyStatusFieldUpdateOperationsInput | $Enums.StudyStatus
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubscriptionHistoryUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionHistoryUncheckedUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionHistoryUncheckedUpdateManyWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumSubscriptionTierFieldUpdateOperationsInput | $Enums.SubscriptionTier
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyPatientCreateManyPatientInput = {
    id?: string
    studyId: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
  }

  export type ObservationCreateManyPatientInput = {
    id?: string
    symptomTemplateId: string
    studyPatientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type TreatmentCreateManyPatientInput = {
    id?: string
    templateId?: string | null
    studyPatientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
  }

  export type FileCreateManyPatientInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    observationId?: string | null
    treatmentId?: string | null
  }

  export type StudyPatientUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    study?: StudyUpdateOneRequiredWithoutPatientsNestedInput
    observations?: ObservationUpdateManyWithoutStudyPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutStudyPatientNestedInput
  }

  export type StudyPatientUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    observations?: ObservationUncheckedUpdateManyWithoutStudyPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutStudyPatientNestedInput
  }

  export type StudyPatientUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ObservationUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    symptomTemplate?: SymptomTemplateUpdateOneRequiredWithoutObservationsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutObservationsNestedInput
    recordedBy?: UserUpdateOneRequiredWithoutObservationsNestedInput
    files?: FileUpdateManyWithoutObservationNestedInput
    alerts?: AlertUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutObservationNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TreatmentUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    template?: TreatmentTemplateUpdateOneWithoutTreatmentsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutTreatmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
    files?: FileUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observation?: ObservationUpdateOneWithoutFilesNestedInput
    treatment?: TreatmentUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudyPatientCreateManyStudyInput = {
    id?: string
    patientId: string
    enrollmentDate?: Date | string
    exitDate?: Date | string | null
    isActive?: boolean
  }

  export type StudyAssignmentCreateManyStudyInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
    role: $Enums.StudyRole
  }

  export type SymptomTemplateCreateManyStudyInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    dataType: $Enums.SymptomDataType
    units?: string | null
    minValue?: number | null
    maxValue?: number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentTemplateCreateManyStudyInput = {
    id?: string
    name: string
    description?: string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudyNoteCreateManyStudyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudyPatientUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutStudiesNestedInput
    observations?: ObservationUpdateManyWithoutStudyPatientNestedInput
    treatments?: TreatmentUpdateManyWithoutStudyPatientNestedInput
  }

  export type StudyPatientUncheckedUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    observations?: ObservationUncheckedUpdateManyWithoutStudyPatientNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutStudyPatientNestedInput
  }

  export type StudyPatientUncheckedUpdateManyWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    exitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudyAssignmentUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
    user?: UserUpdateOneRequiredWithoutAssignedStudiesNestedInput
  }

  export type StudyAssignmentUncheckedUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
  }

  export type StudyAssignmentUncheckedUpdateManyWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumStudyRoleFieldUpdateOperationsInput | $Enums.StudyRole
  }

  export type SymptomTemplateUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: ObservationUpdateManyWithoutSymptomTemplateNestedInput
    alertThresholds?: AlertThresholdUpdateManyWithoutSymptomTemplateNestedInput
  }

  export type SymptomTemplateUncheckedUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: ObservationUncheckedUpdateManyWithoutSymptomTemplateNestedInput
    alertThresholds?: AlertThresholdUncheckedUpdateManyWithoutSymptomTemplateNestedInput
  }

  export type SymptomTemplateUncheckedUpdateManyWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    dataType?: EnumSymptomDataTypeFieldUpdateOperationsInput | $Enums.SymptomDataType
    units?: NullableStringFieldUpdateOperationsInput | string | null
    minValue?: NullableFloatFieldUpdateOperationsInput | number | null
    maxValue?: NullableFloatFieldUpdateOperationsInput | number | null
    options?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentTemplateUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatments?: TreatmentUpdateManyWithoutTemplateNestedInput
  }

  export type TreatmentTemplateUncheckedUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatments?: TreatmentUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type TreatmentTemplateUncheckedUpdateManyWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyNoteUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyNoteUncheckedUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyNoteUncheckedUpdateManyWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ObservationCreateManyStudyPatientInput = {
    id?: string
    symptomTemplateId: string
    patientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type TreatmentCreateManyStudyPatientInput = {
    id?: string
    templateId?: string | null
    patientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
  }

  export type ObservationUpdateWithoutStudyPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    symptomTemplate?: SymptomTemplateUpdateOneRequiredWithoutObservationsNestedInput
    patient?: PatientUpdateOneRequiredWithoutObservationsNestedInput
    recordedBy?: UserUpdateOneRequiredWithoutObservationsNestedInput
    files?: FileUpdateManyWithoutObservationNestedInput
    alerts?: AlertUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutStudyPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutObservationNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateManyWithoutStudyPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomTemplateId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TreatmentUpdateWithoutStudyPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    template?: TreatmentTemplateUpdateOneWithoutTreatmentsNestedInput
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
    files?: FileUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutStudyPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateManyWithoutStudyPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: NullableStringFieldUpdateOperationsInput | string | null
    patientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ObservationCreateManySymptomTemplateInput = {
    id?: string
    patientId: string
    studyPatientId: string
    recordedById: string
    recordedAt?: Date | string
    value: JsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type AlertThresholdCreateManySymptomTemplateInput = {
    id?: string
    condition: string
    severity: $Enums.AlertSeverity
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ObservationUpdateWithoutSymptomTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneRequiredWithoutObservationsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutObservationsNestedInput
    recordedBy?: UserUpdateOneRequiredWithoutObservationsNestedInput
    files?: FileUpdateManyWithoutObservationNestedInput
    alerts?: AlertUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateWithoutSymptomTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutObservationNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutObservationNestedInput
  }

  export type ObservationUncheckedUpdateManyWithoutSymptomTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    recordedById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: JsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlertThresholdUpdateWithoutSymptomTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alerts?: AlertUpdateManyWithoutThresholdNestedInput
  }

  export type AlertThresholdUncheckedUpdateWithoutSymptomTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alerts?: AlertUncheckedUpdateManyWithoutThresholdNestedInput
  }

  export type AlertThresholdUncheckedUpdateManyWithoutSymptomTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateManyObservationInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patientId?: string | null
    treatmentId?: string | null
  }

  export type AlertCreateManyObservationInput = {
    id?: string
    thresholdId: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type FileUpdateWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneWithoutFilesNestedInput
    treatment?: TreatmentUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUncheckedUpdateManyWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlertUpdateWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threshold?: AlertThresholdUpdateOneRequiredWithoutAlertsNestedInput
    notifications?: NotificationUpdateManyWithoutAlertNestedInput
  }

  export type AlertUncheckedUpdateWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    thresholdId?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: NotificationUncheckedUpdateManyWithoutAlertNestedInput
  }

  export type AlertUncheckedUpdateManyWithoutObservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    thresholdId?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TreatmentCreateManyTemplateInput = {
    id?: string
    patientId: string
    studyPatientId: string
    createdById: string
    createdAt?: Date | string
    administeredAt: Date | string
    name: string
    description?: string | null
    dosage?: string | null
    notes?: string | null
  }

  export type TreatmentUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    studyPatient?: StudyPatientUpdateOneRequiredWithoutTreatmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
    files?: FileUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    studyPatientId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateManyTreatmentInput = {
    id?: string
    filename: string
    filepath: string
    mimetype: string
    size: number
    createdAt?: Date | string
    patientId?: string | null
    observationId?: string | null
  }

  export type FileUpdateWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneWithoutFilesNestedInput
    observation?: ObservationUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUncheckedUpdateManyWithoutTreatmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    observationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlertCreateManyThresholdInput = {
    id?: string
    observationId: string
    triggeredAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type AlertUpdateWithoutThresholdInput = {
    id?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observation?: ObservationUpdateOneRequiredWithoutAlertsNestedInput
    notifications?: NotificationUpdateManyWithoutAlertNestedInput
  }

  export type AlertUncheckedUpdateWithoutThresholdInput = {
    id?: StringFieldUpdateOperationsInput | string
    observationId?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notifications?: NotificationUncheckedUpdateManyWithoutAlertNestedInput
  }

  export type AlertUncheckedUpdateManyWithoutThresholdInput = {
    id?: StringFieldUpdateOperationsInput | string
    observationId?: StringFieldUpdateOperationsInput | string
    triggeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateManyAlertInput = {
    id?: string
    userId: string
    title: string
    message: string
    createdAt?: Date | string
    readAt?: Date | string | null
    isRead?: boolean
  }

  export type NotificationUpdateWithoutAlertInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutAlertInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyWithoutAlertInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}