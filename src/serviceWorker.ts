// This is the service worker for the MyVetStudy PWA

import { clientsClaim } from 'workbox-core';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// @ts-ignore
// Disable TypeScript checks for service worker file
// Since service workers run in a different context with different global objects

// Claim control immediately
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// @ts-ignore
const manifest = self.__WB_MANIFEST;
precacheAndRoute(manifest);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell.
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (fileExtensionRegexp.test(url.pathname)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL('/index.html')
);

// Cache images with a cache-first strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache API/data requests with StaleWhileRevalidate strategy
registerRoute(
  // @ts-ignore - Ignore TypeScript errors here
  ({ url }) => url.origin === self.location.origin && url.pathname.startsWith('/api/'),
  new StaleWhileRevalidate({
    cacheName: 'api-responses',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60, // 1 hour
      }),
    ],
  })
);

// Listen for messages from the client and respond accordingly
// @ts-ignore - Ignore TypeScript errors for service worker event
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    // @ts-ignore
    self.skipWaiting();
  }
});

// Add offline fallbacks or additional logic for handling offline mode
// ...

// Handle background sync for offline form submissions
// ...

// Handle push notifications
// @ts-ignore - Ignore TypeScript errors for service worker event
self.addEventListener('push', (event) => {
  // @ts-ignore
  const data = event.data?.json() ?? {};
  const title = data.title || 'MyVetStudy';
  const options = {
    body: data.body || 'New update from MyVetStudy',
    icon: '/icon-192x192.png',
    badge: '/icon-192x192.png',
    data: {
      url: data.url || '/',
    },
  };

  // @ts-ignore
  event.waitUntil(self.registration.showNotification(title, options));
});

// Handle notification click
// @ts-ignore - Ignore TypeScript errors for service worker event
self.addEventListener('notificationclick', (event) => {
  // @ts-ignore
  event.notification.close();
  
  // @ts-ignore
  event.waitUntil(
    // @ts-ignore
    clients.openWindow(event.notification.data.url || '/')
  );
}); 